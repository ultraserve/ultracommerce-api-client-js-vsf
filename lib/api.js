"use strict";
// tslint:disable
/**
 * UltraCommerce API
 * The UltraCommerce API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WishlistEndpointApi = exports.WishlistEndpointApiFactory = exports.WishlistEndpointApiFp = exports.WishlistEndpointApiAxiosParamCreator = exports.WebMvcLinksHandlerApi = exports.WebMvcLinksHandlerApiFactory = exports.WebMvcLinksHandlerApiFp = exports.WebMvcLinksHandlerApiAxiosParamCreator = exports.SkuEndpointApi = exports.SkuEndpointApiFactory = exports.SkuEndpointApiFp = exports.SkuEndpointApiAxiosParamCreator = exports.RelatedProductsEndpointApi = exports.RelatedProductsEndpointApiFactory = exports.RelatedProductsEndpointApiFp = exports.RelatedProductsEndpointApiAxiosParamCreator = exports.PromotionMessageEndpointApi = exports.PromotionMessageEndpointApiFactory = exports.PromotionMessageEndpointApiFp = exports.PromotionMessageEndpointApiAxiosParamCreator = exports.ProductsEndpointApi = exports.ProductsEndpointApiFactory = exports.ProductsEndpointApiFp = exports.ProductsEndpointApiAxiosParamCreator = exports.ProductEndpointApi = exports.ProductEndpointApiFactory = exports.ProductEndpointApiFp = exports.ProductEndpointApiAxiosParamCreator = exports.PreviewTemplateControllerApi = exports.PreviewTemplateControllerApiFactory = exports.PreviewTemplateControllerApiFp = exports.PreviewTemplateControllerApiAxiosParamCreator = exports.OrderHistoryEndpointApi = exports.OrderHistoryEndpointApiFactory = exports.OrderHistoryEndpointApiFp = exports.OrderHistoryEndpointApiAxiosParamCreator = exports.OrderEndpointApi = exports.OrderEndpointApiFactory = exports.OrderEndpointApiFp = exports.OrderEndpointApiAxiosParamCreator = exports.OperationHandlerApi = exports.OperationHandlerApiFactory = exports.OperationHandlerApiFp = exports.OperationHandlerApiAxiosParamCreator = exports.MeEndpointApi = exports.MeEndpointApiFactory = exports.MeEndpointApiFp = exports.MeEndpointApiAxiosParamCreator = exports.LoginEndpointApi = exports.LoginEndpointApiFactory = exports.LoginEndpointApiFp = exports.LoginEndpointApiAxiosParamCreator = exports.InventoryEndpointApi = exports.InventoryEndpointApiFactory = exports.InventoryEndpointApiFp = exports.InventoryEndpointApiAxiosParamCreator = exports.FulfillmentEndpointApi = exports.FulfillmentEndpointApiFactory = exports.FulfillmentEndpointApiFp = exports.FulfillmentEndpointApiAxiosParamCreator = exports.CustomerEndpointApi = exports.CustomerEndpointApiFactory = exports.CustomerEndpointApiFp = exports.CustomerEndpointApiAxiosParamCreator = exports.CategoryEndpointApi = exports.CategoryEndpointApiFactory = exports.CategoryEndpointApiFp = exports.CategoryEndpointApiAxiosParamCreator = exports.CatalogEndpointApi = exports.CatalogEndpointApiFactory = exports.CatalogEndpointApiFp = exports.CatalogEndpointApiAxiosParamCreator = exports.CartEndpointApi = exports.CartEndpointApiFactory = exports.CartEndpointApiFp = exports.CartEndpointApiAxiosParamCreator = exports.BasicErrorControllerApi = exports.BasicErrorControllerApiFactory = exports.BasicErrorControllerApiFp = exports.BasicErrorControllerApiAxiosParamCreator = exports.ModelAndViewStatusEnum = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var ModelAndViewStatusEnum;
(function (ModelAndViewStatusEnum) {
    ModelAndViewStatusEnum["_100CONTINUE"] = "100 CONTINUE";
    ModelAndViewStatusEnum["_101SWITCHINGPROTOCOLS"] = "101 SWITCHING_PROTOCOLS";
    ModelAndViewStatusEnum["_102PROCESSING"] = "102 PROCESSING";
    ModelAndViewStatusEnum["_103CHECKPOINT"] = "103 CHECKPOINT";
    ModelAndViewStatusEnum["_200OK"] = "200 OK";
    ModelAndViewStatusEnum["_201CREATED"] = "201 CREATED";
    ModelAndViewStatusEnum["_202ACCEPTED"] = "202 ACCEPTED";
    ModelAndViewStatusEnum["_203NONAUTHORITATIVEINFORMATION"] = "203 NON_AUTHORITATIVE_INFORMATION";
    ModelAndViewStatusEnum["_204NOCONTENT"] = "204 NO_CONTENT";
    ModelAndViewStatusEnum["_205RESETCONTENT"] = "205 RESET_CONTENT";
    ModelAndViewStatusEnum["_206PARTIALCONTENT"] = "206 PARTIAL_CONTENT";
    ModelAndViewStatusEnum["_207MULTISTATUS"] = "207 MULTI_STATUS";
    ModelAndViewStatusEnum["_208ALREADYREPORTED"] = "208 ALREADY_REPORTED";
    ModelAndViewStatusEnum["_226IMUSED"] = "226 IM_USED";
    ModelAndViewStatusEnum["_300MULTIPLECHOICES"] = "300 MULTIPLE_CHOICES";
    ModelAndViewStatusEnum["_301MOVEDPERMANENTLY"] = "301 MOVED_PERMANENTLY";
    ModelAndViewStatusEnum["_302FOUND"] = "302 FOUND";
    ModelAndViewStatusEnum["_302MOVEDTEMPORARILY"] = "302 MOVED_TEMPORARILY";
    ModelAndViewStatusEnum["_303SEEOTHER"] = "303 SEE_OTHER";
    ModelAndViewStatusEnum["_304NOTMODIFIED"] = "304 NOT_MODIFIED";
    ModelAndViewStatusEnum["_305USEPROXY"] = "305 USE_PROXY";
    ModelAndViewStatusEnum["_307TEMPORARYREDIRECT"] = "307 TEMPORARY_REDIRECT";
    ModelAndViewStatusEnum["_308PERMANENTREDIRECT"] = "308 PERMANENT_REDIRECT";
    ModelAndViewStatusEnum["_400BADREQUEST"] = "400 BAD_REQUEST";
    ModelAndViewStatusEnum["_401UNAUTHORIZED"] = "401 UNAUTHORIZED";
    ModelAndViewStatusEnum["_402PAYMENTREQUIRED"] = "402 PAYMENT_REQUIRED";
    ModelAndViewStatusEnum["_403FORBIDDEN"] = "403 FORBIDDEN";
    ModelAndViewStatusEnum["_404NOTFOUND"] = "404 NOT_FOUND";
    ModelAndViewStatusEnum["_405METHODNOTALLOWED"] = "405 METHOD_NOT_ALLOWED";
    ModelAndViewStatusEnum["_406NOTACCEPTABLE"] = "406 NOT_ACCEPTABLE";
    ModelAndViewStatusEnum["_407PROXYAUTHENTICATIONREQUIRED"] = "407 PROXY_AUTHENTICATION_REQUIRED";
    ModelAndViewStatusEnum["_408REQUESTTIMEOUT"] = "408 REQUEST_TIMEOUT";
    ModelAndViewStatusEnum["_409CONFLICT"] = "409 CONFLICT";
    ModelAndViewStatusEnum["_410GONE"] = "410 GONE";
    ModelAndViewStatusEnum["_411LENGTHREQUIRED"] = "411 LENGTH_REQUIRED";
    ModelAndViewStatusEnum["_412PRECONDITIONFAILED"] = "412 PRECONDITION_FAILED";
    ModelAndViewStatusEnum["_413PAYLOADTOOLARGE"] = "413 PAYLOAD_TOO_LARGE";
    ModelAndViewStatusEnum["_413REQUESTENTITYTOOLARGE"] = "413 REQUEST_ENTITY_TOO_LARGE";
    ModelAndViewStatusEnum["_414URITOOLONG"] = "414 URI_TOO_LONG";
    ModelAndViewStatusEnum["_414REQUESTURITOOLONG"] = "414 REQUEST_URI_TOO_LONG";
    ModelAndViewStatusEnum["_415UNSUPPORTEDMEDIATYPE"] = "415 UNSUPPORTED_MEDIA_TYPE";
    ModelAndViewStatusEnum["_416REQUESTEDRANGENOTSATISFIABLE"] = "416 REQUESTED_RANGE_NOT_SATISFIABLE";
    ModelAndViewStatusEnum["_417EXPECTATIONFAILED"] = "417 EXPECTATION_FAILED";
    ModelAndViewStatusEnum["_418IAMATEAPOT"] = "418 I_AM_A_TEAPOT";
    ModelAndViewStatusEnum["_419INSUFFICIENTSPACEONRESOURCE"] = "419 INSUFFICIENT_SPACE_ON_RESOURCE";
    ModelAndViewStatusEnum["_420METHODFAILURE"] = "420 METHOD_FAILURE";
    ModelAndViewStatusEnum["_421DESTINATIONLOCKED"] = "421 DESTINATION_LOCKED";
    ModelAndViewStatusEnum["_422UNPROCESSABLEENTITY"] = "422 UNPROCESSABLE_ENTITY";
    ModelAndViewStatusEnum["_423LOCKED"] = "423 LOCKED";
    ModelAndViewStatusEnum["_424FAILEDDEPENDENCY"] = "424 FAILED_DEPENDENCY";
    ModelAndViewStatusEnum["_426UPGRADEREQUIRED"] = "426 UPGRADE_REQUIRED";
    ModelAndViewStatusEnum["_428PRECONDITIONREQUIRED"] = "428 PRECONDITION_REQUIRED";
    ModelAndViewStatusEnum["_429TOOMANYREQUESTS"] = "429 TOO_MANY_REQUESTS";
    ModelAndViewStatusEnum["_431REQUESTHEADERFIELDSTOOLARGE"] = "431 REQUEST_HEADER_FIELDS_TOO_LARGE";
    ModelAndViewStatusEnum["_451UNAVAILABLEFORLEGALREASONS"] = "451 UNAVAILABLE_FOR_LEGAL_REASONS";
    ModelAndViewStatusEnum["_500INTERNALSERVERERROR"] = "500 INTERNAL_SERVER_ERROR";
    ModelAndViewStatusEnum["_501NOTIMPLEMENTED"] = "501 NOT_IMPLEMENTED";
    ModelAndViewStatusEnum["_502BADGATEWAY"] = "502 BAD_GATEWAY";
    ModelAndViewStatusEnum["_503SERVICEUNAVAILABLE"] = "503 SERVICE_UNAVAILABLE";
    ModelAndViewStatusEnum["_504GATEWAYTIMEOUT"] = "504 GATEWAY_TIMEOUT";
    ModelAndViewStatusEnum["_505HTTPVERSIONNOTSUPPORTED"] = "505 HTTP_VERSION_NOT_SUPPORTED";
    ModelAndViewStatusEnum["_506VARIANTALSONEGOTIATES"] = "506 VARIANT_ALSO_NEGOTIATES";
    ModelAndViewStatusEnum["_507INSUFFICIENTSTORAGE"] = "507 INSUFFICIENT_STORAGE";
    ModelAndViewStatusEnum["_508LOOPDETECTED"] = "508 LOOP_DETECTED";
    ModelAndViewStatusEnum["_509BANDWIDTHLIMITEXCEEDED"] = "509 BANDWIDTH_LIMIT_EXCEEDED";
    ModelAndViewStatusEnum["_510NOTEXTENDED"] = "510 NOT_EXTENDED";
    ModelAndViewStatusEnum["_511NETWORKAUTHENTICATIONREQUIRED"] = "511 NETWORK_AUTHENTICATION_REQUIRED";
})(ModelAndViewStatusEnum = exports.ModelAndViewStatusEnum || (exports.ModelAndViewStatusEnum = {}));
/**
 * BasicErrorControllerApi - axios parameter creator
 * @export
 */
exports.BasicErrorControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'OPTIONS' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
exports.BasicErrorControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingDELETE1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingHEAD1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingOPTIONS1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPATCH1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPOST1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPUT1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
exports.BasicErrorControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE1(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorUsingDELETE1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET1(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD1(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorUsingHEAD1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS1(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorUsingOPTIONS1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH1(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorUsingPATCH1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST1(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorUsingPOST1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT1(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorUsingPUT1(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
class BasicErrorControllerApi extends base_1.BaseAPI {
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingDELETE1(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorUsingDELETE1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingGET1(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingHEAD1(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorUsingHEAD1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingOPTIONS1(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorUsingOPTIONS1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingPATCH1(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorUsingPATCH1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingPOST1(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorUsingPOST1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingPUT1(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorUsingPUT1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BasicErrorControllerApi = BasicErrorControllerApi;
/**
 * CartEndpointApi - axios parameter creator
 * @export
 */
exports.CartEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addItemToOrder
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {boolean} [isUpdateRequest] isUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToOrderUsingPOST1: (cartId, customerId, orderItemWrapper, priceOrder, isUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addItemToOrderUsingPOST1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addItemToOrderUsingPOST1.');
            }
            // verify required parameter 'orderItemWrapper' is not null or undefined
            if (orderItemWrapper === null || orderItemWrapper === undefined) {
                throw new base_1.RequiredError('orderItemWrapper', 'Required parameter orderItemWrapper was null or undefined when calling addItemToOrderUsingPOST1.');
            }
            const localVarPath = `/cart/{cartId}/item`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (isUpdateRequest !== undefined) {
                localVarQueryParameter['isUpdateRequest'] = isUpdateRequest;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItemWrapper !== undefined ? orderItemWrapper : {}) : (orderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST1: (promoCode, cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'promoCode' is not null or undefined
            if (promoCode === null || promoCode === undefined) {
                throw new base_1.RequiredError('promoCode', 'Required parameter promoCode was null or undefined when calling addOfferCodeUsingPOST1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addOfferCodeUsingPOST1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addOfferCodeUsingPOST1.');
            }
            const localVarPath = `/cart/{cartId}/offer/{promoCode}`
                .replace(`{${"promoCode"}}`, encodeURIComponent(String(promoCode)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT1: (paymentId, cartId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling addOrderPaymentTransactionUsingPUT1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addOrderPaymentTransactionUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addOrderPaymentTransactionUsingPUT1.');
            }
            const localVarPath = `/cart/checkout/payment/{paymentId}/transaction`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST1: (amount, currency, customerPaymentId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new base_1.RequiredError('amount', 'Required parameter amount was null or undefined when calling addPaymentToOrderByIdUsingPOST1.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new base_1.RequiredError('currency', 'Required parameter currency was null or undefined when calling addPaymentToOrderByIdUsingPOST1.');
            }
            // verify required parameter 'customerPaymentId' is not null or undefined
            if (customerPaymentId === null || customerPaymentId === undefined) {
                throw new base_1.RequiredError('customerPaymentId', 'Required parameter customerPaymentId was null or undefined when calling addPaymentToOrderByIdUsingPOST1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addPaymentToOrderByIdUsingPOST1.');
            }
            const localVarPath = `/cart/checkout/payment/{customerPaymentId}`
                .replace(`{${"customerPaymentId"}}`, encodeURIComponent(String(customerPaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addPaymentToOrder
         * @param {number} cartId cartId
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST1: (cartId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addPaymentToOrderUsingPOST1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addPaymentToOrderUsingPOST1.');
            }
            const localVarPath = `/cart/checkout/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary configureProductItem
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureProductItemUsingGET1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling configureProductItemUsingGET1.');
            }
            const localVarPath = `/cart/configure/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary createNewCartForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCartForCustomerUsingPOST3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/cart`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary deleteOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderAttributesUsingDELETE1: (cartId, customerId, requestParams, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling deleteOrderAttributesUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling deleteOrderAttributesUsingDELETE1.');
            }
            // verify required parameter 'requestParams' is not null or undefined
            if (requestParams === null || requestParams === undefined) {
                throw new base_1.RequiredError('requestParams', 'Required parameter requestParams was null or undefined when calling deleteOrderAttributesUsingDELETE1.');
            }
            const localVarPath = `/cart/{cartId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary deleteProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductOptionsUsingDELETE1: (cartId, itemId, customerId, priceOrder, requestParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling deleteProductOptionsUsingDELETE1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling deleteProductOptionsUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling deleteProductOptionsUsingDELETE1.');
            }
            const localVarPath = `/cart/{cartId}/item/{itemId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCartById
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartByIdUsingGET1: (cartId, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling findCartByIdUsingGET1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findCartByIdUsingGET1.');
            }
            const localVarPath = `/cart/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCartForCustomer
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartForCustomerUsingGET1: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findCartForCustomerUsingGET1.');
            }
            const localVarPath = `/cart`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findPaymentsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET1: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling findPaymentsForOrderUsingGET1.');
            }
            const localVarPath = `/cart/checkout/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary performCheckout
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST1: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling performCheckoutUsingPOST1.');
            }
            const localVarPath = `/cart/checkout/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary reconfigureOrderItemFromOrder
         * @param {number} orderItemId orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconfigureOrderItemFromOrderUsingGET1: (orderItemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderItemId' is not null or undefined
            if (orderItemId === null || orderItemId === undefined) {
                throw new base_1.RequiredError('orderItemId', 'Required parameter orderItemId was null or undefined when calling reconfigureOrderItemFromOrderUsingGET1.');
            }
            const localVarPath = `/cart/reconfigure/{orderItemId}`
                .replace(`{${"orderItemId"}}`, encodeURIComponent(String(orderItemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllOfferCodes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE1: (cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeAllOfferCodesUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllOfferCodesUsingDELETE1.');
            }
            const localVarPath = `/cart/{cartId}/offers`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE1: (itemId, cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeItemFromOrderUsingDELETE1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeItemFromOrderUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeItemFromOrderUsingDELETE1.');
            }
            const localVarPath = `/cart/{cartId}/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE1: (promoCode, cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'promoCode' is not null or undefined
            if (promoCode === null || promoCode === undefined) {
                throw new base_1.RequiredError('promoCode', 'Required parameter promoCode was null or undefined when calling removeOfferCodeUsingDELETE1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeOfferCodeUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeOfferCodeUsingDELETE1.');
            }
            const localVarPath = `/cart/{cartId}/offer/{promoCode}`
                .replace(`{${"promoCode"}}`, encodeURIComponent(String(promoCode)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE1: (paymentId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling removePaymentFromOrderByIdUsingDELETE1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removePaymentFromOrderByIdUsingDELETE1.');
            }
            const localVarPath = `/cart/checkout/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} quantity quantity
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT1: (itemId, cartId, quantity, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateItemQuantityUsingPUT1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateItemQuantityUsingPUT1.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new base_1.RequiredError('quantity', 'Required parameter quantity was null or undefined when calling updateItemQuantityUsingPUT1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateItemQuantityUsingPUT1.');
            }
            const localVarPath = `/cart/{cartId}/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderAttributesUsingPUT1: (cartId, customerId, requestParams, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateOrderAttributesUsingPUT1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateOrderAttributesUsingPUT1.');
            }
            // verify required parameter 'requestParams' is not null or undefined
            if (requestParams === null || requestParams === undefined) {
                throw new base_1.RequiredError('requestParams', 'Required parameter requestParams was null or undefined when calling updateOrderAttributesUsingPUT1.');
            }
            const localVarPath = `/cart/{cartId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductOptionsUsingPUT1: (cartId, itemId, customerId, requestParams, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateProductOptionsUsingPUT1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateProductOptionsUsingPUT1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateProductOptionsUsingPUT1.');
            }
            // verify required parameter 'requestParams' is not null or undefined
            if (requestParams === null || requestParams === undefined) {
                throw new base_1.RequiredError('requestParams', 'Required parameter requestParams was null or undefined when calling updateProductOptionsUsingPUT1.');
            }
            const localVarPath = `/cart/{cartId}/item/{itemId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CartEndpointApi - functional programming interface
 * @export
 */
exports.CartEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addItemToOrder
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {boolean} [isUpdateRequest] isUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToOrderUsingPOST1(cartId, customerId, orderItemWrapper, priceOrder, isUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).addItemToOrderUsingPOST1(cartId, customerId, orderItemWrapper, priceOrder, isUpdateRequest, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST1(promoCode, cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).addOfferCodeUsingPOST1(promoCode, cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT1(paymentId, cartId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).addOrderPaymentTransactionUsingPUT1(paymentId, cartId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST1(amount, currency, customerPaymentId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).addPaymentToOrderByIdUsingPOST1(amount, currency, customerPaymentId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addPaymentToOrder
         * @param {number} cartId cartId
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST1(cartId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).addPaymentToOrderUsingPOST1(cartId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary configureProductItem
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureProductItemUsingGET1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).configureProductItemUsingGET1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary createNewCartForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCartForCustomerUsingPOST3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).createNewCartForCustomerUsingPOST3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary deleteOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderAttributesUsingDELETE1(cartId, customerId, requestParams, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).deleteOrderAttributesUsingDELETE1(cartId, customerId, requestParams, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary deleteProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductOptionsUsingDELETE1(cartId, itemId, customerId, priceOrder, requestParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).deleteProductOptionsUsingDELETE1(cartId, itemId, customerId, priceOrder, requestParams, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCartById
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartByIdUsingGET1(cartId, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).findCartByIdUsingGET1(cartId, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCartForCustomer
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartForCustomerUsingGET1(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).findCartForCustomerUsingGET1(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findPaymentsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET1(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).findPaymentsForOrderUsingGET1(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary performCheckout
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST1(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).performCheckoutUsingPOST1(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary reconfigureOrderItemFromOrder
         * @param {number} orderItemId orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconfigureOrderItemFromOrderUsingGET1(orderItemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).reconfigureOrderItemFromOrderUsingGET1(orderItemId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllOfferCodes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE1(cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).removeAllOfferCodesUsingDELETE1(cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE1(itemId, cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).removeItemFromOrderUsingDELETE1(itemId, cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE1(promoCode, cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).removeOfferCodeUsingDELETE1(promoCode, cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE1(paymentId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).removePaymentFromOrderByIdUsingDELETE1(paymentId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} quantity quantity
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT1(itemId, cartId, quantity, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).updateItemQuantityUsingPUT1(itemId, cartId, quantity, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderAttributesUsingPUT1(cartId, customerId, requestParams, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).updateOrderAttributesUsingPUT1(cartId, customerId, requestParams, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductOptionsUsingPUT1(cartId, itemId, customerId, requestParams, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).updateProductOptionsUsingPUT1(cartId, itemId, customerId, requestParams, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CartEndpointApi - factory interface
 * @export
 */
exports.CartEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addItemToOrder
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {boolean} [isUpdateRequest] isUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToOrderUsingPOST1(cartId, customerId, orderItemWrapper, priceOrder, isUpdateRequest, options) {
            return exports.CartEndpointApiFp(configuration).addItemToOrderUsingPOST1(cartId, customerId, orderItemWrapper, priceOrder, isUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST1(promoCode, cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).addOfferCodeUsingPOST1(promoCode, cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT1(paymentId, cartId, wrapper, options) {
            return exports.CartEndpointApiFp(configuration).addOrderPaymentTransactionUsingPUT1(paymentId, cartId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST1(amount, currency, customerPaymentId, cartId, options) {
            return exports.CartEndpointApiFp(configuration).addPaymentToOrderByIdUsingPOST1(amount, currency, customerPaymentId, cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addPaymentToOrder
         * @param {number} cartId cartId
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST1(cartId, wrapper, options) {
            return exports.CartEndpointApiFp(configuration).addPaymentToOrderUsingPOST1(cartId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary configureProductItem
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureProductItemUsingGET1(productId, options) {
            return exports.CartEndpointApiFp(configuration).configureProductItemUsingGET1(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary createNewCartForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCartForCustomerUsingPOST3(options) {
            return exports.CartEndpointApiFp(configuration).createNewCartForCustomerUsingPOST3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderAttributesUsingDELETE1(cartId, customerId, requestParams, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).deleteOrderAttributesUsingDELETE1(cartId, customerId, requestParams, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductOptionsUsingDELETE1(cartId, itemId, customerId, priceOrder, requestParams, options) {
            return exports.CartEndpointApiFp(configuration).deleteProductOptionsUsingDELETE1(cartId, itemId, customerId, priceOrder, requestParams, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCartById
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartByIdUsingGET1(cartId, customerId, options) {
            return exports.CartEndpointApiFp(configuration).findCartByIdUsingGET1(cartId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCartForCustomer
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartForCustomerUsingGET1(customerId, options) {
            return exports.CartEndpointApiFp(configuration).findCartForCustomerUsingGET1(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findPaymentsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET1(cartId, options) {
            return exports.CartEndpointApiFp(configuration).findPaymentsForOrderUsingGET1(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary performCheckout
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST1(cartId, options) {
            return exports.CartEndpointApiFp(configuration).performCheckoutUsingPOST1(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary reconfigureOrderItemFromOrder
         * @param {number} orderItemId orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconfigureOrderItemFromOrderUsingGET1(orderItemId, options) {
            return exports.CartEndpointApiFp(configuration).reconfigureOrderItemFromOrderUsingGET1(orderItemId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllOfferCodes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE1(cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).removeAllOfferCodesUsingDELETE1(cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE1(itemId, cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).removeItemFromOrderUsingDELETE1(itemId, cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE1(promoCode, cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).removeOfferCodeUsingDELETE1(promoCode, cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE1(paymentId, cartId, options) {
            return exports.CartEndpointApiFp(configuration).removePaymentFromOrderByIdUsingDELETE1(paymentId, cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} quantity quantity
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT1(itemId, cartId, quantity, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).updateItemQuantityUsingPUT1(itemId, cartId, quantity, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderAttributesUsingPUT1(cartId, customerId, requestParams, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).updateOrderAttributesUsingPUT1(cartId, customerId, requestParams, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductOptionsUsingPUT1(cartId, itemId, customerId, requestParams, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).updateProductOptionsUsingPUT1(cartId, itemId, customerId, requestParams, priceOrder, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CartEndpointApi - object-oriented interface
 * @export
 * @class CartEndpointApi
 * @extends {BaseAPI}
 */
class CartEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {boolean} [isUpdateRequest] isUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addItemToOrderUsingPOST1(cartId, customerId, orderItemWrapper, priceOrder, isUpdateRequest, options) {
        return exports.CartEndpointApiFp(this.configuration).addItemToOrderUsingPOST1(cartId, customerId, orderItemWrapper, priceOrder, isUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addOfferCodeUsingPOST1(promoCode, cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).addOfferCodeUsingPOST1(promoCode, cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addOrderPaymentTransactionUsingPUT1(paymentId, cartId, wrapper, options) {
        return exports.CartEndpointApiFp(this.configuration).addOrderPaymentTransactionUsingPUT1(paymentId, cartId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addPaymentToOrderByIdUsingPOST1(amount, currency, customerPaymentId, cartId, options) {
        return exports.CartEndpointApiFp(this.configuration).addPaymentToOrderByIdUsingPOST1(amount, currency, customerPaymentId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addPaymentToOrderUsingPOST1(cartId, wrapper, options) {
        return exports.CartEndpointApiFp(this.configuration).addPaymentToOrderUsingPOST1(cartId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary configureProductItem
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    configureProductItemUsingGET1(productId, options) {
        return exports.CartEndpointApiFp(this.configuration).configureProductItemUsingGET1(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary createNewCartForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    createNewCartForCustomerUsingPOST3(options) {
        return exports.CartEndpointApiFp(this.configuration).createNewCartForCustomerUsingPOST3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteOrderAttributesUsingDELETE1(cartId, customerId, requestParams, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).deleteOrderAttributesUsingDELETE1(cartId, customerId, requestParams, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteProductOptionsUsingDELETE1(cartId, itemId, customerId, priceOrder, requestParams, options) {
        return exports.CartEndpointApiFp(this.configuration).deleteProductOptionsUsingDELETE1(cartId, itemId, customerId, priceOrder, requestParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findCartByIdUsingGET1(cartId, customerId, options) {
        return exports.CartEndpointApiFp(this.configuration).findCartByIdUsingGET1(cartId, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findCartForCustomerUsingGET1(customerId, options) {
        return exports.CartEndpointApiFp(this.configuration).findCartForCustomerUsingGET1(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findPaymentsForOrderUsingGET1(cartId, options) {
        return exports.CartEndpointApiFp(this.configuration).findPaymentsForOrderUsingGET1(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    performCheckoutUsingPOST1(cartId, options) {
        return exports.CartEndpointApiFp(this.configuration).performCheckoutUsingPOST1(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary reconfigureOrderItemFromOrder
     * @param {number} orderItemId orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    reconfigureOrderItemFromOrderUsingGET1(orderItemId, options) {
        return exports.CartEndpointApiFp(this.configuration).reconfigureOrderItemFromOrderUsingGET1(orderItemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeAllOfferCodesUsingDELETE1(cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).removeAllOfferCodesUsingDELETE1(cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeItemFromOrderUsingDELETE1(itemId, cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).removeItemFromOrderUsingDELETE1(itemId, cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeOfferCodeUsingDELETE1(promoCode, cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).removeOfferCodeUsingDELETE1(promoCode, cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removePaymentFromOrderByIdUsingDELETE1(paymentId, cartId, options) {
        return exports.CartEndpointApiFp(this.configuration).removePaymentFromOrderByIdUsingDELETE1(paymentId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateItemQuantityUsingPUT1(itemId, cartId, quantity, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).updateItemQuantityUsingPUT1(itemId, cartId, quantity, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateOrderAttributesUsingPUT1(cartId, customerId, requestParams, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).updateOrderAttributesUsingPUT1(cartId, customerId, requestParams, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateProductOptionsUsingPUT1(cartId, itemId, customerId, requestParams, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).updateProductOptionsUsingPUT1(cartId, itemId, customerId, requestParams, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CartEndpointApi = CartEndpointApi;
/**
 * CatalogEndpointApi - axios parameter creator
 * @export
 */
exports.CatalogEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary createCatalog
         * @param {UCCatalogWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCatalogUsingPOST1: (wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling createCatalogUsingPOST1.');
            }
            const localVarPath = `/catalog/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary deleteCatalogById
         * @param {number} catalogId catalogId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogByIdUsingDELETE1: (catalogId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'catalogId' is not null or undefined
            if (catalogId === null || catalogId === undefined) {
                throw new base_1.RequiredError('catalogId', 'Required parameter catalogId was null or undefined when calling deleteCatalogByIdUsingDELETE1.');
            }
            const localVarPath = `/catalog/{catalogId}`
                .replace(`{${"catalogId"}}`, encodeURIComponent(String(catalogId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllCatalogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCatalogsUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/catalog/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllCategories
         * @param {string} [name] name
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCategoriesUsingGET1: (name, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/catalog/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllProductOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProductOptionsUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/catalog/product-options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSearchResultsByCategoryAndQuery
         * @param {number} categoryId categoryId
         * @param {string} [q] q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByCategoryAndQueryUsingGET1: (categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findSearchResultsByCategoryAndQueryUsingGET1.');
            }
            const localVarPath = `/catalog/search/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSearchResultsByQuery
         * @param {string} q q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByQueryUsingGET1: (q, pageSize, page, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new base_1.RequiredError('q', 'Required parameter q was null or undefined when calling findSearchResultsByQueryUsingGET1.');
            }
            const localVarPath = `/catalog/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary modifyCatalog
         * @param {number} catalogId catalogId
         * @param {UCCatalogWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCatalogUsingPATCH1: (catalogId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'catalogId' is not null or undefined
            if (catalogId === null || catalogId === undefined) {
                throw new base_1.RequiredError('catalogId', 'Required parameter catalogId was null or undefined when calling modifyCatalogUsingPATCH1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling modifyCatalogUsingPATCH1.');
            }
            const localVarPath = `/catalog/{catalogId}`
                .replace(`{${"catalogId"}}`, encodeURIComponent(String(catalogId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CatalogEndpointApi - functional programming interface
 * @export
 */
exports.CatalogEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createCatalog
         * @param {UCCatalogWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCatalogUsingPOST1(wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).createCatalogUsingPOST1(wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary deleteCatalogById
         * @param {number} catalogId catalogId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogByIdUsingDELETE1(catalogId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).deleteCatalogByIdUsingDELETE1(catalogId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllCatalogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCatalogsUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findAllCatalogsUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllCategories
         * @param {string} [name] name
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCategoriesUsingGET1(name, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findAllCategoriesUsingGET1(name, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllProductOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProductOptionsUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findAllProductOptionsUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSearchResultsByCategoryAndQuery
         * @param {number} categoryId categoryId
         * @param {string} [q] q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByCategoryAndQueryUsingGET1(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSearchResultsByCategoryAndQueryUsingGET1(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSearchResultsByQuery
         * @param {string} q q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByQueryUsingGET1(q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSearchResultsByQueryUsingGET1(q, pageSize, page, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary modifyCatalog
         * @param {number} catalogId catalogId
         * @param {UCCatalogWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCatalogUsingPATCH1(catalogId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).modifyCatalogUsingPATCH1(catalogId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CatalogEndpointApi - factory interface
 * @export
 */
exports.CatalogEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary createCatalog
         * @param {UCCatalogWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCatalogUsingPOST1(wrapper, options) {
            return exports.CatalogEndpointApiFp(configuration).createCatalogUsingPOST1(wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteCatalogById
         * @param {number} catalogId catalogId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogByIdUsingDELETE1(catalogId, options) {
            return exports.CatalogEndpointApiFp(configuration).deleteCatalogByIdUsingDELETE1(catalogId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllCatalogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCatalogsUsingGET1(options) {
            return exports.CatalogEndpointApiFp(configuration).findAllCatalogsUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllCategories
         * @param {string} [name] name
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCategoriesUsingGET1(name, limit, offset, options) {
            return exports.CatalogEndpointApiFp(configuration).findAllCategoriesUsingGET1(name, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllProductOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProductOptionsUsingGET1(options) {
            return exports.CatalogEndpointApiFp(configuration).findAllProductOptionsUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSearchResultsByCategoryAndQuery
         * @param {number} categoryId categoryId
         * @param {string} [q] q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByCategoryAndQueryUsingGET1(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return exports.CatalogEndpointApiFp(configuration).findSearchResultsByCategoryAndQueryUsingGET1(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSearchResultsByQuery
         * @param {string} q q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByQueryUsingGET1(q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return exports.CatalogEndpointApiFp(configuration).findSearchResultsByQueryUsingGET1(q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary modifyCatalog
         * @param {number} catalogId catalogId
         * @param {UCCatalogWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCatalogUsingPATCH1(catalogId, wrapper, options) {
            return exports.CatalogEndpointApiFp(configuration).modifyCatalogUsingPATCH1(catalogId, wrapper, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CatalogEndpointApi - object-oriented interface
 * @export
 * @class CatalogEndpointApi
 * @extends {BaseAPI}
 */
class CatalogEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary createCatalog
     * @param {UCCatalogWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    createCatalogUsingPOST1(wrapper, options) {
        return exports.CatalogEndpointApiFp(this.configuration).createCatalogUsingPOST1(wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteCatalogById
     * @param {number} catalogId catalogId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    deleteCatalogByIdUsingDELETE1(catalogId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).deleteCatalogByIdUsingDELETE1(catalogId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllCatalogs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findAllCatalogsUsingGET1(options) {
        return exports.CatalogEndpointApiFp(this.configuration).findAllCatalogsUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findAllCategoriesUsingGET1(name, limit, offset, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findAllCategoriesUsingGET1(name, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllProductOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findAllProductOptionsUsingGET1(options) {
        return exports.CatalogEndpointApiFp(this.configuration).findAllProductOptionsUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByCategoryAndQueryUsingGET1(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSearchResultsByCategoryAndQueryUsingGET1(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByQueryUsingGET1(q, pageSize, page, includePromotionMessages, includePriceData, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSearchResultsByQueryUsingGET1(q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary modifyCatalog
     * @param {number} catalogId catalogId
     * @param {UCCatalogWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    modifyCatalogUsingPATCH1(catalogId, wrapper, options) {
        return exports.CatalogEndpointApiFp(this.configuration).modifyCatalogUsingPATCH1(catalogId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CatalogEndpointApi = CatalogEndpointApi;
/**
 * CategoryEndpointApi - axios parameter creator
 * @export
 */
exports.CategoryEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findActiveSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveSubCategoriesUsingGET1: (categoryId, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findActiveSubCategoriesUsingGET1.');
            }
            const localVarPath = `/catalog/category/{categoryId}/activeSubcategories`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCategoryAttributesForCategory
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryAttributesForCategoryUsingGET1: (categoryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findCategoryAttributesForCategoryUsingGET1.');
            }
            const localVarPath = `/catalog/category/{categoryId}/attributes`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET3: (searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'searchParameter' is not null or undefined
            if (searchParameter === null || searchParameter === undefined) {
                throw new base_1.RequiredError('searchParameter', 'Required parameter searchParameter was null or undefined when calling findCategoryByIdOrNameUsingGET3.');
            }
            const localVarPath = `/catalog/category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (searchParameter !== undefined) {
                localVarQueryParameter['searchParameter'] = searchParameter;
            }
            if (productLimit !== undefined) {
                localVarQueryParameter['productLimit'] = productLimit;
            }
            if (productOffset !== undefined) {
                localVarQueryParameter['productOffset'] = productOffset;
            }
            if (subcategoryLimit !== undefined) {
                localVarQueryParameter['subcategoryLimit'] = subcategoryLimit;
            }
            if (subcategoryOffset !== undefined) {
                localVarQueryParameter['subcategoryOffset'] = subcategoryOffset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET5: (searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'searchParameter' is not null or undefined
            if (searchParameter === null || searchParameter === undefined) {
                throw new base_1.RequiredError('searchParameter', 'Required parameter searchParameter was null or undefined when calling findCategoryByIdOrNameUsingGET5.');
            }
            const localVarPath = `/catalog/category/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (searchParameter !== undefined) {
                localVarQueryParameter['searchParameter'] = searchParameter;
            }
            if (productLimit !== undefined) {
                localVarQueryParameter['productLimit'] = productLimit;
            }
            if (productOffset !== undefined) {
                localVarQueryParameter['productOffset'] = productOffset;
            }
            if (subcategoryLimit !== undefined) {
                localVarQueryParameter['subcategoryLimit'] = subcategoryLimit;
            }
            if (subcategoryOffset !== undefined) {
                localVarQueryParameter['subcategoryOffset'] = subcategoryOffset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCategoryById
         * @param {number} categoryId categoryId
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdUsingGET1: (categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findCategoryByIdUsingGET1.');
            }
            const localVarPath = `/catalog/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (productLimit !== undefined) {
                localVarQueryParameter['productLimit'] = productLimit;
            }
            if (productOffset !== undefined) {
                localVarQueryParameter['productOffset'] = productOffset;
            }
            if (subcategoryLimit !== undefined) {
                localVarQueryParameter['subcategoryLimit'] = subcategoryLimit;
            }
            if (subcategoryOffset !== undefined) {
                localVarQueryParameter['subcategoryOffset'] = subcategoryOffset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findMediaForCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForCategoryUsingGET1: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling findMediaForCategoryUsingGET1.');
            }
            const localVarPath = `/catalog/category/{id}/media`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [active] active
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSubCategoriesUsingGET1: (categoryId, limit, offset, active, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findSubCategoriesUsingGET1.');
            }
            const localVarPath = `/catalog/category/{categoryId}/categories`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CategoryEndpointApi - functional programming interface
 * @export
 */
exports.CategoryEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findActiveSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveSubCategoriesUsingGET1(categoryId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findActiveSubCategoriesUsingGET1(categoryId, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCategoryAttributesForCategory
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryAttributesForCategoryUsingGET1(categoryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findCategoryAttributesForCategoryUsingGET1(categoryId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET5(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findCategoryByIdOrNameUsingGET5(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCategoryById
         * @param {number} categoryId categoryId
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdUsingGET1(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findCategoryByIdUsingGET1(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findMediaForCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForCategoryUsingGET1(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findMediaForCategoryUsingGET1(id, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [active] active
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSubCategoriesUsingGET1(categoryId, limit, offset, active, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findSubCategoriesUsingGET1(categoryId, limit, offset, active, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CategoryEndpointApi - factory interface
 * @export
 */
exports.CategoryEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findActiveSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveSubCategoriesUsingGET1(categoryId, limit, offset, options) {
            return exports.CategoryEndpointApiFp(configuration).findActiveSubCategoriesUsingGET1(categoryId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCategoryAttributesForCategory
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryAttributesForCategoryUsingGET1(categoryId, options) {
            return exports.CategoryEndpointApiFp(configuration).findCategoryAttributesForCategoryUsingGET1(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return exports.CategoryEndpointApiFp(configuration).findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET5(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return exports.CategoryEndpointApiFp(configuration).findCategoryByIdOrNameUsingGET5(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCategoryById
         * @param {number} categoryId categoryId
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdUsingGET1(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return exports.CategoryEndpointApiFp(configuration).findCategoryByIdUsingGET1(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findMediaForCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForCategoryUsingGET1(id, options) {
            return exports.CategoryEndpointApiFp(configuration).findMediaForCategoryUsingGET1(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [active] active
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSubCategoriesUsingGET1(categoryId, limit, offset, active, options) {
            return exports.CategoryEndpointApiFp(configuration).findSubCategoriesUsingGET1(categoryId, limit, offset, active, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CategoryEndpointApi - object-oriented interface
 * @export
 * @class CategoryEndpointApi
 * @extends {BaseAPI}
 */
class CategoryEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findActiveSubCategoriesUsingGET1(categoryId, limit, offset, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findActiveSubCategoriesUsingGET1(categoryId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findCategoryAttributesForCategoryUsingGET1(categoryId, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findCategoryAttributesForCategoryUsingGET1(categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findCategoryByIdOrNameUsingGET5(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findCategoryByIdOrNameUsingGET5(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findCategoryByIdUsingGET1(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findCategoryByIdUsingGET1(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findMediaForCategoryUsingGET1(id, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findMediaForCategoryUsingGET1(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findSubCategoriesUsingGET1(categoryId, limit, offset, active, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findSubCategoriesUsingGET1(categoryId, limit, offset, active, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CategoryEndpointApi = CategoryEndpointApi;
/**
 * CustomerEndpointApi - axios parameter creator
 * @export
 */
exports.CustomerEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addAddress
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddressUsingPUT1: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addAddressUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addAddressUsingPUT1.');
            }
            const localVarPath = `/customer/address`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addAttribute
         * @param {number} customerId
         * @param {CustomerAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttributeUsingPUT1: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addAttributeUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addAttributeUsingPUT1.');
            }
            const localVarPath = `/customer/attribute`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addCustomerPayment
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerPaymentUsingPOST1: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addCustomerPaymentUsingPOST1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addCustomerPaymentUsingPOST1.');
            }
            const localVarPath = `/customer/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addCustomer
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingPOST1: (wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addCustomerUsingPOST1.');
            }
            const localVarPath = `/customer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary changePassword
         * @param {ChangePasswordForm} changePasswordForm changePasswordForm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST1: (changePasswordForm, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'changePasswordForm' is not null or undefined
            if (changePasswordForm === null || changePasswordForm === undefined) {
                throw new base_1.RequiredError('changePasswordForm', 'Required parameter changePasswordForm was null or undefined when calling changePasswordUsingPOST1.');
            }
            const localVarPath = `/customer/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof changePasswordForm !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(changePasswordForm !== undefined ? changePasswordForm : {}) : (changePasswordForm || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAddressUsingGET1: (addressName, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'addressName' is not null or undefined
            if (addressName === null || addressName === undefined) {
                throw new base_1.RequiredError('addressName', 'Required parameter addressName was null or undefined when calling findAddressUsingGET1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findAddressUsingGET1.');
            }
            const localVarPath = `/customer/address`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (addressName !== undefined) {
                localVarQueryParameter['addressName'] = addressName;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllAddressesUsingGET1: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findAllAddressesUsingGET1.');
            }
            const localVarPath = `/customer/addresses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCustomerPaymentsUsingGET1: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findAllCustomerPaymentsUsingGET1.');
            }
            const localVarPath = `/customer/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCustomerByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerByEmailUsingGET1: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling findCustomerByEmailUsingGET1.');
            }
            const localVarPath = `/customer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerPaymentUsingGET1: (paymentId, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling findCustomerPaymentUsingGET1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findCustomerPaymentUsingGET1.');
            }
            const localVarPath = `/customer/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (paymentId !== undefined) {
                localVarQueryParameter['paymentId'] = paymentId;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddressUsingDELETE1: (addressName, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'addressName' is not null or undefined
            if (addressName === null || addressName === undefined) {
                throw new base_1.RequiredError('addressName', 'Required parameter addressName was null or undefined when calling removeAddressUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAddressUsingDELETE1.');
            }
            const localVarPath = `/customer/address/{addressName}`
                .replace(`{${"addressName"}}`, encodeURIComponent(String(addressName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAddressesUsingDELETE1: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllAddressesUsingDELETE1.');
            }
            const localVarPath = `/customer/addresses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllAttributes
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAttributesUsingDELETE1: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllAttributesUsingDELETE1.');
            }
            const localVarPath = `/customer/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllCustomerPaymentsUsingDELETE1: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllCustomerPaymentsUsingDELETE1.');
            }
            const localVarPath = `/customer/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAttribute
         * @param {string} attributeName attributeName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAttributeUsingDELETE1: (attributeName, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeName' is not null or undefined
            if (attributeName === null || attributeName === undefined) {
                throw new base_1.RequiredError('attributeName', 'Required parameter attributeName was null or undefined when calling removeAttributeUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAttributeUsingDELETE1.');
            }
            const localVarPath = `/customer/attribute/{attributeName}`
                .replace(`{${"attributeName"}}`, encodeURIComponent(String(attributeName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomerPaymentUsingDELETE1: (paymentId, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling removeCustomerPaymentUsingDELETE1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeCustomerPaymentUsingDELETE1.');
            }
            const localVarPath = `/customer/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateAddress
         * @param {number} addressId addressId
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressUsingPUT1: (addressId, customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'addressId' is not null or undefined
            if (addressId === null || addressId === undefined) {
                throw new base_1.RequiredError('addressId', 'Required parameter addressId was null or undefined when calling updateAddressUsingPUT1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateAddressUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateAddressUsingPUT1.');
            }
            const localVarPath = `/customer/address/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerPaymentUsingPUT1: (paymentId, customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling updateCustomerPaymentUsingPUT1.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateCustomerPaymentUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateCustomerPaymentUsingPUT1.');
            }
            const localVarPath = `/customer/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateCustomer
         * @param {number} customerId
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT1: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateCustomerUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateCustomerUsingPUT1.');
            }
            const localVarPath = `/customer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomerEndpointApi - functional programming interface
 * @export
 */
exports.CustomerEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addAddress
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddressUsingPUT1(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addAddressUsingPUT1(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addAttribute
         * @param {number} customerId
         * @param {CustomerAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttributeUsingPUT1(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addAttributeUsingPUT1(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addCustomerPayment
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerPaymentUsingPOST1(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addCustomerPaymentUsingPOST1(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addCustomer
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingPOST1(wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addCustomerUsingPOST1(wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary changePassword
         * @param {ChangePasswordForm} changePasswordForm changePasswordForm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST1(changePasswordForm, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).changePasswordUsingPOST1(changePasswordForm, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAddressUsingGET1(addressName, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findAddressUsingGET1(addressName, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllAddressesUsingGET1(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findAllAddressesUsingGET1(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCustomerPaymentsUsingGET1(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findAllCustomerPaymentsUsingGET1(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCustomerByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerByEmailUsingGET1(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findCustomerByEmailUsingGET1(email, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerPaymentUsingGET1(paymentId, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findCustomerPaymentUsingGET1(paymentId, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddressUsingDELETE1(addressName, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAddressUsingDELETE1(addressName, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAddressesUsingDELETE1(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAllAddressesUsingDELETE1(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllAttributes
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAttributesUsingDELETE1(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAllAttributesUsingDELETE1(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllCustomerPaymentsUsingDELETE1(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAllCustomerPaymentsUsingDELETE1(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAttribute
         * @param {string} attributeName attributeName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAttributeUsingDELETE1(attributeName, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAttributeUsingDELETE1(attributeName, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomerPaymentUsingDELETE1(paymentId, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeCustomerPaymentUsingDELETE1(paymentId, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateAddress
         * @param {number} addressId addressId
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressUsingPUT1(addressId, customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).updateAddressUsingPUT1(addressId, customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerPaymentUsingPUT1(paymentId, customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).updateCustomerPaymentUsingPUT1(paymentId, customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateCustomer
         * @param {number} customerId
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT1(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).updateCustomerUsingPUT1(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CustomerEndpointApi - factory interface
 * @export
 */
exports.CustomerEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addAddress
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddressUsingPUT1(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addAddressUsingPUT1(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addAttribute
         * @param {number} customerId
         * @param {CustomerAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttributeUsingPUT1(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addAttributeUsingPUT1(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addCustomerPayment
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerPaymentUsingPOST1(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addCustomerPaymentUsingPOST1(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addCustomer
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingPOST1(wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addCustomerUsingPOST1(wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary changePassword
         * @param {ChangePasswordForm} changePasswordForm changePasswordForm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST1(changePasswordForm, options) {
            return exports.CustomerEndpointApiFp(configuration).changePasswordUsingPOST1(changePasswordForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAddressUsingGET1(addressName, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findAddressUsingGET1(addressName, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllAddressesUsingGET1(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findAllAddressesUsingGET1(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCustomerPaymentsUsingGET1(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findAllCustomerPaymentsUsingGET1(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCustomerByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerByEmailUsingGET1(email, options) {
            return exports.CustomerEndpointApiFp(configuration).findCustomerByEmailUsingGET1(email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerPaymentUsingGET1(paymentId, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findCustomerPaymentUsingGET1(paymentId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddressUsingDELETE1(addressName, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAddressUsingDELETE1(addressName, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAddressesUsingDELETE1(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAllAddressesUsingDELETE1(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllAttributes
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAttributesUsingDELETE1(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAllAttributesUsingDELETE1(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllCustomerPaymentsUsingDELETE1(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAllCustomerPaymentsUsingDELETE1(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAttribute
         * @param {string} attributeName attributeName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAttributeUsingDELETE1(attributeName, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAttributeUsingDELETE1(attributeName, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomerPaymentUsingDELETE1(paymentId, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeCustomerPaymentUsingDELETE1(paymentId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateAddress
         * @param {number} addressId addressId
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressUsingPUT1(addressId, customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).updateAddressUsingPUT1(addressId, customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerPaymentUsingPUT1(paymentId, customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).updateCustomerPaymentUsingPUT1(paymentId, customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateCustomer
         * @param {number} customerId
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT1(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).updateCustomerUsingPUT1(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CustomerEndpointApi - object-oriented interface
 * @export
 * @class CustomerEndpointApi
 * @extends {BaseAPI}
 */
class CustomerEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAddressUsingPUT1(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addAddressUsingPUT1(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAttributeUsingPUT1(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addAttributeUsingPUT1(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerPaymentUsingPOST1(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addCustomerPaymentUsingPOST1(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerUsingPOST1(wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addCustomerUsingPOST1(wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    changePasswordUsingPOST1(changePasswordForm, options) {
        return exports.CustomerEndpointApiFp(this.configuration).changePasswordUsingPOST1(changePasswordForm, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAddressUsingGET1(addressName, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findAddressUsingGET1(addressName, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllAddressesUsingGET1(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findAllAddressesUsingGET1(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllCustomerPaymentsUsingGET1(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findAllCustomerPaymentsUsingGET1(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerByEmailUsingGET1(email, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findCustomerByEmailUsingGET1(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerPaymentUsingGET1(paymentId, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findCustomerPaymentUsingGET1(paymentId, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAddressUsingDELETE1(addressName, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAddressUsingDELETE1(addressName, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAddressesUsingDELETE1(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAllAddressesUsingDELETE1(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAttributesUsingDELETE1(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAllAttributesUsingDELETE1(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllCustomerPaymentsUsingDELETE1(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAllCustomerPaymentsUsingDELETE1(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAttributeUsingDELETE1(attributeName, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAttributeUsingDELETE1(attributeName, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeCustomerPaymentUsingDELETE1(paymentId, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeCustomerPaymentUsingDELETE1(paymentId, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateAddressUsingPUT1(addressId, customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).updateAddressUsingPUT1(addressId, customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerPaymentUsingPUT1(paymentId, customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).updateCustomerPaymentUsingPUT1(paymentId, customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerUsingPUT1(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).updateCustomerUsingPUT1(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CustomerEndpointApi = CustomerEndpointApi;
/**
 * FulfillmentEndpointApi - axios parameter creator
 * @export
 */
exports.FulfillmentEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addFulfillmentGroupToOrder
         * @param {number} cartId cartId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentGroupToOrderUsingPOST1: (cartId, wrapper, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addFulfillmentGroupToOrderUsingPOST1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addFulfillmentGroupToOrderUsingPOST1.');
            }
            const localVarPath = `/fulfillment/{cartId}/group`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addFulfillmentOptionToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} fulfillmentOptionId fulfillmentOptionId
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentOptionToFulfillmentGroupUsingPUT1: (fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling addFulfillmentOptionToFulfillmentGroupUsingPUT1.');
            }
            // verify required parameter 'fulfillmentOptionId' is not null or undefined
            if (fulfillmentOptionId === null || fulfillmentOptionId === undefined) {
                throw new base_1.RequiredError('fulfillmentOptionId', 'Required parameter fulfillmentOptionId was null or undefined when calling addFulfillmentOptionToFulfillmentGroupUsingPUT1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addFulfillmentOptionToFulfillmentGroupUsingPUT1.');
            }
            const localVarPath = `/fulfillment/{cartId}/group/{fulfillmentGroupId}/option/{fulfillmentOptionId}`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"fulfillmentOptionId"}}`, encodeURIComponent(String(fulfillmentOptionId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addItemToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {FulfillmentGroupItemWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToFulfillmentGroupUsingPOST1: (fulfillmentGroupId, cartId, wrapper, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling addItemToFulfillmentGroupUsingPOST1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addItemToFulfillmentGroupUsingPOST1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addItemToFulfillmentGroupUsingPOST1.');
            }
            const localVarPath = `/fulfillment/{cartId}/group/{fulfillmentGroupId}/item`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllInventoryForLocation
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllInventoryForLocationUsingGET1: (locationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling findAllInventoryForLocationUsingGET1.');
            }
            const localVarPath = `/fulfillment/location/{locationId}/inventory`
                .replace(`{${"locationId"}}`, encodeURIComponent(String(locationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllPhysicalLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPhysicalLocationsUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/fulfillment/location/physical`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllPickupLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPickupLocationsUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/fulfillment/location/pickup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllShippingLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllShippingLocationsUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/fulfillment/location/ship`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findDefaultFulfillmentLocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultFulfillmentLocationUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/fulfillment/location/default`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findFulfillmentGroupsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentGroupsForOrderUsingGET1: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling findFulfillmentGroupsForOrderUsingGET1.');
            }
            const localVarPath = `/fulfillment/{cartId}/groups`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findFulfillmentOptions
         * @param {string} fulfillmentType fulfillmentType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentOptionsUsingGET1: (fulfillmentType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentType' is not null or undefined
            if (fulfillmentType === null || fulfillmentType === undefined) {
                throw new base_1.RequiredError('fulfillmentType', 'Required parameter fulfillmentType was null or undefined when calling findFulfillmentOptionsUsingGET1.');
            }
            const localVarPath = `/fulfillment/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (fulfillmentType !== undefined) {
                localVarQueryParameter['fulfillmentType'] = fulfillmentType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findLocationById
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLocationByIdUsingGET1: (locationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling findLocationByIdUsingGET1.');
            }
            const localVarPath = `/fulfillment/location/{locationId}`
                .replace(`{${"locationId"}}`, encodeURIComponent(String(locationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingGET1: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingGET1.');
            }
            const localVarPath = `/fulfillment/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllFulfillmentGroupsFromOrder
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFulfillmentGroupsFromOrderUsingDELETE1: (cartId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeAllFulfillmentGroupsFromOrderUsingDELETE1.');
            }
            const localVarPath = `/fulfillment/{cartId}/groups`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeFulfillmentGroupFromOrder
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFulfillmentGroupFromOrderUsingDELETE1: (fulfillmentGroupId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling removeFulfillmentGroupFromOrderUsingDELETE1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeFulfillmentGroupFromOrderUsingDELETE1.');
            }
            const localVarPath = `/fulfillment/{cartId}/group/{fulfillmentGroupId}`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeOrderItemFromFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrderItemFromFulfillmentGroupUsingDELETE1: (fulfillmentGroupId, itemId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling removeOrderItemFromFulfillmentGroupUsingDELETE1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeOrderItemFromFulfillmentGroupUsingDELETE1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeOrderItemFromFulfillmentGroupUsingDELETE1.');
            }
            const localVarPath = `/fulfillment/{cartId}/group/{fulfillmentGroupId}/item/{itemId}`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {AddressWrapper} address address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT1: (fulfillmentGroupId, cartId, address, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling updateFulfillmentGroupAddressUsingPUT1.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateFulfillmentGroupAddressUsingPUT1.');
            }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new base_1.RequiredError('address', 'Required parameter address was null or undefined when calling updateFulfillmentGroupAddressUsingPUT1.');
            }
            const localVarPath = `/fulfillment/{cartId}/{fulfillmentGroupId}/address`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof address !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(address !== undefined ? address : {}) : (address || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateFulfillmentGroup
         * @param {number} cartId cartId
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupUsingPATCH1: (cartId, fulfillmentGroupId, wrapper, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateFulfillmentGroupUsingPATCH1.');
            }
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling updateFulfillmentGroupUsingPATCH1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateFulfillmentGroupUsingPATCH1.');
            }
            const localVarPath = `/fulfillment/{cartId}/group/{fulfillmentGroupId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FulfillmentEndpointApi - functional programming interface
 * @export
 */
exports.FulfillmentEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addFulfillmentGroupToOrder
         * @param {number} cartId cartId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentGroupToOrderUsingPOST1(cartId, wrapper, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).addFulfillmentGroupToOrderUsingPOST1(cartId, wrapper, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addFulfillmentOptionToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} fulfillmentOptionId fulfillmentOptionId
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addItemToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {FulfillmentGroupItemWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId, cartId, wrapper, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId, cartId, wrapper, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllInventoryForLocation
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllInventoryForLocationUsingGET1(locationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findAllInventoryForLocationUsingGET1(locationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllPhysicalLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPhysicalLocationsUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findAllPhysicalLocationsUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllPickupLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPickupLocationsUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findAllPickupLocationsUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllShippingLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllShippingLocationsUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findAllShippingLocationsUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findDefaultFulfillmentLocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultFulfillmentLocationUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findDefaultFulfillmentLocationUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findFulfillmentGroupsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentGroupsForOrderUsingGET1(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findFulfillmentGroupsForOrderUsingGET1(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findFulfillmentOptions
         * @param {string} fulfillmentType fulfillmentType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentOptionsUsingGET1(fulfillmentType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findFulfillmentOptionsUsingGET1(fulfillmentType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findLocationById
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLocationByIdUsingGET1(locationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findLocationByIdUsingGET1(locationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingGET1(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingGET1(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllFulfillmentGroupsFromOrder
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeFulfillmentGroupFromOrder
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeOrderItemFromFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId, itemId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId, itemId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {AddressWrapper} address address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId, cartId, address, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId, cartId, address, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateFulfillmentGroup
         * @param {number} cartId cartId
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupUsingPATCH1(cartId, fulfillmentGroupId, wrapper, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).updateFulfillmentGroupUsingPATCH1(cartId, fulfillmentGroupId, wrapper, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * FulfillmentEndpointApi - factory interface
 * @export
 */
exports.FulfillmentEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addFulfillmentGroupToOrder
         * @param {number} cartId cartId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentGroupToOrderUsingPOST1(cartId, wrapper, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).addFulfillmentGroupToOrderUsingPOST1(cartId, wrapper, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addFulfillmentOptionToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} fulfillmentOptionId fulfillmentOptionId
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addItemToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {FulfillmentGroupItemWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId, cartId, wrapper, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId, cartId, wrapper, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllInventoryForLocation
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllInventoryForLocationUsingGET1(locationId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).findAllInventoryForLocationUsingGET1(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllPhysicalLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPhysicalLocationsUsingGET1(options) {
            return exports.FulfillmentEndpointApiFp(configuration).findAllPhysicalLocationsUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllPickupLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPickupLocationsUsingGET1(options) {
            return exports.FulfillmentEndpointApiFp(configuration).findAllPickupLocationsUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllShippingLocations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllShippingLocationsUsingGET1(options) {
            return exports.FulfillmentEndpointApiFp(configuration).findAllShippingLocationsUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findDefaultFulfillmentLocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultFulfillmentLocationUsingGET1(options) {
            return exports.FulfillmentEndpointApiFp(configuration).findDefaultFulfillmentLocationUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findFulfillmentGroupsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentGroupsForOrderUsingGET1(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).findFulfillmentGroupsForOrderUsingGET1(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findFulfillmentOptions
         * @param {string} fulfillmentType fulfillmentType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentOptionsUsingGET1(fulfillmentType, options) {
            return exports.FulfillmentEndpointApiFp(configuration).findFulfillmentOptionsUsingGET1(fulfillmentType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findLocationById
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLocationByIdUsingGET1(locationId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).findLocationByIdUsingGET1(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingGET1(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingGET1(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllFulfillmentGroupsFromOrder
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeFulfillmentGroupFromOrder
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId, cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId, cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeOrderItemFromFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId, itemId, cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId, itemId, cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {AddressWrapper} address address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId, cartId, address, options) {
            return exports.FulfillmentEndpointApiFp(configuration).updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId, cartId, address, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateFulfillmentGroup
         * @param {number} cartId cartId
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupUsingPATCH1(cartId, fulfillmentGroupId, wrapper, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).updateFulfillmentGroupUsingPATCH1(cartId, fulfillmentGroupId, wrapper, priceOrder, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FulfillmentEndpointApi - object-oriented interface
 * @export
 * @class FulfillmentEndpointApi
 * @extends {BaseAPI}
 */
class FulfillmentEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentGroupToOrderUsingPOST1(cartId, wrapper, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).addFulfillmentGroupToOrderUsingPOST1(cartId, wrapper, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId, cartId, wrapper, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId, cartId, wrapper, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllInventoryForLocation
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllInventoryForLocationUsingGET1(locationId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findAllInventoryForLocationUsingGET1(locationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllPhysicalLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllPhysicalLocationsUsingGET1(options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findAllPhysicalLocationsUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllPickupLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllPickupLocationsUsingGET1(options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findAllPickupLocationsUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllShippingLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllShippingLocationsUsingGET1(options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findAllShippingLocationsUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findDefaultFulfillmentLocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findDefaultFulfillmentLocationUsingGET1(options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findDefaultFulfillmentLocationUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentGroupsForOrderUsingGET1(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findFulfillmentGroupsForOrderUsingGET1(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentOptionsUsingGET1(fulfillmentType, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findFulfillmentOptionsUsingGET1(fulfillmentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findLocationById
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findLocationByIdUsingGET1(locationId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findLocationByIdUsingGET1(locationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingGET1(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingGET1(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId, cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId, itemId, cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId, itemId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId, cartId, address, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId, cartId, address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupUsingPATCH1(cartId, fulfillmentGroupId, wrapper, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).updateFulfillmentGroupUsingPATCH1(cartId, fulfillmentGroupId, wrapper, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FulfillmentEndpointApi = FulfillmentEndpointApi;
/**
 * InventoryEndpointApi - axios parameter creator
 * @export
 */
exports.InventoryEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addNotification
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNotificationUsingPUT1: (skuId, locationId, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling addNotificationUsingPUT1.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling addNotificationUsingPUT1.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling addNotificationUsingPUT1.');
            }
            const localVarPath = `/inventory/notification/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (skuId !== undefined) {
                localVarQueryParameter['skuId'] = skuId;
            }
            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findInventoryForSku
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkuUsingGET1: (skuId, locationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findInventoryForSkuUsingGET1.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling findInventoryForSkuUsingGET1.');
            }
            const localVarPath = `/inventory/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findPhysicalInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPhysicalInventoryForSkuUsingGET1: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findPhysicalInventoryForSkuUsingGET1.');
            }
            const localVarPath = `/inventory/{skuId}/physical`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findPickupInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPickupInventoryForSkuUsingGET1: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findPickupInventoryForSkuUsingGET1.');
            }
            const localVarPath = `/inventory/{skuId}/pickup`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findShippableInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findShippableInventoryForSkuUsingGET1: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findShippableInventoryForSkuUsingGET1.');
            }
            const localVarPath = `/inventory/{skuId}/shippable`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getAllUnProcessedNotifications
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUnProcessedNotificationsUsingGET1: (limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/inventory/notification/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getQuantityAvailable
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityAvailableUsingGET1: (skuId, locationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling getQuantityAvailableUsingGET1.');
            }
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new base_1.RequiredError('locationId', 'Required parameter locationId was null or undefined when calling getQuantityAvailableUsingGET1.');
            }
            const localVarPath = `/inventory/{skuId}/available`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getUnProcessedNotificationsForEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnProcessedNotificationsForEmailUsingGET1: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling getUnProcessedNotificationsForEmailUsingGET1.');
            }
            const localVarPath = `/inventory/notification/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary processNotification
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNotificationUsingPOST1: (notificationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'notificationId' is not null or undefined
            if (notificationId === null || notificationId === undefined) {
                throw new base_1.RequiredError('notificationId', 'Required parameter notificationId was null or undefined when calling processNotificationUsingPOST1.');
            }
            const localVarPath = `/inventory/notification/process/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * InventoryEndpointApi - functional programming interface
 * @export
 */
exports.InventoryEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addNotification
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNotificationUsingPUT1(skuId, locationId, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).addNotificationUsingPUT1(skuId, locationId, email, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findInventoryForSku
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkuUsingGET1(skuId, locationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).findInventoryForSkuUsingGET1(skuId, locationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findPhysicalInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPhysicalInventoryForSkuUsingGET1(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).findPhysicalInventoryForSkuUsingGET1(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findPickupInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPickupInventoryForSkuUsingGET1(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).findPickupInventoryForSkuUsingGET1(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findShippableInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findShippableInventoryForSkuUsingGET1(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).findShippableInventoryForSkuUsingGET1(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getAllUnProcessedNotifications
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUnProcessedNotificationsUsingGET1(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).getAllUnProcessedNotificationsUsingGET1(limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getQuantityAvailable
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityAvailableUsingGET1(skuId, locationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).getQuantityAvailableUsingGET1(skuId, locationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getUnProcessedNotificationsForEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnProcessedNotificationsForEmailUsingGET1(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).getUnProcessedNotificationsForEmailUsingGET1(email, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary processNotification
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNotificationUsingPOST1(notificationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.InventoryEndpointApiAxiosParamCreator(configuration).processNotificationUsingPOST1(notificationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * InventoryEndpointApi - factory interface
 * @export
 */
exports.InventoryEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addNotification
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNotificationUsingPUT1(skuId, locationId, email, options) {
            return exports.InventoryEndpointApiFp(configuration).addNotificationUsingPUT1(skuId, locationId, email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findInventoryForSku
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkuUsingGET1(skuId, locationId, options) {
            return exports.InventoryEndpointApiFp(configuration).findInventoryForSkuUsingGET1(skuId, locationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findPhysicalInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPhysicalInventoryForSkuUsingGET1(skuId, options) {
            return exports.InventoryEndpointApiFp(configuration).findPhysicalInventoryForSkuUsingGET1(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findPickupInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPickupInventoryForSkuUsingGET1(skuId, options) {
            return exports.InventoryEndpointApiFp(configuration).findPickupInventoryForSkuUsingGET1(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findShippableInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findShippableInventoryForSkuUsingGET1(skuId, options) {
            return exports.InventoryEndpointApiFp(configuration).findShippableInventoryForSkuUsingGET1(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getAllUnProcessedNotifications
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUnProcessedNotificationsUsingGET1(limit, offset, options) {
            return exports.InventoryEndpointApiFp(configuration).getAllUnProcessedNotificationsUsingGET1(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getQuantityAvailable
         * @param {number} skuId skuId
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityAvailableUsingGET1(skuId, locationId, options) {
            return exports.InventoryEndpointApiFp(configuration).getQuantityAvailableUsingGET1(skuId, locationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getUnProcessedNotificationsForEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnProcessedNotificationsForEmailUsingGET1(email, options) {
            return exports.InventoryEndpointApiFp(configuration).getUnProcessedNotificationsForEmailUsingGET1(email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary processNotification
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processNotificationUsingPOST1(notificationId, options) {
            return exports.InventoryEndpointApiFp(configuration).processNotificationUsingPOST1(notificationId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * InventoryEndpointApi - object-oriented interface
 * @export
 * @class InventoryEndpointApi
 * @extends {BaseAPI}
 */
class InventoryEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addNotification
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    addNotificationUsingPUT1(skuId, locationId, email, options) {
        return exports.InventoryEndpointApiFp(this.configuration).addNotificationUsingPUT1(skuId, locationId, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findInventoryForSku
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findInventoryForSkuUsingGET1(skuId, locationId, options) {
        return exports.InventoryEndpointApiFp(this.configuration).findInventoryForSkuUsingGET1(skuId, locationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findPhysicalInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findPhysicalInventoryForSkuUsingGET1(skuId, options) {
        return exports.InventoryEndpointApiFp(this.configuration).findPhysicalInventoryForSkuUsingGET1(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findPickupInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findPickupInventoryForSkuUsingGET1(skuId, options) {
        return exports.InventoryEndpointApiFp(this.configuration).findPickupInventoryForSkuUsingGET1(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findShippableInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findShippableInventoryForSkuUsingGET1(skuId, options) {
        return exports.InventoryEndpointApiFp(this.configuration).findShippableInventoryForSkuUsingGET1(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getAllUnProcessedNotifications
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    getAllUnProcessedNotificationsUsingGET1(limit, offset, options) {
        return exports.InventoryEndpointApiFp(this.configuration).getAllUnProcessedNotificationsUsingGET1(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getQuantityAvailable
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    getQuantityAvailableUsingGET1(skuId, locationId, options) {
        return exports.InventoryEndpointApiFp(this.configuration).getQuantityAvailableUsingGET1(skuId, locationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getUnProcessedNotificationsForEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    getUnProcessedNotificationsForEmailUsingGET1(email, options) {
        return exports.InventoryEndpointApiFp(this.configuration).getUnProcessedNotificationsForEmailUsingGET1(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary processNotification
     * @param {number} notificationId notificationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    processNotificationUsingPOST1(notificationId, options) {
        return exports.InventoryEndpointApiFp(this.configuration).processNotificationUsingPOST1(notificationId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.InventoryEndpointApi = InventoryEndpointApi;
/**
 * LoginEndpointApi - axios parameter creator
 * @export
 */
exports.LoginEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This is the login method
         * @summary login
         * @param {AccountCredentials} userLogin Login Parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: (userLogin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userLogin' is not null or undefined
            if (userLogin === null || userLogin === undefined) {
                throw new base_1.RequiredError('userLogin', 'Required parameter userLogin was null or undefined when calling loginPost.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userLogin !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userLogin !== undefined ? userLogin : {}) : (userLogin || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Refresh your authentication token
         * @summary refreshAuthToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAuthTokenPost: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/refresh-token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * LoginEndpointApi - functional programming interface
 * @export
 */
exports.LoginEndpointApiFp = function (configuration) {
    return {
        /**
         * This is the login method
         * @summary login
         * @param {AccountCredentials} userLogin Login Parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(userLogin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.LoginEndpointApiAxiosParamCreator(configuration).loginPost(userLogin, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Refresh your authentication token
         * @summary refreshAuthToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAuthTokenPost(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.LoginEndpointApiAxiosParamCreator(configuration).refreshAuthTokenPost(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * LoginEndpointApi - factory interface
 * @export
 */
exports.LoginEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * This is the login method
         * @summary login
         * @param {AccountCredentials} userLogin Login Parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(userLogin, options) {
            return exports.LoginEndpointApiFp(configuration).loginPost(userLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh your authentication token
         * @summary refreshAuthToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAuthTokenPost(options) {
            return exports.LoginEndpointApiFp(configuration).refreshAuthTokenPost(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * LoginEndpointApi - object-oriented interface
 * @export
 * @class LoginEndpointApi
 * @extends {BaseAPI}
 */
class LoginEndpointApi extends base_1.BaseAPI {
    /**
     * This is the login method
     * @summary login
     * @param {AccountCredentials} userLogin Login Parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginEndpointApi
     */
    loginPost(userLogin, options) {
        return exports.LoginEndpointApiFp(this.configuration).loginPost(userLogin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refresh your authentication token
     * @summary refreshAuthToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginEndpointApi
     */
    refreshAuthTokenPost(options) {
        return exports.LoginEndpointApiFp(this.configuration).refreshAuthTokenPost(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LoginEndpointApi = LoginEndpointApi;
/**
 * MeEndpointApi - axios parameter creator
 * @export
 */
exports.MeEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addItemToCart
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {boolean} [isUpdateRequest] isUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCartUsingPOST1: (orderItemWrapper, priceOrder, isUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderItemWrapper' is not null or undefined
            if (orderItemWrapper === null || orderItemWrapper === undefined) {
                throw new base_1.RequiredError('orderItemWrapper', 'Required parameter orderItemWrapper was null or undefined when calling addItemToCartUsingPOST1.');
            }
            const localVarPath = `/me/cart/item`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (isUpdateRequest !== undefined) {
                localVarQueryParameter['isUpdateRequest'] = isUpdateRequest;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItemWrapper !== undefined ? orderItemWrapper : {}) : (orderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST3: (promoCode, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'promoCode' is not null or undefined
            if (promoCode === null || promoCode === undefined) {
                throw new base_1.RequiredError('promoCode', 'Required parameter promoCode was null or undefined when calling addOfferCodeUsingPOST3.');
            }
            const localVarPath = `/me/cart/offer/{promoCode}`
                .replace(`{${"promoCode"}}`, encodeURIComponent(String(promoCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT3: (paymentId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
            }
            const localVarPath = `/me/cart/checkout/payment/{paymentId}/transaction`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST3: (amount, currency, customerPaymentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new base_1.RequiredError('amount', 'Required parameter amount was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new base_1.RequiredError('currency', 'Required parameter currency was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
            }
            // verify required parameter 'customerPaymentId' is not null or undefined
            if (customerPaymentId === null || customerPaymentId === undefined) {
                throw new base_1.RequiredError('customerPaymentId', 'Required parameter customerPaymentId was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
            }
            const localVarPath = `/me/cart/checkout/payment/{customerPaymentId}`
                .replace(`{${"customerPaymentId"}}`, encodeURIComponent(String(customerPaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addPaymentToOrder
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST3: (wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addPaymentToOrderUsingPOST3.');
            }
            const localVarPath = `/me/cart/checkout/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/me/cart`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMeUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findPaymentsForOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/me/cart/checkout/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary performCheckout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/me/cart/checkout/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllOfferCodes
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE3: (priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/me/cart/offers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE3: (itemId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeItemFromOrderUsingDELETE3.');
            }
            const localVarPath = `/me/cart/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE3: (promoCode, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'promoCode' is not null or undefined
            if (promoCode === null || promoCode === undefined) {
                throw new base_1.RequiredError('promoCode', 'Required parameter promoCode was null or undefined when calling removeOfferCodeUsingDELETE3.');
            }
            const localVarPath = `/me/cart/offer/{promoCode}`
                .replace(`{${"promoCode"}}`, encodeURIComponent(String(promoCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE3: (paymentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling removePaymentFromOrderByIdUsingDELETE3.');
            }
            const localVarPath = `/me/cart/checkout/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT3: (itemId, quantity, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateItemQuantityUsingPUT3.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new base_1.RequiredError('quantity', 'Required parameter quantity was null or undefined when calling updateItemQuantityUsingPUT3.');
            }
            const localVarPath = `/me/cart/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * MeEndpointApi - functional programming interface
 * @export
 */
exports.MeEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addItemToCart
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {boolean} [isUpdateRequest] isUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCartUsingPOST1(orderItemWrapper, priceOrder, isUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).addItemToCartUsingPOST1(orderItemWrapper, priceOrder, isUpdateRequest, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST3(promoCode, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).addOfferCodeUsingPOST3(promoCode, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT3(paymentId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).addOrderPaymentTransactionUsingPUT3(paymentId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addPaymentToOrder
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST3(wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).addPaymentToOrderUsingPOST3(wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).findCartUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMeUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).findMeUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findPaymentsForOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).findPaymentsForOrderUsingGET3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary performCheckout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).performCheckoutUsingPOST3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllOfferCodes
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE3(priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).removeAllOfferCodesUsingDELETE3(priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE3(itemId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).removeItemFromOrderUsingDELETE3(itemId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE3(promoCode, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).removeOfferCodeUsingDELETE3(promoCode, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE3(paymentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).removePaymentFromOrderByIdUsingDELETE3(paymentId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT3(itemId, quantity, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MeEndpointApiAxiosParamCreator(configuration).updateItemQuantityUsingPUT3(itemId, quantity, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * MeEndpointApi - factory interface
 * @export
 */
exports.MeEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addItemToCart
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {boolean} [isUpdateRequest] isUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCartUsingPOST1(orderItemWrapper, priceOrder, isUpdateRequest, options) {
            return exports.MeEndpointApiFp(configuration).addItemToCartUsingPOST1(orderItemWrapper, priceOrder, isUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST3(promoCode, priceOrder, options) {
            return exports.MeEndpointApiFp(configuration).addOfferCodeUsingPOST3(promoCode, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT3(paymentId, wrapper, options) {
            return exports.MeEndpointApiFp(configuration).addOrderPaymentTransactionUsingPUT3(paymentId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, options) {
            return exports.MeEndpointApiFp(configuration).addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addPaymentToOrder
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST3(wrapper, options) {
            return exports.MeEndpointApiFp(configuration).addPaymentToOrderUsingPOST3(wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartUsingGET1(options) {
            return exports.MeEndpointApiFp(configuration).findCartUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findMe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMeUsingGET1(options) {
            return exports.MeEndpointApiFp(configuration).findMeUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findPaymentsForOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET3(options) {
            return exports.MeEndpointApiFp(configuration).findPaymentsForOrderUsingGET3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary performCheckout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST3(options) {
            return exports.MeEndpointApiFp(configuration).performCheckoutUsingPOST3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllOfferCodes
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE3(priceOrder, options) {
            return exports.MeEndpointApiFp(configuration).removeAllOfferCodesUsingDELETE3(priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE3(itemId, priceOrder, options) {
            return exports.MeEndpointApiFp(configuration).removeItemFromOrderUsingDELETE3(itemId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE3(promoCode, priceOrder, options) {
            return exports.MeEndpointApiFp(configuration).removeOfferCodeUsingDELETE3(promoCode, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE3(paymentId, options) {
            return exports.MeEndpointApiFp(configuration).removePaymentFromOrderByIdUsingDELETE3(paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT3(itemId, quantity, priceOrder, options) {
            return exports.MeEndpointApiFp(configuration).updateItemQuantityUsingPUT3(itemId, quantity, priceOrder, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * MeEndpointApi - object-oriented interface
 * @export
 * @class MeEndpointApi
 * @extends {BaseAPI}
 */
class MeEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addItemToCart
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {boolean} [isUpdateRequest] isUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    addItemToCartUsingPOST1(orderItemWrapper, priceOrder, isUpdateRequest, options) {
        return exports.MeEndpointApiFp(this.configuration).addItemToCartUsingPOST1(orderItemWrapper, priceOrder, isUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    addOfferCodeUsingPOST3(promoCode, priceOrder, options) {
        return exports.MeEndpointApiFp(this.configuration).addOfferCodeUsingPOST3(promoCode, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    addOrderPaymentTransactionUsingPUT3(paymentId, wrapper, options) {
        return exports.MeEndpointApiFp(this.configuration).addOrderPaymentTransactionUsingPUT3(paymentId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, options) {
        return exports.MeEndpointApiFp(this.configuration).addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addPaymentToOrder
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    addPaymentToOrderUsingPOST3(wrapper, options) {
        return exports.MeEndpointApiFp(this.configuration).addPaymentToOrderUsingPOST3(wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    findCartUsingGET1(options) {
        return exports.MeEndpointApiFp(this.configuration).findCartUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findMe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    findMeUsingGET1(options) {
        return exports.MeEndpointApiFp(this.configuration).findMeUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findPaymentsForOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    findPaymentsForOrderUsingGET3(options) {
        return exports.MeEndpointApiFp(this.configuration).findPaymentsForOrderUsingGET3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary performCheckout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    performCheckoutUsingPOST3(options) {
        return exports.MeEndpointApiFp(this.configuration).performCheckoutUsingPOST3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllOfferCodes
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    removeAllOfferCodesUsingDELETE3(priceOrder, options) {
        return exports.MeEndpointApiFp(this.configuration).removeAllOfferCodesUsingDELETE3(priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    removeItemFromOrderUsingDELETE3(itemId, priceOrder, options) {
        return exports.MeEndpointApiFp(this.configuration).removeItemFromOrderUsingDELETE3(itemId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    removeOfferCodeUsingDELETE3(promoCode, priceOrder, options) {
        return exports.MeEndpointApiFp(this.configuration).removeOfferCodeUsingDELETE3(promoCode, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    removePaymentFromOrderByIdUsingDELETE3(paymentId, options) {
        return exports.MeEndpointApiFp(this.configuration).removePaymentFromOrderByIdUsingDELETE3(paymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeEndpointApi
     */
    updateItemQuantityUsingPUT3(itemId, quantity, priceOrder, options) {
        return exports.MeEndpointApiFp(this.configuration).updateItemQuantityUsingPUT3(itemId, quantity, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MeEndpointApi = MeEndpointApi;
/**
 * OperationHandlerApi - axios parameter creator
 * @export
 */
exports.OperationHandlerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/actuator/health/{component}/{instance}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/actuator/health/{component}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET5: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/actuator/health`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET7: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/actuator/info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OperationHandlerApi - functional programming interface
 * @export
 */
exports.OperationHandlerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET1(body, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET3(body, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET5(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET5(body, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET7(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET7(body, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * OperationHandlerApi - factory interface
 * @export
 */
exports.OperationHandlerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(body, options) {
            return exports.OperationHandlerApiFp(configuration).handleUsingGET1(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3(body, options) {
            return exports.OperationHandlerApiFp(configuration).handleUsingGET3(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET5(body, options) {
            return exports.OperationHandlerApiFp(configuration).handleUsingGET5(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET7(body, options) {
            return exports.OperationHandlerApiFp(configuration).handleUsingGET7(body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OperationHandlerApi - object-oriented interface
 * @export
 * @class OperationHandlerApi
 * @extends {BaseAPI}
 */
class OperationHandlerApi extends base_1.BaseAPI {
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET1(body, options) {
        return exports.OperationHandlerApiFp(this.configuration).handleUsingGET1(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET3(body, options) {
        return exports.OperationHandlerApiFp(this.configuration).handleUsingGET3(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET5(body, options) {
        return exports.OperationHandlerApiFp(this.configuration).handleUsingGET5(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET7(body, options) {
        return exports.OperationHandlerApiFp(this.configuration).handleUsingGET7(body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OperationHandlerApi = OperationHandlerApi;
/**
 * OrderEndpointApi - axios parameter creator
 * @export
 */
exports.OrderEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary acknowledgeFulfillmentOrder
         * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeFulfillmentOrderUsingPATCH1: (fulfillmentOrderAcknowledgementList, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentOrderAcknowledgementList' is not null or undefined
            if (fulfillmentOrderAcknowledgementList === null || fulfillmentOrderAcknowledgementList === undefined) {
                throw new base_1.RequiredError('fulfillmentOrderAcknowledgementList', 'Required parameter fulfillmentOrderAcknowledgementList was null or undefined when calling acknowledgeFulfillmentOrderUsingPATCH1.');
            }
            const localVarPath = `/order/acknowledgeFulfillmentOrder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof fulfillmentOrderAcknowledgementList !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(fulfillmentOrderAcknowledgementList !== undefined ? fulfillmentOrderAcknowledgementList : {}) : (fulfillmentOrderAcknowledgementList || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary acknowledgeOrder
         * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrderUsingPATCH1: (orderAcknowledgementList, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderAcknowledgementList' is not null or undefined
            if (orderAcknowledgementList === null || orderAcknowledgementList === undefined) {
                throw new base_1.RequiredError('orderAcknowledgementList', 'Required parameter orderAcknowledgementList was null or undefined when calling acknowledgeOrderUsingPATCH1.');
            }
            const localVarPath = `/order/acknowledgeOrder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderAcknowledgementList !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderAcknowledgementList !== undefined ? orderAcknowledgementList : {}) : (orderAcknowledgementList || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addNote
         * @param {string} orderNumber orderNumber
         * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteUsingPOST1: (orderNumber, orderNoteWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling addNoteUsingPOST1.');
            }
            // verify required parameter 'orderNoteWrapper' is not null or undefined
            if (orderNoteWrapper === null || orderNoteWrapper === undefined) {
                throw new base_1.RequiredError('orderNoteWrapper', 'Required parameter orderNoteWrapper was null or undefined when calling addNoteUsingPOST1.');
            }
            const localVarPath = `/order/{orderNumber}/notes`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderNoteWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderNoteWrapper !== undefined ? orderNoteWrapper : {}) : (orderNoteWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary blockOrder
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockOrderUsingPOST1: (orderNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling blockOrderUsingPOST1.');
            }
            const localVarPath = `/order/{orderNumber}/block`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary cancelItems
         * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelItemsUsingPOST1: (cancelRequestWrappers, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cancelRequestWrappers' is not null or undefined
            if (cancelRequestWrappers === null || cancelRequestWrappers === undefined) {
                throw new base_1.RequiredError('cancelRequestWrappers', 'Required parameter cancelRequestWrappers was null or undefined when calling cancelItemsUsingPOST1.');
            }
            const localVarPath = `/order/cancelItems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof cancelRequestWrappers !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(cancelRequestWrappers !== undefined ? cancelRequestWrappers : {}) : (cancelRequestWrappers || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary cancelItems
         * @param {string} orderNumber orderNumber
         * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelItemsUsingPOST3: (orderNumber, cancelRequestWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling cancelItemsUsingPOST3.');
            }
            // verify required parameter 'cancelRequestWrapper' is not null or undefined
            if (cancelRequestWrapper === null || cancelRequestWrapper === undefined) {
                throw new base_1.RequiredError('cancelRequestWrapper', 'Required parameter cancelRequestWrapper was null or undefined when calling cancelItemsUsingPOST3.');
            }
            const localVarPath = `/order/{orderNumber}/cancelItems`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof cancelRequestWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(cancelRequestWrapper !== undefined ? cancelRequestWrapper : {}) : (cancelRequestWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary cancelOrder
         * @param {string} orderNumber orderNumber
         * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderUsingPOST1: (orderNumber, cancelRequestWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling cancelOrderUsingPOST1.');
            }
            // verify required parameter 'cancelRequestWrapper' is not null or undefined
            if (cancelRequestWrapper === null || cancelRequestWrapper === undefined) {
                throw new base_1.RequiredError('cancelRequestWrapper', 'Required parameter cancelRequestWrapper was null or undefined when calling cancelOrderUsingPOST1.');
            }
            const localVarPath = `/order/{orderNumber}/cancel`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof cancelRequestWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(cancelRequestWrapper !== undefined ? cancelRequestWrapper : {}) : (cancelRequestWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary cancelSingleItem
         * @param {string} orderNumber orderNumber
         * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
         * @param {number} skuId skuId
         * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSingleItemUsingPOST1: (orderNumber, fulfillmentOrderNumber, skuId, fulfillmentOrderItemWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling cancelSingleItemUsingPOST1.');
            }
            // verify required parameter 'fulfillmentOrderNumber' is not null or undefined
            if (fulfillmentOrderNumber === null || fulfillmentOrderNumber === undefined) {
                throw new base_1.RequiredError('fulfillmentOrderNumber', 'Required parameter fulfillmentOrderNumber was null or undefined when calling cancelSingleItemUsingPOST1.');
            }
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling cancelSingleItemUsingPOST1.');
            }
            // verify required parameter 'fulfillmentOrderItemWrapper' is not null or undefined
            if (fulfillmentOrderItemWrapper === null || fulfillmentOrderItemWrapper === undefined) {
                throw new base_1.RequiredError('fulfillmentOrderItemWrapper', 'Required parameter fulfillmentOrderItemWrapper was null or undefined when calling cancelSingleItemUsingPOST1.');
            }
            const localVarPath = `/order/{orderNumber}/fulfillment/{fulfillmentOrderNumber}/item/{skuId}/cancel`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)))
                .replace(`{${"fulfillmentOrderNumber"}}`, encodeURIComponent(String(fulfillmentOrderNumber)))
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof fulfillmentOrderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(fulfillmentOrderItemWrapper !== undefined ? fulfillmentOrderItemWrapper : {}) : (fulfillmentOrderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentOrders
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentOrdersUsingGET1: (orderNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling getFulfillmentOrdersUsingGET1.');
            }
            const localVarPath = `/order/{orderNumber}/fulfillmentOrders`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getNotes
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotesUsingGET1: (orderNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling getNotesUsingGET1.');
            }
            const localVarPath = `/order/{orderNumber}/notes`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary listFulfillmentOrders
         * @param {string} [token] token
         * @param {number} [maxRecords] maxRecords
         * @param {string} [status] status
         * @param {boolean} [includeBlockedOrders] includeBlockedOrders
         * @param {boolean} [acknowledged] acknowledged
         * @param {string} [beginDate] beginDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillmentOrdersUsingGET1: (token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/order/bulk/fulfillmentOrders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            if (maxRecords !== undefined) {
                localVarQueryParameter['maxRecords'] = maxRecords;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (includeBlockedOrders !== undefined) {
                localVarQueryParameter['includeBlockedOrders'] = includeBlockedOrders;
            }
            if (acknowledged !== undefined) {
                localVarQueryParameter['acknowledged'] = acknowledged;
            }
            if (beginDate !== undefined) {
                localVarQueryParameter['beginDate'] = (beginDate instanceof Date) ?
                    beginDate.toISOString() :
                    beginDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate instanceof Date) ?
                    endDate.toISOString() :
                    endDate;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary listOrders
         * @param {string} [token] token
         * @param {number} [maxRecords] maxRecords
         * @param {string} [status] status
         * @param {boolean} [includeBlockedOrders] includeBlockedOrders
         * @param {boolean} [acknowledged] acknowledged
         * @param {string} [beginDate] beginDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersUsingGET1: (token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/order/bulk/orders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            if (maxRecords !== undefined) {
                localVarQueryParameter['maxRecords'] = maxRecords;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (includeBlockedOrders !== undefined) {
                localVarQueryParameter['includeBlockedOrders'] = includeBlockedOrders;
            }
            if (acknowledged !== undefined) {
                localVarQueryParameter['acknowledged'] = acknowledged;
            }
            if (beginDate !== undefined) {
                localVarQueryParameter['beginDate'] = (beginDate instanceof Date) ?
                    beginDate.toISOString() :
                    beginDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate instanceof Date) ?
                    endDate.toISOString() :
                    endDate;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary shipItems
         * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipItemsUsingPOST1: (fulfillmentOrderWrappers, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentOrderWrappers' is not null or undefined
            if (fulfillmentOrderWrappers === null || fulfillmentOrderWrappers === undefined) {
                throw new base_1.RequiredError('fulfillmentOrderWrappers', 'Required parameter fulfillmentOrderWrappers was null or undefined when calling shipItemsUsingPOST1.');
            }
            const localVarPath = `/order/shipItems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof fulfillmentOrderWrappers !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(fulfillmentOrderWrappers !== undefined ? fulfillmentOrderWrappers : {}) : (fulfillmentOrderWrappers || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary shipItems
         * @param {string} orderNumber orderNumber
         * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipItemsUsingPOST3: (orderNumber, fulfillmentOrderWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling shipItemsUsingPOST3.');
            }
            // verify required parameter 'fulfillmentOrderWrapper' is not null or undefined
            if (fulfillmentOrderWrapper === null || fulfillmentOrderWrapper === undefined) {
                throw new base_1.RequiredError('fulfillmentOrderWrapper', 'Required parameter fulfillmentOrderWrapper was null or undefined when calling shipItemsUsingPOST3.');
            }
            const localVarPath = `/order/{orderNumber}/fulfillmentOrders`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof fulfillmentOrderWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(fulfillmentOrderWrapper !== undefined ? fulfillmentOrderWrapper : {}) : (fulfillmentOrderWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary showFulfillmentGroups
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFulfillmentGroupsUsingGET1: (orderNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling showFulfillmentGroupsUsingGET1.');
            }
            const localVarPath = `/order/{orderNumber}/fulfillment/showGroups`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary showOrderPayments
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrderPaymentsUsingGET1: (orderNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling showOrderPaymentsUsingGET1.');
            }
            const localVarPath = `/order/{orderNumber}/payment/showPayments`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {string} orderNumber orderNumber
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT3: (orderNumber, fulfillmentGroupId, fulfillmentGroupWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling updateFulfillmentGroupAddressUsingPUT3.');
            }
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling updateFulfillmentGroupAddressUsingPUT3.');
            }
            // verify required parameter 'fulfillmentGroupWrapper' is not null or undefined
            if (fulfillmentGroupWrapper === null || fulfillmentGroupWrapper === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupWrapper', 'Required parameter fulfillmentGroupWrapper was null or undefined when calling updateFulfillmentGroupAddressUsingPUT3.');
            }
            const localVarPath = `/order/{orderNumber}/fulfillment/group/{fulfillmentGroupId}`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)))
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof fulfillmentGroupWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(fulfillmentGroupWrapper !== undefined ? fulfillmentGroupWrapper : {}) : (fulfillmentGroupWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateOrderPaymentAddress
         * @param {string} orderNumber orderNumber
         * @param {number} paymentId paymentId
         * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderPaymentAddressUsingPUT1: (orderNumber, paymentId, orderPaymentWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderNumber' is not null or undefined
            if (orderNumber === null || orderNumber === undefined) {
                throw new base_1.RequiredError('orderNumber', 'Required parameter orderNumber was null or undefined when calling updateOrderPaymentAddressUsingPUT1.');
            }
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling updateOrderPaymentAddressUsingPUT1.');
            }
            // verify required parameter 'orderPaymentWrapper' is not null or undefined
            if (orderPaymentWrapper === null || orderPaymentWrapper === undefined) {
                throw new base_1.RequiredError('orderPaymentWrapper', 'Required parameter orderPaymentWrapper was null or undefined when calling updateOrderPaymentAddressUsingPUT1.');
            }
            const localVarPath = `/order/{orderNumber}/payment/{paymentId}`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)))
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderPaymentWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderPaymentWrapper !== undefined ? orderPaymentWrapper : {}) : (orderPaymentWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrderEndpointApi - functional programming interface
 * @export
 */
exports.OrderEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary acknowledgeFulfillmentOrder
         * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary acknowledgeOrder
         * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrderUsingPATCH1(orderAcknowledgementList, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).acknowledgeOrderUsingPATCH1(orderAcknowledgementList, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addNote
         * @param {string} orderNumber orderNumber
         * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteUsingPOST1(orderNumber, orderNoteWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).addNoteUsingPOST1(orderNumber, orderNoteWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary blockOrder
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockOrderUsingPOST1(orderNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).blockOrderUsingPOST1(orderNumber, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary cancelItems
         * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelItemsUsingPOST1(cancelRequestWrappers, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).cancelItemsUsingPOST1(cancelRequestWrappers, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary cancelItems
         * @param {string} orderNumber orderNumber
         * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelItemsUsingPOST3(orderNumber, cancelRequestWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).cancelItemsUsingPOST3(orderNumber, cancelRequestWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary cancelOrder
         * @param {string} orderNumber orderNumber
         * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderUsingPOST1(orderNumber, cancelRequestWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).cancelOrderUsingPOST1(orderNumber, cancelRequestWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary cancelSingleItem
         * @param {string} orderNumber orderNumber
         * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
         * @param {number} skuId skuId
         * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSingleItemUsingPOST1(orderNumber, fulfillmentOrderNumber, skuId, fulfillmentOrderItemWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).cancelSingleItemUsingPOST1(orderNumber, fulfillmentOrderNumber, skuId, fulfillmentOrderItemWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentOrders
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentOrdersUsingGET1(orderNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).getFulfillmentOrdersUsingGET1(orderNumber, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getNotes
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotesUsingGET1(orderNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).getNotesUsingGET1(orderNumber, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary listFulfillmentOrders
         * @param {string} [token] token
         * @param {number} [maxRecords] maxRecords
         * @param {string} [status] status
         * @param {boolean} [includeBlockedOrders] includeBlockedOrders
         * @param {boolean} [acknowledged] acknowledged
         * @param {string} [beginDate] beginDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillmentOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).listFulfillmentOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary listOrders
         * @param {string} [token] token
         * @param {number} [maxRecords] maxRecords
         * @param {string} [status] status
         * @param {boolean} [includeBlockedOrders] includeBlockedOrders
         * @param {boolean} [acknowledged] acknowledged
         * @param {string} [beginDate] beginDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).listOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary shipItems
         * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipItemsUsingPOST1(fulfillmentOrderWrappers, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).shipItemsUsingPOST1(fulfillmentOrderWrappers, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary shipItems
         * @param {string} orderNumber orderNumber
         * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipItemsUsingPOST3(orderNumber, fulfillmentOrderWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).shipItemsUsingPOST3(orderNumber, fulfillmentOrderWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary showFulfillmentGroups
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFulfillmentGroupsUsingGET1(orderNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).showFulfillmentGroupsUsingGET1(orderNumber, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary showOrderPayments
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrderPaymentsUsingGET1(orderNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).showOrderPaymentsUsingGET1(orderNumber, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {string} orderNumber orderNumber
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT3(orderNumber, fulfillmentGroupId, fulfillmentGroupWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).updateFulfillmentGroupAddressUsingPUT3(orderNumber, fulfillmentGroupId, fulfillmentGroupWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateOrderPaymentAddress
         * @param {string} orderNumber orderNumber
         * @param {number} paymentId paymentId
         * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderPaymentAddressUsingPUT1(orderNumber, paymentId, orderPaymentWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderEndpointApiAxiosParamCreator(configuration).updateOrderPaymentAddressUsingPUT1(orderNumber, paymentId, orderPaymentWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * OrderEndpointApi - factory interface
 * @export
 */
exports.OrderEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary acknowledgeFulfillmentOrder
         * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList, options) {
            return exports.OrderEndpointApiFp(configuration).acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary acknowledgeOrder
         * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrderUsingPATCH1(orderAcknowledgementList, options) {
            return exports.OrderEndpointApiFp(configuration).acknowledgeOrderUsingPATCH1(orderAcknowledgementList, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addNote
         * @param {string} orderNumber orderNumber
         * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteUsingPOST1(orderNumber, orderNoteWrapper, options) {
            return exports.OrderEndpointApiFp(configuration).addNoteUsingPOST1(orderNumber, orderNoteWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary blockOrder
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockOrderUsingPOST1(orderNumber, options) {
            return exports.OrderEndpointApiFp(configuration).blockOrderUsingPOST1(orderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary cancelItems
         * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelItemsUsingPOST1(cancelRequestWrappers, options) {
            return exports.OrderEndpointApiFp(configuration).cancelItemsUsingPOST1(cancelRequestWrappers, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary cancelItems
         * @param {string} orderNumber orderNumber
         * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelItemsUsingPOST3(orderNumber, cancelRequestWrapper, options) {
            return exports.OrderEndpointApiFp(configuration).cancelItemsUsingPOST3(orderNumber, cancelRequestWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary cancelOrder
         * @param {string} orderNumber orderNumber
         * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderUsingPOST1(orderNumber, cancelRequestWrapper, options) {
            return exports.OrderEndpointApiFp(configuration).cancelOrderUsingPOST1(orderNumber, cancelRequestWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary cancelSingleItem
         * @param {string} orderNumber orderNumber
         * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
         * @param {number} skuId skuId
         * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSingleItemUsingPOST1(orderNumber, fulfillmentOrderNumber, skuId, fulfillmentOrderItemWrapper, options) {
            return exports.OrderEndpointApiFp(configuration).cancelSingleItemUsingPOST1(orderNumber, fulfillmentOrderNumber, skuId, fulfillmentOrderItemWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentOrders
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentOrdersUsingGET1(orderNumber, options) {
            return exports.OrderEndpointApiFp(configuration).getFulfillmentOrdersUsingGET1(orderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getNotes
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotesUsingGET1(orderNumber, options) {
            return exports.OrderEndpointApiFp(configuration).getNotesUsingGET1(orderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary listFulfillmentOrders
         * @param {string} [token] token
         * @param {number} [maxRecords] maxRecords
         * @param {string} [status] status
         * @param {boolean} [includeBlockedOrders] includeBlockedOrders
         * @param {boolean} [acknowledged] acknowledged
         * @param {string} [beginDate] beginDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillmentOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options) {
            return exports.OrderEndpointApiFp(configuration).listFulfillmentOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary listOrders
         * @param {string} [token] token
         * @param {number} [maxRecords] maxRecords
         * @param {string} [status] status
         * @param {boolean} [includeBlockedOrders] includeBlockedOrders
         * @param {boolean} [acknowledged] acknowledged
         * @param {string} [beginDate] beginDate
         * @param {string} [endDate] endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options) {
            return exports.OrderEndpointApiFp(configuration).listOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary shipItems
         * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipItemsUsingPOST1(fulfillmentOrderWrappers, options) {
            return exports.OrderEndpointApiFp(configuration).shipItemsUsingPOST1(fulfillmentOrderWrappers, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary shipItems
         * @param {string} orderNumber orderNumber
         * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipItemsUsingPOST3(orderNumber, fulfillmentOrderWrapper, options) {
            return exports.OrderEndpointApiFp(configuration).shipItemsUsingPOST3(orderNumber, fulfillmentOrderWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary showFulfillmentGroups
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFulfillmentGroupsUsingGET1(orderNumber, options) {
            return exports.OrderEndpointApiFp(configuration).showFulfillmentGroupsUsingGET1(orderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary showOrderPayments
         * @param {string} orderNumber orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrderPaymentsUsingGET1(orderNumber, options) {
            return exports.OrderEndpointApiFp(configuration).showOrderPaymentsUsingGET1(orderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {string} orderNumber orderNumber
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT3(orderNumber, fulfillmentGroupId, fulfillmentGroupWrapper, options) {
            return exports.OrderEndpointApiFp(configuration).updateFulfillmentGroupAddressUsingPUT3(orderNumber, fulfillmentGroupId, fulfillmentGroupWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateOrderPaymentAddress
         * @param {string} orderNumber orderNumber
         * @param {number} paymentId paymentId
         * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderPaymentAddressUsingPUT1(orderNumber, paymentId, orderPaymentWrapper, options) {
            return exports.OrderEndpointApiFp(configuration).updateOrderPaymentAddressUsingPUT1(orderNumber, paymentId, orderPaymentWrapper, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrderEndpointApi - object-oriented interface
 * @export
 * @class OrderEndpointApi
 * @extends {BaseAPI}
 */
class OrderEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary acknowledgeFulfillmentOrder
     * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList, options) {
        return exports.OrderEndpointApiFp(this.configuration).acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary acknowledgeOrder
     * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    acknowledgeOrderUsingPATCH1(orderAcknowledgementList, options) {
        return exports.OrderEndpointApiFp(this.configuration).acknowledgeOrderUsingPATCH1(orderAcknowledgementList, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addNote
     * @param {string} orderNumber orderNumber
     * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    addNoteUsingPOST1(orderNumber, orderNoteWrapper, options) {
        return exports.OrderEndpointApiFp(this.configuration).addNoteUsingPOST1(orderNumber, orderNoteWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary blockOrder
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    blockOrderUsingPOST1(orderNumber, options) {
        return exports.OrderEndpointApiFp(this.configuration).blockOrderUsingPOST1(orderNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary cancelItems
     * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelItemsUsingPOST1(cancelRequestWrappers, options) {
        return exports.OrderEndpointApiFp(this.configuration).cancelItemsUsingPOST1(cancelRequestWrappers, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary cancelItems
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelItemsUsingPOST3(orderNumber, cancelRequestWrapper, options) {
        return exports.OrderEndpointApiFp(this.configuration).cancelItemsUsingPOST3(orderNumber, cancelRequestWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary cancelOrder
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelOrderUsingPOST1(orderNumber, cancelRequestWrapper, options) {
        return exports.OrderEndpointApiFp(this.configuration).cancelOrderUsingPOST1(orderNumber, cancelRequestWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary cancelSingleItem
     * @param {string} orderNumber orderNumber
     * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
     * @param {number} skuId skuId
     * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelSingleItemUsingPOST1(orderNumber, fulfillmentOrderNumber, skuId, fulfillmentOrderItemWrapper, options) {
        return exports.OrderEndpointApiFp(this.configuration).cancelSingleItemUsingPOST1(orderNumber, fulfillmentOrderNumber, skuId, fulfillmentOrderItemWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentOrders
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    getFulfillmentOrdersUsingGET1(orderNumber, options) {
        return exports.OrderEndpointApiFp(this.configuration).getFulfillmentOrdersUsingGET1(orderNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getNotes
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    getNotesUsingGET1(orderNumber, options) {
        return exports.OrderEndpointApiFp(this.configuration).getNotesUsingGET1(orderNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary listFulfillmentOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    listFulfillmentOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options) {
        return exports.OrderEndpointApiFp(this.configuration).listFulfillmentOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary listOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    listOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options) {
        return exports.OrderEndpointApiFp(this.configuration).listOrdersUsingGET1(token, maxRecords, status, includeBlockedOrders, acknowledged, beginDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary shipItems
     * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    shipItemsUsingPOST1(fulfillmentOrderWrappers, options) {
        return exports.OrderEndpointApiFp(this.configuration).shipItemsUsingPOST1(fulfillmentOrderWrappers, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary shipItems
     * @param {string} orderNumber orderNumber
     * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    shipItemsUsingPOST3(orderNumber, fulfillmentOrderWrapper, options) {
        return exports.OrderEndpointApiFp(this.configuration).shipItemsUsingPOST3(orderNumber, fulfillmentOrderWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary showFulfillmentGroups
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    showFulfillmentGroupsUsingGET1(orderNumber, options) {
        return exports.OrderEndpointApiFp(this.configuration).showFulfillmentGroupsUsingGET1(orderNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary showOrderPayments
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    showOrderPaymentsUsingGET1(orderNumber, options) {
        return exports.OrderEndpointApiFp(this.configuration).showOrderPaymentsUsingGET1(orderNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {string} orderNumber orderNumber
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    updateFulfillmentGroupAddressUsingPUT3(orderNumber, fulfillmentGroupId, fulfillmentGroupWrapper, options) {
        return exports.OrderEndpointApiFp(this.configuration).updateFulfillmentGroupAddressUsingPUT3(orderNumber, fulfillmentGroupId, fulfillmentGroupWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateOrderPaymentAddress
     * @param {string} orderNumber orderNumber
     * @param {number} paymentId paymentId
     * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    updateOrderPaymentAddressUsingPUT1(orderNumber, paymentId, orderPaymentWrapper, options) {
        return exports.OrderEndpointApiFp(this.configuration).updateOrderPaymentAddressUsingPUT1(orderNumber, paymentId, orderPaymentWrapper, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrderEndpointApi = OrderEndpointApi;
/**
 * OrderHistoryEndpointApi - axios parameter creator
 * @export
 */
exports.OrderHistoryEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findAllOrdersForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOrdersForCustomerUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders/summary`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findOrderById
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrderByIdUsingGET1: (orderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling findOrderByIdUsingGET1.');
            }
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findOrdersForCustomer
         * @param {string} [orderStatus] orderStatus
         * @param {string} [orderNumber] orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrdersForCustomerUsingGET1: (orderStatus, orderNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (orderStatus !== undefined) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }
            if (orderNumber !== undefined) {
                localVarQueryParameter['orderNumber'] = orderNumber;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrderHistoryEndpointApi - functional programming interface
 * @export
 */
exports.OrderHistoryEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findAllOrdersForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOrdersForCustomerUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderHistoryEndpointApiAxiosParamCreator(configuration).findAllOrdersForCustomerUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findOrderById
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrderByIdUsingGET1(orderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderHistoryEndpointApiAxiosParamCreator(configuration).findOrderByIdUsingGET1(orderId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findOrdersForCustomer
         * @param {string} [orderStatus] orderStatus
         * @param {string} [orderNumber] orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrdersForCustomerUsingGET1(orderStatus, orderNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderHistoryEndpointApiAxiosParamCreator(configuration).findOrdersForCustomerUsingGET1(orderStatus, orderNumber, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * OrderHistoryEndpointApi - factory interface
 * @export
 */
exports.OrderHistoryEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findAllOrdersForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOrdersForCustomerUsingGET1(options) {
            return exports.OrderHistoryEndpointApiFp(configuration).findAllOrdersForCustomerUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findOrderById
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrderByIdUsingGET1(orderId, options) {
            return exports.OrderHistoryEndpointApiFp(configuration).findOrderByIdUsingGET1(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findOrdersForCustomer
         * @param {string} [orderStatus] orderStatus
         * @param {string} [orderNumber] orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrdersForCustomerUsingGET1(orderStatus, orderNumber, options) {
            return exports.OrderHistoryEndpointApiFp(configuration).findOrdersForCustomerUsingGET1(orderStatus, orderNumber, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrderHistoryEndpointApi - object-oriented interface
 * @export
 * @class OrderHistoryEndpointApi
 * @extends {BaseAPI}
 */
class OrderHistoryEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findAllOrdersForCustomerUsingGET1(options) {
        return exports.OrderHistoryEndpointApiFp(this.configuration).findAllOrdersForCustomerUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrderByIdUsingGET1(orderId, options) {
        return exports.OrderHistoryEndpointApiFp(this.configuration).findOrderByIdUsingGET1(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrdersForCustomerUsingGET1(orderStatus, orderNumber, options) {
        return exports.OrderHistoryEndpointApiFp(this.configuration).findOrdersForCustomerUsingGET1(orderStatus, orderNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrderHistoryEndpointApi = OrderHistoryEndpointApi;
/**
 * PreviewTemplateControllerApi - axios parameter creator
 * @export
 */
exports.PreviewTemplateControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingDELETE1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingHEAD1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingOPTIONS1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'OPTIONS' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPATCH1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPOST1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPUT1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PreviewTemplateControllerApi - functional programming interface
 * @export
 */
exports.PreviewTemplateControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingDELETE1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingDELETE1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingHEAD1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingHEAD1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingOPTIONS1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingOPTIONS1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPATCH1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingPATCH1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPOST1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingPOST1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPUT1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingPUT1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PreviewTemplateControllerApi - factory interface
 * @export
 */
exports.PreviewTemplateControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingDELETE1(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingDELETE1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingGET1(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingHEAD1(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingHEAD1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingOPTIONS1(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingOPTIONS1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPATCH1(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingPATCH1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPOST1(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingPOST1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPUT1(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingPUT1(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PreviewTemplateControllerApi - object-oriented interface
 * @export
 * @class PreviewTemplateControllerApi
 * @extends {BaseAPI}
 */
class PreviewTemplateControllerApi extends base_1.BaseAPI {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingDELETE1(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingDELETE1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingGET1(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingHEAD1(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingHEAD1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingOPTIONS1(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingOPTIONS1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPATCH1(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingPATCH1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPOST1(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingPOST1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPUT1(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingPUT1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PreviewTemplateControllerApi = PreviewTemplateControllerApi;
/**
 * ProductEndpointApi - axios parameter creator
 * @export
 */
exports.ProductEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addCrossSaleProductToProduct
         * @param {number} productId productId
         * @param {number} crossSaleProductId crossSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCrossSaleProductToProductUsingPUT1: (productId, crossSaleProductId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling addCrossSaleProductToProductUsingPUT1.');
            }
            // verify required parameter 'crossSaleProductId' is not null or undefined
            if (crossSaleProductId === null || crossSaleProductId === undefined) {
                throw new base_1.RequiredError('crossSaleProductId', 'Required parameter crossSaleProductId was null or undefined when calling addCrossSaleProductToProductUsingPUT1.');
            }
            const localVarPath = `/catalog/product/{productId}/crosssale/{crossSaleProductId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"crossSaleProductId"}}`, encodeURIComponent(String(crossSaleProductId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addMediaToProduct
         * @param {number} productId productId
         * @param {number} mediaId mediaId
         * @param {string} [key] key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaToProductUsingPUT1: (productId, mediaId, key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling addMediaToProductUsingPUT1.');
            }
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new base_1.RequiredError('mediaId', 'Required parameter mediaId was null or undefined when calling addMediaToProductUsingPUT1.');
            }
            const localVarPath = `/catalog/product/{productId}/media/{mediaId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addModifyProductAttributeForProduct
         * @param {number} productId productId
         * @param {SimpleProductAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModifyProductAttributeForProductUsingPUT1: (productId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling addModifyProductAttributeForProductUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addModifyProductAttributeForProductUsingPUT1.');
            }
            const localVarPath = `/catalog/product/{productId}/attributes`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addParentCategoryForProduct
         * @param {number} productId productId
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentCategoryForProductUsingPUT1: (productId, categoryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling addParentCategoryForProductUsingPUT1.');
            }
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling addParentCategoryForProductUsingPUT1.');
            }
            const localVarPath = `/catalog/product/{productId}/categories/{categoryId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addUpSaleProductToProduct
         * @param {number} productId productId
         * @param {number} upSaleProductId upSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUpSaleProductToProductUsingPUT1: (productId, upSaleProductId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling addUpSaleProductToProductUsingPUT1.');
            }
            // verify required parameter 'upSaleProductId' is not null or undefined
            if (upSaleProductId === null || upSaleProductId === undefined) {
                throw new base_1.RequiredError('upSaleProductId', 'Required parameter upSaleProductId was null or undefined when calling addUpSaleProductToProductUsingPUT1.');
            }
            const localVarPath = `/catalog/product/{productId}/upsale/{upSaleProductId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"upSaleProductId"}}`, encodeURIComponent(String(upSaleProductId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary createAndAddSkuToProduct
         * @param {number} productId productId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAddSkuToProductUsingPUT1: (productId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling createAndAddSkuToProductUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling createAndAddSkuToProductUsingPUT1.');
            }
            const localVarPath = `/catalog/product/{productId}/skus`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary createProduct
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductUsingPOST1: (wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling createProductUsingPOST1.');
            }
            const localVarPath = `/catalog/product/product`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary deleteProductById
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductByIdUsingDELETE1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling deleteProductByIdUsingDELETE1.');
            }
            const localVarPath = `/catalog/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCrossSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCrossSaleProductsByProductUsingGET3: (productId, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findCrossSaleProductsByProductUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/crosssale`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findDefaultSkuByProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultSkuByProductIdUsingGET1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findDefaultSkuByProductIdUsingGET1.');
            }
            const localVarPath = `/catalog/product/{productId}/defaultSku`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findMediasForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediasForProductUsingGET1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findMediasForProductUsingGET1.');
            }
            const localVarPath = `/catalog/product/{productId}/media`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findParentCategoriesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findParentCategoriesForProductUsingGET1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findParentCategoriesForProductUsingGET1.');
            }
            const localVarPath = `/catalog/product/{productId}/categories`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findProductAttributesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductAttributesForProductUsingGET1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findProductAttributesForProductUsingGET1.');
            }
            const localVarPath = `/catalog/product/{productId}/attributes`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findProductById
         * @param {number} id id
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductByIdUsingGET1: (id, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling findProductByIdUsingGET1.');
            }
            const localVarPath = `/catalog/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSkusForProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkusForProductIdUsingGET1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findSkusForProductIdUsingGET1.');
            }
            const localVarPath = `/catalog/product/{productId}/skus`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findUpSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUpSaleProductsByProductUsingGET3: (productId, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findUpSaleProductsByProductUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/upsale`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary modifyProductById
         * @param {number} productId productId
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProductByIdUsingPATCH1: (productId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling modifyProductByIdUsingPATCH1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling modifyProductByIdUsingPATCH1.');
            }
            const localVarPath = `/catalog/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeCrossSaleProductFromProduct
         * @param {number} productId productId
         * @param {number} crossSaleProductId crossSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCrossSaleProductFromProductUsingDELETE1: (productId, crossSaleProductId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling removeCrossSaleProductFromProductUsingDELETE1.');
            }
            // verify required parameter 'crossSaleProductId' is not null or undefined
            if (crossSaleProductId === null || crossSaleProductId === undefined) {
                throw new base_1.RequiredError('crossSaleProductId', 'Required parameter crossSaleProductId was null or undefined when calling removeCrossSaleProductFromProductUsingDELETE1.');
            }
            const localVarPath = `/catalog/product/{productId}/crosssale/{crossSaleProductId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"crossSaleProductId"}}`, encodeURIComponent(String(crossSaleProductId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeMediaFromProduct
         * @param {number} productId productId
         * @param {number} mediaId mediaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaFromProductUsingDELETE1: (productId, mediaId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling removeMediaFromProductUsingDELETE1.');
            }
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new base_1.RequiredError('mediaId', 'Required parameter mediaId was null or undefined when calling removeMediaFromProductUsingDELETE1.');
            }
            const localVarPath = `/catalog/product/{productId}/media/{mediaId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeParentCategoryForProduct
         * @param {number} productId productId
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentCategoryForProductUsingDELETE1: (productId, categoryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling removeParentCategoryForProductUsingDELETE1.');
            }
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling removeParentCategoryForProductUsingDELETE1.');
            }
            const localVarPath = `/catalog/product/{productId}/categories/{categoryId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeProductAttributeFromProduct
         * @param {number} productId productId
         * @param {number} attributeId attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProductAttributeFromProductUsingDELETE1: (productId, attributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling removeProductAttributeFromProductUsingDELETE1.');
            }
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new base_1.RequiredError('attributeId', 'Required parameter attributeId was null or undefined when calling removeProductAttributeFromProductUsingDELETE1.');
            }
            const localVarPath = `/catalog/product/{productId}/attributes/{attributeId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeSkuFromProduct
         * @param {number} productId productId
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSkuFromProductUsingDELETE1: (productId, skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling removeSkuFromProductUsingDELETE1.');
            }
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling removeSkuFromProductUsingDELETE1.');
            }
            const localVarPath = `/catalog/product/{productId}/skus/{skuId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeUpSaleProductFromProduct
         * @param {number} productId productId
         * @param {number} upSaleProductId upSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUpSaleProductFromProductUsingDELETE1: (productId, upSaleProductId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling removeUpSaleProductFromProductUsingDELETE1.');
            }
            // verify required parameter 'upSaleProductId' is not null or undefined
            if (upSaleProductId === null || upSaleProductId === undefined) {
                throw new base_1.RequiredError('upSaleProductId', 'Required parameter upSaleProductId was null or undefined when calling removeUpSaleProductFromProductUsingDELETE1.');
            }
            const localVarPath = `/catalog/product/{productId}/upsale/{upSaleProductId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"upSaleProductId"}}`, encodeURIComponent(String(upSaleProductId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary replaceProductById
         * @param {number} productId productId
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceProductByIdUsingPUT1: (productId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling replaceProductByIdUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling replaceProductByIdUsingPUT1.');
            }
            const localVarPath = `/catalog/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProductEndpointApi - functional programming interface
 * @export
 */
exports.ProductEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addCrossSaleProductToProduct
         * @param {number} productId productId
         * @param {number} crossSaleProductId crossSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCrossSaleProductToProductUsingPUT1(productId, crossSaleProductId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).addCrossSaleProductToProductUsingPUT1(productId, crossSaleProductId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addMediaToProduct
         * @param {number} productId productId
         * @param {number} mediaId mediaId
         * @param {string} [key] key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaToProductUsingPUT1(productId, mediaId, key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).addMediaToProductUsingPUT1(productId, mediaId, key, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addModifyProductAttributeForProduct
         * @param {number} productId productId
         * @param {SimpleProductAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModifyProductAttributeForProductUsingPUT1(productId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).addModifyProductAttributeForProductUsingPUT1(productId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addParentCategoryForProduct
         * @param {number} productId productId
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentCategoryForProductUsingPUT1(productId, categoryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).addParentCategoryForProductUsingPUT1(productId, categoryId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addUpSaleProductToProduct
         * @param {number} productId productId
         * @param {number} upSaleProductId upSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUpSaleProductToProductUsingPUT1(productId, upSaleProductId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).addUpSaleProductToProductUsingPUT1(productId, upSaleProductId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary createAndAddSkuToProduct
         * @param {number} productId productId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAddSkuToProductUsingPUT1(productId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).createAndAddSkuToProductUsingPUT1(productId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary createProduct
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductUsingPOST1(wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).createProductUsingPOST1(wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary deleteProductById
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductByIdUsingDELETE1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).deleteProductByIdUsingDELETE1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCrossSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findDefaultSkuByProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultSkuByProductIdUsingGET1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findDefaultSkuByProductIdUsingGET1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findMediasForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediasForProductUsingGET1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findMediasForProductUsingGET1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findParentCategoriesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findParentCategoriesForProductUsingGET1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findParentCategoriesForProductUsingGET1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findProductAttributesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductAttributesForProductUsingGET1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findProductAttributesForProductUsingGET1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findProductById
         * @param {number} id id
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductByIdUsingGET1(id, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findProductByIdUsingGET1(id, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSkusForProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkusForProductIdUsingGET1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findSkusForProductIdUsingGET1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findUpSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUpSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).findUpSaleProductsByProductUsingGET3(productId, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary modifyProductById
         * @param {number} productId productId
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProductByIdUsingPATCH1(productId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).modifyProductByIdUsingPATCH1(productId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeCrossSaleProductFromProduct
         * @param {number} productId productId
         * @param {number} crossSaleProductId crossSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCrossSaleProductFromProductUsingDELETE1(productId, crossSaleProductId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).removeCrossSaleProductFromProductUsingDELETE1(productId, crossSaleProductId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeMediaFromProduct
         * @param {number} productId productId
         * @param {number} mediaId mediaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaFromProductUsingDELETE1(productId, mediaId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).removeMediaFromProductUsingDELETE1(productId, mediaId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeParentCategoryForProduct
         * @param {number} productId productId
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentCategoryForProductUsingDELETE1(productId, categoryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).removeParentCategoryForProductUsingDELETE1(productId, categoryId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeProductAttributeFromProduct
         * @param {number} productId productId
         * @param {number} attributeId attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProductAttributeFromProductUsingDELETE1(productId, attributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).removeProductAttributeFromProductUsingDELETE1(productId, attributeId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeSkuFromProduct
         * @param {number} productId productId
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSkuFromProductUsingDELETE1(productId, skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).removeSkuFromProductUsingDELETE1(productId, skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeUpSaleProductFromProduct
         * @param {number} productId productId
         * @param {number} upSaleProductId upSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUpSaleProductFromProductUsingDELETE1(productId, upSaleProductId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).removeUpSaleProductFromProductUsingDELETE1(productId, upSaleProductId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary replaceProductById
         * @param {number} productId productId
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceProductByIdUsingPUT1(productId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductEndpointApiAxiosParamCreator(configuration).replaceProductByIdUsingPUT1(productId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ProductEndpointApi - factory interface
 * @export
 */
exports.ProductEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addCrossSaleProductToProduct
         * @param {number} productId productId
         * @param {number} crossSaleProductId crossSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCrossSaleProductToProductUsingPUT1(productId, crossSaleProductId, options) {
            return exports.ProductEndpointApiFp(configuration).addCrossSaleProductToProductUsingPUT1(productId, crossSaleProductId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addMediaToProduct
         * @param {number} productId productId
         * @param {number} mediaId mediaId
         * @param {string} [key] key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaToProductUsingPUT1(productId, mediaId, key, options) {
            return exports.ProductEndpointApiFp(configuration).addMediaToProductUsingPUT1(productId, mediaId, key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addModifyProductAttributeForProduct
         * @param {number} productId productId
         * @param {SimpleProductAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModifyProductAttributeForProductUsingPUT1(productId, wrapper, options) {
            return exports.ProductEndpointApiFp(configuration).addModifyProductAttributeForProductUsingPUT1(productId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addParentCategoryForProduct
         * @param {number} productId productId
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentCategoryForProductUsingPUT1(productId, categoryId, options) {
            return exports.ProductEndpointApiFp(configuration).addParentCategoryForProductUsingPUT1(productId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addUpSaleProductToProduct
         * @param {number} productId productId
         * @param {number} upSaleProductId upSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUpSaleProductToProductUsingPUT1(productId, upSaleProductId, options) {
            return exports.ProductEndpointApiFp(configuration).addUpSaleProductToProductUsingPUT1(productId, upSaleProductId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary createAndAddSkuToProduct
         * @param {number} productId productId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAddSkuToProductUsingPUT1(productId, wrapper, options) {
            return exports.ProductEndpointApiFp(configuration).createAndAddSkuToProductUsingPUT1(productId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary createProduct
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductUsingPOST1(wrapper, options) {
            return exports.ProductEndpointApiFp(configuration).createProductUsingPOST1(wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteProductById
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductByIdUsingDELETE1(productId, options) {
            return exports.ProductEndpointApiFp(configuration).deleteProductByIdUsingDELETE1(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCrossSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return exports.ProductEndpointApiFp(configuration).findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findDefaultSkuByProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultSkuByProductIdUsingGET1(productId, options) {
            return exports.ProductEndpointApiFp(configuration).findDefaultSkuByProductIdUsingGET1(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findMediasForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediasForProductUsingGET1(productId, options) {
            return exports.ProductEndpointApiFp(configuration).findMediasForProductUsingGET1(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findParentCategoriesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findParentCategoriesForProductUsingGET1(productId, options) {
            return exports.ProductEndpointApiFp(configuration).findParentCategoriesForProductUsingGET1(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findProductAttributesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductAttributesForProductUsingGET1(productId, options) {
            return exports.ProductEndpointApiFp(configuration).findProductAttributesForProductUsingGET1(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findProductById
         * @param {number} id id
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductByIdUsingGET1(id, includePromotionMessages, includePriceData, options) {
            return exports.ProductEndpointApiFp(configuration).findProductByIdUsingGET1(id, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSkusForProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkusForProductIdUsingGET1(productId, options) {
            return exports.ProductEndpointApiFp(configuration).findSkusForProductIdUsingGET1(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findUpSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUpSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return exports.ProductEndpointApiFp(configuration).findUpSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary modifyProductById
         * @param {number} productId productId
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProductByIdUsingPATCH1(productId, wrapper, options) {
            return exports.ProductEndpointApiFp(configuration).modifyProductByIdUsingPATCH1(productId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeCrossSaleProductFromProduct
         * @param {number} productId productId
         * @param {number} crossSaleProductId crossSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCrossSaleProductFromProductUsingDELETE1(productId, crossSaleProductId, options) {
            return exports.ProductEndpointApiFp(configuration).removeCrossSaleProductFromProductUsingDELETE1(productId, crossSaleProductId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeMediaFromProduct
         * @param {number} productId productId
         * @param {number} mediaId mediaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaFromProductUsingDELETE1(productId, mediaId, options) {
            return exports.ProductEndpointApiFp(configuration).removeMediaFromProductUsingDELETE1(productId, mediaId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeParentCategoryForProduct
         * @param {number} productId productId
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentCategoryForProductUsingDELETE1(productId, categoryId, options) {
            return exports.ProductEndpointApiFp(configuration).removeParentCategoryForProductUsingDELETE1(productId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeProductAttributeFromProduct
         * @param {number} productId productId
         * @param {number} attributeId attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProductAttributeFromProductUsingDELETE1(productId, attributeId, options) {
            return exports.ProductEndpointApiFp(configuration).removeProductAttributeFromProductUsingDELETE1(productId, attributeId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeSkuFromProduct
         * @param {number} productId productId
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSkuFromProductUsingDELETE1(productId, skuId, options) {
            return exports.ProductEndpointApiFp(configuration).removeSkuFromProductUsingDELETE1(productId, skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeUpSaleProductFromProduct
         * @param {number} productId productId
         * @param {number} upSaleProductId upSaleProductId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUpSaleProductFromProductUsingDELETE1(productId, upSaleProductId, options) {
            return exports.ProductEndpointApiFp(configuration).removeUpSaleProductFromProductUsingDELETE1(productId, upSaleProductId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary replaceProductById
         * @param {number} productId productId
         * @param {SimpleProductWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceProductByIdUsingPUT1(productId, wrapper, options) {
            return exports.ProductEndpointApiFp(configuration).replaceProductByIdUsingPUT1(productId, wrapper, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProductEndpointApi - object-oriented interface
 * @export
 * @class ProductEndpointApi
 * @extends {BaseAPI}
 */
class ProductEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addCrossSaleProductToProduct
     * @param {number} productId productId
     * @param {number} crossSaleProductId crossSaleProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    addCrossSaleProductToProductUsingPUT1(productId, crossSaleProductId, options) {
        return exports.ProductEndpointApiFp(this.configuration).addCrossSaleProductToProductUsingPUT1(productId, crossSaleProductId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addMediaToProduct
     * @param {number} productId productId
     * @param {number} mediaId mediaId
     * @param {string} [key] key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    addMediaToProductUsingPUT1(productId, mediaId, key, options) {
        return exports.ProductEndpointApiFp(this.configuration).addMediaToProductUsingPUT1(productId, mediaId, key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addModifyProductAttributeForProduct
     * @param {number} productId productId
     * @param {SimpleProductAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    addModifyProductAttributeForProductUsingPUT1(productId, wrapper, options) {
        return exports.ProductEndpointApiFp(this.configuration).addModifyProductAttributeForProductUsingPUT1(productId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addParentCategoryForProduct
     * @param {number} productId productId
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    addParentCategoryForProductUsingPUT1(productId, categoryId, options) {
        return exports.ProductEndpointApiFp(this.configuration).addParentCategoryForProductUsingPUT1(productId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addUpSaleProductToProduct
     * @param {number} productId productId
     * @param {number} upSaleProductId upSaleProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    addUpSaleProductToProductUsingPUT1(productId, upSaleProductId, options) {
        return exports.ProductEndpointApiFp(this.configuration).addUpSaleProductToProductUsingPUT1(productId, upSaleProductId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary createAndAddSkuToProduct
     * @param {number} productId productId
     * @param {SimpleSkuWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    createAndAddSkuToProductUsingPUT1(productId, wrapper, options) {
        return exports.ProductEndpointApiFp(this.configuration).createAndAddSkuToProductUsingPUT1(productId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary createProduct
     * @param {SimpleProductWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    createProductUsingPOST1(wrapper, options) {
        return exports.ProductEndpointApiFp(this.configuration).createProductUsingPOST1(wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    deleteProductByIdUsingDELETE1(productId, options) {
        return exports.ProductEndpointApiFp(this.configuration).deleteProductByIdUsingDELETE1(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options) {
        return exports.ProductEndpointApiFp(this.configuration).findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findDefaultSkuByProductIdUsingGET1(productId, options) {
        return exports.ProductEndpointApiFp(this.configuration).findDefaultSkuByProductIdUsingGET1(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findMediasForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findMediasForProductUsingGET1(productId, options) {
        return exports.ProductEndpointApiFp(this.configuration).findMediasForProductUsingGET1(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findParentCategoriesForProductUsingGET1(productId, options) {
        return exports.ProductEndpointApiFp(this.configuration).findParentCategoriesForProductUsingGET1(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findProductAttributesForProductUsingGET1(productId, options) {
        return exports.ProductEndpointApiFp(this.configuration).findProductAttributesForProductUsingGET1(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findProductByIdUsingGET1(id, includePromotionMessages, includePriceData, options) {
        return exports.ProductEndpointApiFp(this.configuration).findProductByIdUsingGET1(id, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSkusForProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findSkusForProductIdUsingGET1(productId, options) {
        return exports.ProductEndpointApiFp(this.configuration).findSkusForProductIdUsingGET1(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    findUpSaleProductsByProductUsingGET3(productId, limit, offset, options) {
        return exports.ProductEndpointApiFp(this.configuration).findUpSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary modifyProductById
     * @param {number} productId productId
     * @param {SimpleProductWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    modifyProductByIdUsingPATCH1(productId, wrapper, options) {
        return exports.ProductEndpointApiFp(this.configuration).modifyProductByIdUsingPATCH1(productId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeCrossSaleProductFromProduct
     * @param {number} productId productId
     * @param {number} crossSaleProductId crossSaleProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    removeCrossSaleProductFromProductUsingDELETE1(productId, crossSaleProductId, options) {
        return exports.ProductEndpointApiFp(this.configuration).removeCrossSaleProductFromProductUsingDELETE1(productId, crossSaleProductId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeMediaFromProduct
     * @param {number} productId productId
     * @param {number} mediaId mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    removeMediaFromProductUsingDELETE1(productId, mediaId, options) {
        return exports.ProductEndpointApiFp(this.configuration).removeMediaFromProductUsingDELETE1(productId, mediaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeParentCategoryForProduct
     * @param {number} productId productId
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    removeParentCategoryForProductUsingDELETE1(productId, categoryId, options) {
        return exports.ProductEndpointApiFp(this.configuration).removeParentCategoryForProductUsingDELETE1(productId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeProductAttributeFromProduct
     * @param {number} productId productId
     * @param {number} attributeId attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    removeProductAttributeFromProductUsingDELETE1(productId, attributeId, options) {
        return exports.ProductEndpointApiFp(this.configuration).removeProductAttributeFromProductUsingDELETE1(productId, attributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeSkuFromProduct
     * @param {number} productId productId
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    removeSkuFromProductUsingDELETE1(productId, skuId, options) {
        return exports.ProductEndpointApiFp(this.configuration).removeSkuFromProductUsingDELETE1(productId, skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeUpSaleProductFromProduct
     * @param {number} productId productId
     * @param {number} upSaleProductId upSaleProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    removeUpSaleProductFromProductUsingDELETE1(productId, upSaleProductId, options) {
        return exports.ProductEndpointApiFp(this.configuration).removeUpSaleProductFromProductUsingDELETE1(productId, upSaleProductId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary replaceProductById
     * @param {number} productId productId
     * @param {SimpleProductWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEndpointApi
     */
    replaceProductByIdUsingPUT1(productId, wrapper, options) {
        return exports.ProductEndpointApiFp(this.configuration).replaceProductByIdUsingPUT1(productId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProductEndpointApi = ProductEndpointApi;
/**
 * ProductsEndpointApi - axios parameter creator
 * @export
 */
exports.ProductsEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary deleteProductsById
         * @param {UCProductIdsWrapper} products products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsByIdUsingDELETE1: (products, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'products' is not null or undefined
            if (products === null || products === undefined) {
                throw new base_1.RequiredError('products', 'Required parameter products was null or undefined when calling deleteProductsByIdUsingDELETE1.');
            }
            const localVarPath = `/catalog/products/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof products !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(products !== undefined ? products : {}) : (products || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllProducts
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProductsUsingGET1: (limit, offset, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/catalog/products/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProductsEndpointApi - functional programming interface
 * @export
 */
exports.ProductsEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary deleteProductsById
         * @param {UCProductIdsWrapper} products products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsByIdUsingDELETE1(products, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductsEndpointApiAxiosParamCreator(configuration).deleteProductsByIdUsingDELETE1(products, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllProducts
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProductsUsingGET1(limit, offset, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ProductsEndpointApiAxiosParamCreator(configuration).findAllProductsUsingGET1(limit, offset, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ProductsEndpointApi - factory interface
 * @export
 */
exports.ProductsEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary deleteProductsById
         * @param {UCProductIdsWrapper} products products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsByIdUsingDELETE1(products, options) {
            return exports.ProductsEndpointApiFp(configuration).deleteProductsByIdUsingDELETE1(products, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllProducts
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllProductsUsingGET1(limit, offset, includePromotionMessages, includePriceData, options) {
            return exports.ProductsEndpointApiFp(configuration).findAllProductsUsingGET1(limit, offset, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProductsEndpointApi - object-oriented interface
 * @export
 * @class ProductsEndpointApi
 * @extends {BaseAPI}
 */
class ProductsEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary deleteProductsById
     * @param {UCProductIdsWrapper} products products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsEndpointApi
     */
    deleteProductsByIdUsingDELETE1(products, options) {
        return exports.ProductsEndpointApiFp(this.configuration).deleteProductsByIdUsingDELETE1(products, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllProducts
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsEndpointApi
     */
    findAllProductsUsingGET1(limit, offset, includePromotionMessages, includePriceData, options) {
        return exports.ProductsEndpointApiFp(this.configuration).findAllProductsUsingGET1(limit, offset, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProductsEndpointApi = ProductsEndpointApi;
/**
 * PromotionMessageEndpointApi - axios parameter creator
 * @export
 */
exports.PromotionMessageEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findPromotionMessagesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPromotionMessagesForProductUsingGET1: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findPromotionMessagesForProductUsingGET1.');
            }
            const localVarPath = `/promotion-messages/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PromotionMessageEndpointApi - functional programming interface
 * @export
 */
exports.PromotionMessageEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findPromotionMessagesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPromotionMessagesForProductUsingGET1(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PromotionMessageEndpointApiAxiosParamCreator(configuration).findPromotionMessagesForProductUsingGET1(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PromotionMessageEndpointApi - factory interface
 * @export
 */
exports.PromotionMessageEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findPromotionMessagesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPromotionMessagesForProductUsingGET1(productId, options) {
            return exports.PromotionMessageEndpointApiFp(configuration).findPromotionMessagesForProductUsingGET1(productId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PromotionMessageEndpointApi - object-oriented interface
 * @export
 * @class PromotionMessageEndpointApi
 * @extends {BaseAPI}
 */
class PromotionMessageEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionMessageEndpointApi
     */
    findPromotionMessagesForProductUsingGET1(productId, options) {
        return exports.PromotionMessageEndpointApiFp(this.configuration).findPromotionMessagesForProductUsingGET1(productId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PromotionMessageEndpointApi = PromotionMessageEndpointApi;
/**
 * RelatedProductsEndpointApi - axios parameter creator
 * @export
 */
exports.RelatedProductsEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary getRelatedProducts
         * @param {number} [productId] productId
         * @param {string} [productKey] productKey
         * @param {number} [categoryId] categoryId
         * @param {string} [categoryKey] categoryKey
         * @param {number} [quantity] quantity
         * @param {string} [type] type
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProductsUsingGET1: (productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/related-products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }
            if (productKey !== undefined) {
                localVarQueryParameter['productKey'] = productKey;
            }
            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }
            if (categoryKey !== undefined) {
                localVarQueryParameter['categoryKey'] = categoryKey;
            }
            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RelatedProductsEndpointApi - functional programming interface
 * @export
 */
exports.RelatedProductsEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getRelatedProducts
         * @param {number} [productId] productId
         * @param {string} [productKey] productKey
         * @param {number} [categoryId] categoryId
         * @param {string} [categoryKey] categoryKey
         * @param {number} [quantity] quantity
         * @param {string} [type] type
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProductsUsingGET1(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RelatedProductsEndpointApiAxiosParamCreator(configuration).getRelatedProductsUsingGET1(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * RelatedProductsEndpointApi - factory interface
 * @export
 */
exports.RelatedProductsEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getRelatedProducts
         * @param {number} [productId] productId
         * @param {string} [productKey] productKey
         * @param {number} [categoryId] categoryId
         * @param {string} [categoryKey] categoryKey
         * @param {number} [quantity] quantity
         * @param {string} [type] type
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProductsUsingGET1(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options) {
            return exports.RelatedProductsEndpointApiFp(configuration).getRelatedProductsUsingGET1(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RelatedProductsEndpointApi - object-oriented interface
 * @export
 * @class RelatedProductsEndpointApi
 * @extends {BaseAPI}
 */
class RelatedProductsEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatedProductsEndpointApi
     */
    getRelatedProductsUsingGET1(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options) {
        return exports.RelatedProductsEndpointApiFp(this.configuration).getRelatedProductsUsingGET1(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RelatedProductsEndpointApi = RelatedProductsEndpointApi;
/**
 * SkuEndpointApi - axios parameter creator
 * @export
 */
exports.SkuEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addInventoryForSku
         * @param {number} skuId skuId
         * @param {number} amount amount
         * @param {number} [fulfillmentLocationId] fulfillmentLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventoryForSkuUsingPUT1: (skuId, amount, fulfillmentLocationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling addInventoryForSkuUsingPUT1.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new base_1.RequiredError('amount', 'Required parameter amount was null or undefined when calling addInventoryForSkuUsingPUT1.');
            }
            const localVarPath = `/catalog/sku/inventory/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (fulfillmentLocationId !== undefined) {
                localVarQueryParameter['fulfillmentLocationId'] = fulfillmentLocationId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addMediaToSku
         * @param {number} skuId skuId
         * @param {number} mediaId mediaId
         * @param {string} [key] key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaToSkuUsingPUT1: (skuId, mediaId, key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling addMediaToSkuUsingPUT1.');
            }
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new base_1.RequiredError('mediaId', 'Required parameter mediaId was null or undefined when calling addMediaToSkuUsingPUT1.');
            }
            const localVarPath = `/catalog/sku/{skuId}/media/{mediaId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)))
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addModifySkuAttributeForSku
         * @param {number} skuId skuId
         * @param {SimpleSkuAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModifySkuAttributeForSkuUsingPUT1: (skuId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling addModifySkuAttributeForSkuUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addModifySkuAttributeForSkuUsingPUT1.');
            }
            const localVarPath = `/catalog/sku/{skuId}/attributes`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkuUsingGET3: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findInventoryForSkuUsingGET3.');
            }
            const localVarPath = `/catalog/sku/inventory/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findInventoryForSkus
         * @param {Array<number>} ids ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkusUsingGET1: (ids, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new base_1.RequiredError('ids', 'Required parameter ids was null or undefined when calling findInventoryForSkusUsingGET1.');
            }
            const localVarPath = `/catalog/sku/inventory`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findMediasForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediasForSkuUsingGET1: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findMediasForSkuUsingGET1.');
            }
            const localVarPath = `/catalog/sku/{skuId}/media`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSkuAttributesForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuAttributesForSkuUsingGET1: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findSkuAttributesForSkuUsingGET1.');
            }
            const localVarPath = `/catalog/sku/{skuId}/attributes`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSkuById
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuByIdUsingGET1: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findSkuByIdUsingGET1.');
            }
            const localVarPath = `/catalog/sku/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary modifySkuById
         * @param {number} skuId skuId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifySkuByIdUsingPATCH1: (skuId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling modifySkuByIdUsingPATCH1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling modifySkuByIdUsingPATCH1.');
            }
            const localVarPath = `/catalog/sku/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeInventoryForSku
         * @param {number} skuId skuId
         * @param {number} amount amount
         * @param {number} [fulfillmentLocationId] fulfillmentLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInventoryForSkuUsingDELETE1: (skuId, amount, fulfillmentLocationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling removeInventoryForSkuUsingDELETE1.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new base_1.RequiredError('amount', 'Required parameter amount was null or undefined when calling removeInventoryForSkuUsingDELETE1.');
            }
            const localVarPath = `/catalog/sku/inventory/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (fulfillmentLocationId !== undefined) {
                localVarQueryParameter['fulfillmentLocationId'] = fulfillmentLocationId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeMediaFromSku
         * @param {number} skuId skuId
         * @param {number} mediaId mediaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaFromSkuUsingDELETE1: (skuId, mediaId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling removeMediaFromSkuUsingDELETE1.');
            }
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new base_1.RequiredError('mediaId', 'Required parameter mediaId was null or undefined when calling removeMediaFromSkuUsingDELETE1.');
            }
            const localVarPath = `/catalog/sku/{skuId}/media/{mediaId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)))
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeSkuAttributeFromSku
         * @param {number} skuId skuId
         * @param {number} attributeId attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSkuAttributeFromSkuUsingDELETE1: (skuId, attributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling removeSkuAttributeFromSkuUsingDELETE1.');
            }
            // verify required parameter 'attributeId' is not null or undefined
            if (attributeId === null || attributeId === undefined) {
                throw new base_1.RequiredError('attributeId', 'Required parameter attributeId was null or undefined when calling removeSkuAttributeFromSkuUsingDELETE1.');
            }
            const localVarPath = `/catalog/sku/{skuId}/attributes/{attributeId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)))
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary replaceSkuById
         * @param {number} skuId skuId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceSkuByIdUsingPUT1: (skuId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling replaceSkuByIdUsingPUT1.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling replaceSkuByIdUsingPUT1.');
            }
            const localVarPath = `/catalog/sku/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SkuEndpointApi - functional programming interface
 * @export
 */
exports.SkuEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addInventoryForSku
         * @param {number} skuId skuId
         * @param {number} amount amount
         * @param {number} [fulfillmentLocationId] fulfillmentLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventoryForSkuUsingPUT1(skuId, amount, fulfillmentLocationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).addInventoryForSkuUsingPUT1(skuId, amount, fulfillmentLocationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addMediaToSku
         * @param {number} skuId skuId
         * @param {number} mediaId mediaId
         * @param {string} [key] key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaToSkuUsingPUT1(skuId, mediaId, key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).addMediaToSkuUsingPUT1(skuId, mediaId, key, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addModifySkuAttributeForSku
         * @param {number} skuId skuId
         * @param {SimpleSkuAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModifySkuAttributeForSkuUsingPUT1(skuId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).addModifySkuAttributeForSkuUsingPUT1(skuId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkuUsingGET3(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).findInventoryForSkuUsingGET3(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findInventoryForSkus
         * @param {Array<number>} ids ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkusUsingGET1(ids, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).findInventoryForSkusUsingGET1(ids, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findMediasForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediasForSkuUsingGET1(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).findMediasForSkuUsingGET1(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSkuAttributesForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuAttributesForSkuUsingGET1(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).findSkuAttributesForSkuUsingGET1(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSkuById
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuByIdUsingGET1(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).findSkuByIdUsingGET1(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary modifySkuById
         * @param {number} skuId skuId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifySkuByIdUsingPATCH1(skuId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).modifySkuByIdUsingPATCH1(skuId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeInventoryForSku
         * @param {number} skuId skuId
         * @param {number} amount amount
         * @param {number} [fulfillmentLocationId] fulfillmentLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInventoryForSkuUsingDELETE1(skuId, amount, fulfillmentLocationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).removeInventoryForSkuUsingDELETE1(skuId, amount, fulfillmentLocationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeMediaFromSku
         * @param {number} skuId skuId
         * @param {number} mediaId mediaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaFromSkuUsingDELETE1(skuId, mediaId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).removeMediaFromSkuUsingDELETE1(skuId, mediaId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeSkuAttributeFromSku
         * @param {number} skuId skuId
         * @param {number} attributeId attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSkuAttributeFromSkuUsingDELETE1(skuId, attributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).removeSkuAttributeFromSkuUsingDELETE1(skuId, attributeId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary replaceSkuById
         * @param {number} skuId skuId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceSkuByIdUsingPUT1(skuId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SkuEndpointApiAxiosParamCreator(configuration).replaceSkuByIdUsingPUT1(skuId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * SkuEndpointApi - factory interface
 * @export
 */
exports.SkuEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addInventoryForSku
         * @param {number} skuId skuId
         * @param {number} amount amount
         * @param {number} [fulfillmentLocationId] fulfillmentLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventoryForSkuUsingPUT1(skuId, amount, fulfillmentLocationId, options) {
            return exports.SkuEndpointApiFp(configuration).addInventoryForSkuUsingPUT1(skuId, amount, fulfillmentLocationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addMediaToSku
         * @param {number} skuId skuId
         * @param {number} mediaId mediaId
         * @param {string} [key] key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaToSkuUsingPUT1(skuId, mediaId, key, options) {
            return exports.SkuEndpointApiFp(configuration).addMediaToSkuUsingPUT1(skuId, mediaId, key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addModifySkuAttributeForSku
         * @param {number} skuId skuId
         * @param {SimpleSkuAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addModifySkuAttributeForSkuUsingPUT1(skuId, wrapper, options) {
            return exports.SkuEndpointApiFp(configuration).addModifySkuAttributeForSkuUsingPUT1(skuId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findInventoryForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkuUsingGET3(skuId, options) {
            return exports.SkuEndpointApiFp(configuration).findInventoryForSkuUsingGET3(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findInventoryForSkus
         * @param {Array<number>} ids ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkusUsingGET1(ids, options) {
            return exports.SkuEndpointApiFp(configuration).findInventoryForSkusUsingGET1(ids, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findMediasForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediasForSkuUsingGET1(skuId, options) {
            return exports.SkuEndpointApiFp(configuration).findMediasForSkuUsingGET1(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSkuAttributesForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuAttributesForSkuUsingGET1(skuId, options) {
            return exports.SkuEndpointApiFp(configuration).findSkuAttributesForSkuUsingGET1(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSkuById
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuByIdUsingGET1(skuId, options) {
            return exports.SkuEndpointApiFp(configuration).findSkuByIdUsingGET1(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary modifySkuById
         * @param {number} skuId skuId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifySkuByIdUsingPATCH1(skuId, wrapper, options) {
            return exports.SkuEndpointApiFp(configuration).modifySkuByIdUsingPATCH1(skuId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeInventoryForSku
         * @param {number} skuId skuId
         * @param {number} amount amount
         * @param {number} [fulfillmentLocationId] fulfillmentLocationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInventoryForSkuUsingDELETE1(skuId, amount, fulfillmentLocationId, options) {
            return exports.SkuEndpointApiFp(configuration).removeInventoryForSkuUsingDELETE1(skuId, amount, fulfillmentLocationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeMediaFromSku
         * @param {number} skuId skuId
         * @param {number} mediaId mediaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaFromSkuUsingDELETE1(skuId, mediaId, options) {
            return exports.SkuEndpointApiFp(configuration).removeMediaFromSkuUsingDELETE1(skuId, mediaId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeSkuAttributeFromSku
         * @param {number} skuId skuId
         * @param {number} attributeId attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSkuAttributeFromSkuUsingDELETE1(skuId, attributeId, options) {
            return exports.SkuEndpointApiFp(configuration).removeSkuAttributeFromSkuUsingDELETE1(skuId, attributeId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary replaceSkuById
         * @param {number} skuId skuId
         * @param {SimpleSkuWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceSkuByIdUsingPUT1(skuId, wrapper, options) {
            return exports.SkuEndpointApiFp(configuration).replaceSkuByIdUsingPUT1(skuId, wrapper, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SkuEndpointApi - object-oriented interface
 * @export
 * @class SkuEndpointApi
 * @extends {BaseAPI}
 */
class SkuEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addInventoryForSku
     * @param {number} skuId skuId
     * @param {number} amount amount
     * @param {number} [fulfillmentLocationId] fulfillmentLocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    addInventoryForSkuUsingPUT1(skuId, amount, fulfillmentLocationId, options) {
        return exports.SkuEndpointApiFp(this.configuration).addInventoryForSkuUsingPUT1(skuId, amount, fulfillmentLocationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addMediaToSku
     * @param {number} skuId skuId
     * @param {number} mediaId mediaId
     * @param {string} [key] key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    addMediaToSkuUsingPUT1(skuId, mediaId, key, options) {
        return exports.SkuEndpointApiFp(this.configuration).addMediaToSkuUsingPUT1(skuId, mediaId, key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addModifySkuAttributeForSku
     * @param {number} skuId skuId
     * @param {SimpleSkuAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    addModifySkuAttributeForSkuUsingPUT1(skuId, wrapper, options) {
        return exports.SkuEndpointApiFp(this.configuration).addModifySkuAttributeForSkuUsingPUT1(skuId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    findInventoryForSkuUsingGET3(skuId, options) {
        return exports.SkuEndpointApiFp(this.configuration).findInventoryForSkuUsingGET3(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} ids ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    findInventoryForSkusUsingGET1(ids, options) {
        return exports.SkuEndpointApiFp(this.configuration).findInventoryForSkusUsingGET1(ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findMediasForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    findMediasForSkuUsingGET1(skuId, options) {
        return exports.SkuEndpointApiFp(this.configuration).findMediasForSkuUsingGET1(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    findSkuAttributesForSkuUsingGET1(skuId, options) {
        return exports.SkuEndpointApiFp(this.configuration).findSkuAttributesForSkuUsingGET1(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    findSkuByIdUsingGET1(skuId, options) {
        return exports.SkuEndpointApiFp(this.configuration).findSkuByIdUsingGET1(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary modifySkuById
     * @param {number} skuId skuId
     * @param {SimpleSkuWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    modifySkuByIdUsingPATCH1(skuId, wrapper, options) {
        return exports.SkuEndpointApiFp(this.configuration).modifySkuByIdUsingPATCH1(skuId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeInventoryForSku
     * @param {number} skuId skuId
     * @param {number} amount amount
     * @param {number} [fulfillmentLocationId] fulfillmentLocationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    removeInventoryForSkuUsingDELETE1(skuId, amount, fulfillmentLocationId, options) {
        return exports.SkuEndpointApiFp(this.configuration).removeInventoryForSkuUsingDELETE1(skuId, amount, fulfillmentLocationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeMediaFromSku
     * @param {number} skuId skuId
     * @param {number} mediaId mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    removeMediaFromSkuUsingDELETE1(skuId, mediaId, options) {
        return exports.SkuEndpointApiFp(this.configuration).removeMediaFromSkuUsingDELETE1(skuId, mediaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeSkuAttributeFromSku
     * @param {number} skuId skuId
     * @param {number} attributeId attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    removeSkuAttributeFromSkuUsingDELETE1(skuId, attributeId, options) {
        return exports.SkuEndpointApiFp(this.configuration).removeSkuAttributeFromSkuUsingDELETE1(skuId, attributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary replaceSkuById
     * @param {number} skuId skuId
     * @param {SimpleSkuWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkuEndpointApi
     */
    replaceSkuByIdUsingPUT1(skuId, wrapper, options) {
        return exports.SkuEndpointApiFp(this.configuration).replaceSkuByIdUsingPUT1(skuId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SkuEndpointApi = SkuEndpointApi;
/**
 * WebMvcLinksHandlerApi - axios parameter creator
 * @export
 */
exports.WebMvcLinksHandlerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET1: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/actuator`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * WebMvcLinksHandlerApi - functional programming interface
 * @export
 */
exports.WebMvcLinksHandlerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WebMvcLinksHandlerApiAxiosParamCreator(configuration).linksUsingGET1(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * WebMvcLinksHandlerApi - factory interface
 * @export
 */
exports.WebMvcLinksHandlerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET1(options) {
            return exports.WebMvcLinksHandlerApiFp(configuration).linksUsingGET1(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * WebMvcLinksHandlerApi - object-oriented interface
 * @export
 * @class WebMvcLinksHandlerApi
 * @extends {BaseAPI}
 */
class WebMvcLinksHandlerApi extends base_1.BaseAPI {
    /**
     *
     * @summary links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebMvcLinksHandlerApi
     */
    linksUsingGET1(options) {
        return exports.WebMvcLinksHandlerApiFp(this.configuration).linksUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.WebMvcLinksHandlerApi = WebMvcLinksHandlerApi;
/**
 * WishlistEndpointApi - axios parameter creator
 * @export
 */
exports.WishlistEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addConfigureItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfigureItemToWishlistUsingPOST1: (wishlistName, orderItemWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling addConfigureItemToWishlistUsingPOST1.');
            }
            // verify required parameter 'orderItemWrapper' is not null or undefined
            if (orderItemWrapper === null || orderItemWrapper === undefined) {
                throw new base_1.RequiredError('orderItemWrapper', 'Required parameter orderItemWrapper was null or undefined when calling addConfigureItemToWishlistUsingPOST1.');
            }
            const localVarPath = `/wishlist/configure-item`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItemWrapper !== undefined ? orderItemWrapper : {}) : (orderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToWishlistUsingPOST1: (wishlistName, orderItemWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling addItemToWishlistUsingPOST1.');
            }
            // verify required parameter 'orderItemWrapper' is not null or undefined
            if (orderItemWrapper === null || orderItemWrapper === undefined) {
                throw new base_1.RequiredError('orderItemWrapper', 'Required parameter orderItemWrapper was null or undefined when calling addItemToWishlistUsingPOST1.');
            }
            const localVarPath = `/wishlist/item`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItemWrapper !== undefined ? orderItemWrapper : {}) : (orderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getWishlist
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWishlistUsingGET1: (wishlistName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling getWishlistUsingGET1.');
            }
            const localVarPath = `/wishlist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary moveItemToCart
         * @param {string} wishlistName wishlistName
         * @param {string} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItemToCartUsingPOST1: (wishlistName, itemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling moveItemToCartUsingPOST1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling moveItemToCartUsingPOST1.');
            }
            const localVarPath = `/wishlist/items/{itemId}/move`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary moveListToCart
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveListToCartUsingPOST1: (wishlistName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling moveListToCartUsingPOST1.');
            }
            const localVarPath = `/wishlist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeItemFromWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromWishlistUsingDELETE1: (wishlistName, itemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling removeItemFromWishlistUsingDELETE1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeItemFromWishlistUsingDELETE1.');
            }
            const localVarPath = `/wishlist/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateQuantityInWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantityInWishlistUsingPUT1: (wishlistName, itemId, quantity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling updateQuantityInWishlistUsingPUT1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateQuantityInWishlistUsingPUT1.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new base_1.RequiredError('quantity', 'Required parameter quantity was null or undefined when calling updateQuantityInWishlistUsingPUT1.');
            }
            const localVarPath = `/wishlist/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication TokenAccess required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("Authorization")
                    : yield configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * WishlistEndpointApi - functional programming interface
 * @export
 */
exports.WishlistEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addConfigureItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfigureItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).addConfigureItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).addItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getWishlist
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWishlistUsingGET1(wishlistName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).getWishlistUsingGET1(wishlistName, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary moveItemToCart
         * @param {string} wishlistName wishlistName
         * @param {string} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItemToCartUsingPOST1(wishlistName, itemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).moveItemToCartUsingPOST1(wishlistName, itemId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary moveListToCart
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveListToCartUsingPOST1(wishlistName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).moveListToCartUsingPOST1(wishlistName, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeItemFromWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromWishlistUsingDELETE1(wishlistName, itemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).removeItemFromWishlistUsingDELETE1(wishlistName, itemId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateQuantityInWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantityInWishlistUsingPUT1(wishlistName, itemId, quantity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).updateQuantityInWishlistUsingPUT1(wishlistName, itemId, quantity, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * WishlistEndpointApi - factory interface
 * @export
 */
exports.WishlistEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addConfigureItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfigureItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options) {
            return exports.WishlistEndpointApiFp(configuration).addConfigureItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options) {
            return exports.WishlistEndpointApiFp(configuration).addItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getWishlist
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWishlistUsingGET1(wishlistName, options) {
            return exports.WishlistEndpointApiFp(configuration).getWishlistUsingGET1(wishlistName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary moveItemToCart
         * @param {string} wishlistName wishlistName
         * @param {string} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItemToCartUsingPOST1(wishlistName, itemId, options) {
            return exports.WishlistEndpointApiFp(configuration).moveItemToCartUsingPOST1(wishlistName, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary moveListToCart
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveListToCartUsingPOST1(wishlistName, options) {
            return exports.WishlistEndpointApiFp(configuration).moveListToCartUsingPOST1(wishlistName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeItemFromWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromWishlistUsingDELETE1(wishlistName, itemId, options) {
            return exports.WishlistEndpointApiFp(configuration).removeItemFromWishlistUsingDELETE1(wishlistName, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateQuantityInWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantityInWishlistUsingPUT1(wishlistName, itemId, quantity, options) {
            return exports.WishlistEndpointApiFp(configuration).updateQuantityInWishlistUsingPUT1(wishlistName, itemId, quantity, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * WishlistEndpointApi - object-oriented interface
 * @export
 * @class WishlistEndpointApi
 * @extends {BaseAPI}
 */
class WishlistEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addConfigureItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options) {
        return exports.WishlistEndpointApiFp(this.configuration).addConfigureItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options) {
        return exports.WishlistEndpointApiFp(this.configuration).addItemToWishlistUsingPOST1(wishlistName, orderItemWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    getWishlistUsingGET1(wishlistName, options) {
        return exports.WishlistEndpointApiFp(this.configuration).getWishlistUsingGET1(wishlistName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveItemToCartUsingPOST1(wishlistName, itemId, options) {
        return exports.WishlistEndpointApiFp(this.configuration).moveItemToCartUsingPOST1(wishlistName, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveListToCartUsingPOST1(wishlistName, options) {
        return exports.WishlistEndpointApiFp(this.configuration).moveListToCartUsingPOST1(wishlistName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    removeItemFromWishlistUsingDELETE1(wishlistName, itemId, options) {
        return exports.WishlistEndpointApiFp(this.configuration).removeItemFromWishlistUsingDELETE1(wishlistName, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    updateQuantityInWishlistUsingPUT1(wishlistName, itemId, quantity, options) {
        return exports.WishlistEndpointApiFp(this.configuration).updateQuantityInWishlistUsingPUT1(wishlistName, itemId, quantity, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.WishlistEndpointApi = WishlistEndpointApi;

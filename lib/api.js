"use strict";
// tslint:disable
/**
 * Broadleaf Commerce API
 * The default Broadleaf Commerce APIs
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WishlistEndpointApi = exports.WishlistEndpointApiFactory = exports.WishlistEndpointApiFp = exports.WishlistEndpointApiAxiosParamCreator = exports.SwaggerDocsReloadEndpointApi = exports.SwaggerDocsReloadEndpointApiFactory = exports.SwaggerDocsReloadEndpointApiFp = exports.SwaggerDocsReloadEndpointApiAxiosParamCreator = exports.RelatedProductsEndpointApi = exports.RelatedProductsEndpointApiFactory = exports.RelatedProductsEndpointApiFp = exports.RelatedProductsEndpointApiAxiosParamCreator = exports.RatingEndpointApi = exports.RatingEndpointApiFactory = exports.RatingEndpointApiFp = exports.RatingEndpointApiAxiosParamCreator = exports.PromotionMessageEndpointApi = exports.PromotionMessageEndpointApiFactory = exports.PromotionMessageEndpointApiFp = exports.PromotionMessageEndpointApiAxiosParamCreator = exports.PreviewTemplateControllerApi = exports.PreviewTemplateControllerApiFactory = exports.PreviewTemplateControllerApiFp = exports.PreviewTemplateControllerApiAxiosParamCreator = exports.OrderHistoryEndpointApi = exports.OrderHistoryEndpointApiFactory = exports.OrderHistoryEndpointApiFp = exports.OrderHistoryEndpointApiAxiosParamCreator = exports.MetricsMvcEndpointApi = exports.MetricsMvcEndpointApiFactory = exports.MetricsMvcEndpointApiFp = exports.MetricsMvcEndpointApiAxiosParamCreator = exports.LoggersMvcEndpointApi = exports.LoggersMvcEndpointApiFactory = exports.LoggersMvcEndpointApiFp = exports.LoggersMvcEndpointApiAxiosParamCreator = exports.HeapdumpMvcEndpointApi = exports.HeapdumpMvcEndpointApiFactory = exports.HeapdumpMvcEndpointApiFp = exports.HeapdumpMvcEndpointApiAxiosParamCreator = exports.HealthMvcEndpointApi = exports.HealthMvcEndpointApiFactory = exports.HealthMvcEndpointApiFp = exports.HealthMvcEndpointApiAxiosParamCreator = exports.FulfillmentEndpointApi = exports.FulfillmentEndpointApiFactory = exports.FulfillmentEndpointApiFp = exports.FulfillmentEndpointApiAxiosParamCreator = exports.EnvironmentMvcEndpointApi = exports.EnvironmentMvcEndpointApiFactory = exports.EnvironmentMvcEndpointApiFp = exports.EnvironmentMvcEndpointApiAxiosParamCreator = exports.EndpointMvcAdapterApi = exports.EndpointMvcAdapterApiFactory = exports.EndpointMvcAdapterApiFp = exports.EndpointMvcAdapterApiAxiosParamCreator = exports.CustomerEndpointApi = exports.CustomerEndpointApiFactory = exports.CustomerEndpointApiFp = exports.CustomerEndpointApiAxiosParamCreator = exports.CustomCartEndpointApi = exports.CustomCartEndpointApiFactory = exports.CustomCartEndpointApiFp = exports.CustomCartEndpointApiAxiosParamCreator = exports.CheckoutEndpointApi = exports.CheckoutEndpointApiFactory = exports.CheckoutEndpointApiFp = exports.CheckoutEndpointApiAxiosParamCreator = exports.CategoryEndpointApi = exports.CategoryEndpointApiFactory = exports.CategoryEndpointApiFp = exports.CategoryEndpointApiAxiosParamCreator = exports.CatalogEndpointApi = exports.CatalogEndpointApiFactory = exports.CatalogEndpointApiFp = exports.CatalogEndpointApiAxiosParamCreator = exports.CartEndpointApi = exports.CartEndpointApiFactory = exports.CartEndpointApiFp = exports.CartEndpointApiAxiosParamCreator = exports.BasicErrorControllerApi = exports.BasicErrorControllerApiFactory = exports.BasicErrorControllerApiFp = exports.BasicErrorControllerApiAxiosParamCreator = exports.AuditEventsMvcEndpointApi = exports.AuditEventsMvcEndpointApiFactory = exports.AuditEventsMvcEndpointApiFp = exports.AuditEventsMvcEndpointApiAxiosParamCreator = exports.ModelAndViewStatusEnum = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var ModelAndViewStatusEnum;
(function (ModelAndViewStatusEnum) {
    ModelAndViewStatusEnum["_100"] = "100";
    ModelAndViewStatusEnum["_101"] = "101";
    ModelAndViewStatusEnum["_102"] = "102";
    ModelAndViewStatusEnum["_103"] = "103";
    ModelAndViewStatusEnum["_200"] = "200";
    ModelAndViewStatusEnum["_201"] = "201";
    ModelAndViewStatusEnum["_202"] = "202";
    ModelAndViewStatusEnum["_203"] = "203";
    ModelAndViewStatusEnum["_204"] = "204";
    ModelAndViewStatusEnum["_205"] = "205";
    ModelAndViewStatusEnum["_206"] = "206";
    ModelAndViewStatusEnum["_207"] = "207";
    ModelAndViewStatusEnum["_208"] = "208";
    ModelAndViewStatusEnum["_226"] = "226";
    ModelAndViewStatusEnum["_300"] = "300";
    ModelAndViewStatusEnum["_301"] = "301";
    ModelAndViewStatusEnum["_302"] = "302";
    ModelAndViewStatusEnum["_303"] = "303";
    ModelAndViewStatusEnum["_304"] = "304";
    ModelAndViewStatusEnum["_305"] = "305";
    ModelAndViewStatusEnum["_307"] = "307";
    ModelAndViewStatusEnum["_308"] = "308";
    ModelAndViewStatusEnum["_400"] = "400";
    ModelAndViewStatusEnum["_401"] = "401";
    ModelAndViewStatusEnum["_402"] = "402";
    ModelAndViewStatusEnum["_403"] = "403";
    ModelAndViewStatusEnum["_404"] = "404";
    ModelAndViewStatusEnum["_405"] = "405";
    ModelAndViewStatusEnum["_406"] = "406";
    ModelAndViewStatusEnum["_407"] = "407";
    ModelAndViewStatusEnum["_408"] = "408";
    ModelAndViewStatusEnum["_409"] = "409";
    ModelAndViewStatusEnum["_410"] = "410";
    ModelAndViewStatusEnum["_411"] = "411";
    ModelAndViewStatusEnum["_412"] = "412";
    ModelAndViewStatusEnum["_413"] = "413";
    ModelAndViewStatusEnum["_414"] = "414";
    ModelAndViewStatusEnum["_415"] = "415";
    ModelAndViewStatusEnum["_416"] = "416";
    ModelAndViewStatusEnum["_417"] = "417";
    ModelAndViewStatusEnum["_418"] = "418";
    ModelAndViewStatusEnum["_419"] = "419";
    ModelAndViewStatusEnum["_420"] = "420";
    ModelAndViewStatusEnum["_421"] = "421";
    ModelAndViewStatusEnum["_422"] = "422";
    ModelAndViewStatusEnum["_423"] = "423";
    ModelAndViewStatusEnum["_424"] = "424";
    ModelAndViewStatusEnum["_426"] = "426";
    ModelAndViewStatusEnum["_428"] = "428";
    ModelAndViewStatusEnum["_429"] = "429";
    ModelAndViewStatusEnum["_431"] = "431";
    ModelAndViewStatusEnum["_451"] = "451";
    ModelAndViewStatusEnum["_500"] = "500";
    ModelAndViewStatusEnum["_501"] = "501";
    ModelAndViewStatusEnum["_502"] = "502";
    ModelAndViewStatusEnum["_503"] = "503";
    ModelAndViewStatusEnum["_504"] = "504";
    ModelAndViewStatusEnum["_505"] = "505";
    ModelAndViewStatusEnum["_506"] = "506";
    ModelAndViewStatusEnum["_507"] = "507";
    ModelAndViewStatusEnum["_508"] = "508";
    ModelAndViewStatusEnum["_509"] = "509";
    ModelAndViewStatusEnum["_510"] = "510";
    ModelAndViewStatusEnum["_511"] = "511";
})(ModelAndViewStatusEnum = exports.ModelAndViewStatusEnum || (exports.ModelAndViewStatusEnum = {}));
/**
 * AuditEventsMvcEndpointApi - axios parameter creator
 * @export
 */
exports.AuditEventsMvcEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findByPrincipalAndAfterAndType
         * @param {string} [principal] principal
         * @param {string} [after] after
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByPrincipalAndAfterAndTypeUsingGET5: (principal, after, type, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/auditevents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (principal !== undefined) {
                localVarQueryParameter['principal'] = principal;
            }
            if (after !== undefined) {
                localVarQueryParameter['after'] = (after instanceof Date) ?
                    after.toISOString() :
                    after;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findByPrincipalAndAfterAndType
         * @param {string} [principal] principal
         * @param {string} [after] after
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByPrincipalAndAfterAndTypeUsingGET7: (principal, after, type, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/auditevents.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (principal !== undefined) {
                localVarQueryParameter['principal'] = principal;
            }
            if (after !== undefined) {
                localVarQueryParameter['after'] = (after instanceof Date) ?
                    after.toISOString() :
                    after;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuditEventsMvcEndpointApi - functional programming interface
 * @export
 */
exports.AuditEventsMvcEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findByPrincipalAndAfterAndType
         * @param {string} [principal] principal
         * @param {string} [after] after
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByPrincipalAndAfterAndTypeUsingGET5(principal, after, type, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuditEventsMvcEndpointApiAxiosParamCreator(configuration).findByPrincipalAndAfterAndTypeUsingGET5(principal, after, type, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findByPrincipalAndAfterAndType
         * @param {string} [principal] principal
         * @param {string} [after] after
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByPrincipalAndAfterAndTypeUsingGET7(principal, after, type, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuditEventsMvcEndpointApiAxiosParamCreator(configuration).findByPrincipalAndAfterAndTypeUsingGET7(principal, after, type, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * AuditEventsMvcEndpointApi - factory interface
 * @export
 */
exports.AuditEventsMvcEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findByPrincipalAndAfterAndType
         * @param {string} [principal] principal
         * @param {string} [after] after
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByPrincipalAndAfterAndTypeUsingGET5(principal, after, type, options) {
            return exports.AuditEventsMvcEndpointApiFp(configuration).findByPrincipalAndAfterAndTypeUsingGET5(principal, after, type, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findByPrincipalAndAfterAndType
         * @param {string} [principal] principal
         * @param {string} [after] after
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByPrincipalAndAfterAndTypeUsingGET7(principal, after, type, options) {
            return exports.AuditEventsMvcEndpointApiFp(configuration).findByPrincipalAndAfterAndTypeUsingGET7(principal, after, type, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuditEventsMvcEndpointApi - object-oriented interface
 * @export
 * @class AuditEventsMvcEndpointApi
 * @extends {BaseAPI}
 */
class AuditEventsMvcEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditEventsMvcEndpointApi
     */
    findByPrincipalAndAfterAndTypeUsingGET5(principal, after, type, options) {
        return exports.AuditEventsMvcEndpointApiFp(this.configuration).findByPrincipalAndAfterAndTypeUsingGET5(principal, after, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditEventsMvcEndpointApi
     */
    findByPrincipalAndAfterAndTypeUsingGET7(principal, after, type, options) {
        return exports.AuditEventsMvcEndpointApiFp(this.configuration).findByPrincipalAndAfterAndTypeUsingGET7(principal, after, type, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuditEventsMvcEndpointApi = AuditEventsMvcEndpointApi;
/**
 * BasicErrorControllerApi - axios parameter creator
 * @export
 */
exports.BasicErrorControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'OPTIONS' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
exports.BasicErrorControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorHtmlUsingDELETE3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorHtmlUsingGET3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorHtmlUsingHEAD3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorHtmlUsingOPTIONS3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorHtmlUsingPATCH3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorHtmlUsingPOST3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.BasicErrorControllerApiAxiosParamCreator(configuration).errorHtmlUsingPUT3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
exports.BasicErrorControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE3(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorHtmlUsingDELETE3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET3(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorHtmlUsingGET3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD3(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorHtmlUsingHEAD3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS3(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorHtmlUsingOPTIONS3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH3(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorHtmlUsingPATCH3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST3(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorHtmlUsingPOST3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT3(options) {
            return exports.BasicErrorControllerApiFp(configuration).errorHtmlUsingPUT3(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
class BasicErrorControllerApi extends base_1.BaseAPI {
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingDELETE3(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorHtmlUsingDELETE3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingGET3(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorHtmlUsingGET3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingHEAD3(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorHtmlUsingHEAD3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingOPTIONS3(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorHtmlUsingOPTIONS3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingPATCH3(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPATCH3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingPOST3(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPOST3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingPUT3(options) {
        return exports.BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPUT3(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BasicErrorControllerApi = BasicErrorControllerApi;
/**
 * CartEndpointApi - axios parameter creator
 * @export
 */
exports.CartEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addItemToOrder
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToOrderUsingPOST3: (cartId, customerId, orderItemWrapper, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addItemToOrderUsingPOST3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addItemToOrderUsingPOST3.');
            }
            // verify required parameter 'orderItemWrapper' is not null or undefined
            if (orderItemWrapper === null || orderItemWrapper === undefined) {
                throw new base_1.RequiredError('orderItemWrapper', 'Required parameter orderItemWrapper was null or undefined when calling addItemToOrderUsingPOST3.');
            }
            const localVarPath = `/cart/{cartId}/item`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItemWrapper !== undefined ? orderItemWrapper : {}) : (orderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST3: (promoCode, cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'promoCode' is not null or undefined
            if (promoCode === null || promoCode === undefined) {
                throw new base_1.RequiredError('promoCode', 'Required parameter promoCode was null or undefined when calling addOfferCodeUsingPOST3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addOfferCodeUsingPOST3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addOfferCodeUsingPOST3.');
            }
            const localVarPath = `/cart/{cartId}/offer/{promoCode}`
                .replace(`{${"promoCode"}}`, encodeURIComponent(String(promoCode)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary createNewCartForCustomer
         * @param {number} [customerId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCartForCustomerUsingPOST3: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/cart`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary deleteOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderAttributesUsingDELETE3: (cartId, customerId, requestParams, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling deleteOrderAttributesUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling deleteOrderAttributesUsingDELETE3.');
            }
            // verify required parameter 'requestParams' is not null or undefined
            if (requestParams === null || requestParams === undefined) {
                throw new base_1.RequiredError('requestParams', 'Required parameter requestParams was null or undefined when calling deleteOrderAttributesUsingDELETE3.');
            }
            const localVarPath = `/cart/{cartId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary deleteProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductOptionsUsingDELETE3: (cartId, itemId, customerId, priceOrder, requestParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling deleteProductOptionsUsingDELETE3.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling deleteProductOptionsUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling deleteProductOptionsUsingDELETE3.');
            }
            const localVarPath = `/cart/{cartId}/item/{itemId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCartById
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartByIdUsingGET3: (cartId, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling findCartByIdUsingGET3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findCartByIdUsingGET3.');
            }
            const localVarPath = `/cart/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllOfferCodes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE3: (cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeAllOfferCodesUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllOfferCodesUsingDELETE3.');
            }
            const localVarPath = `/cart/{cartId}/offers`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE3: (itemId, cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeItemFromOrderUsingDELETE3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeItemFromOrderUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeItemFromOrderUsingDELETE3.');
            }
            const localVarPath = `/cart/{cartId}/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE3: (promoCode, cartId, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'promoCode' is not null or undefined
            if (promoCode === null || promoCode === undefined) {
                throw new base_1.RequiredError('promoCode', 'Required parameter promoCode was null or undefined when calling removeOfferCodeUsingDELETE3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeOfferCodeUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeOfferCodeUsingDELETE3.');
            }
            const localVarPath = `/cart/{cartId}/offer/{promoCode}`
                .replace(`{${"promoCode"}}`, encodeURIComponent(String(promoCode)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} quantity quantity
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT3: (itemId, cartId, quantity, customerId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateItemQuantityUsingPUT3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateItemQuantityUsingPUT3.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new base_1.RequiredError('quantity', 'Required parameter quantity was null or undefined when calling updateItemQuantityUsingPUT3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateItemQuantityUsingPUT3.');
            }
            const localVarPath = `/cart/{cartId}/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderAttributesUsingPUT3: (cartId, customerId, requestParams, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateOrderAttributesUsingPUT3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateOrderAttributesUsingPUT3.');
            }
            // verify required parameter 'requestParams' is not null or undefined
            if (requestParams === null || requestParams === undefined) {
                throw new base_1.RequiredError('requestParams', 'Required parameter requestParams was null or undefined when calling updateOrderAttributesUsingPUT3.');
            }
            const localVarPath = `/cart/{cartId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductOptionsUsingPUT3: (cartId, itemId, customerId, requestParams, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateProductOptionsUsingPUT3.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateProductOptionsUsingPUT3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateProductOptionsUsingPUT3.');
            }
            // verify required parameter 'requestParams' is not null or undefined
            if (requestParams === null || requestParams === undefined) {
                throw new base_1.RequiredError('requestParams', 'Required parameter requestParams was null or undefined when calling updateProductOptionsUsingPUT3.');
            }
            const localVarPath = `/cart/{cartId}/item/{itemId}/attributes`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof requestParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestParams !== undefined ? requestParams : {}) : (requestParams || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CartEndpointApi - functional programming interface
 * @export
 */
exports.CartEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addItemToOrder
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToOrderUsingPOST3(cartId, customerId, orderItemWrapper, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).addItemToOrderUsingPOST3(cartId, customerId, orderItemWrapper, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST3(promoCode, cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).addOfferCodeUsingPOST3(promoCode, cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary createNewCartForCustomer
         * @param {number} [customerId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCartForCustomerUsingPOST3(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).createNewCartForCustomerUsingPOST3(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary deleteOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderAttributesUsingDELETE3(cartId, customerId, requestParams, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).deleteOrderAttributesUsingDELETE3(cartId, customerId, requestParams, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary deleteProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductOptionsUsingDELETE3(cartId, itemId, customerId, priceOrder, requestParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).deleteProductOptionsUsingDELETE3(cartId, itemId, customerId, priceOrder, requestParams, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCartById
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartByIdUsingGET3(cartId, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).findCartByIdUsingGET3(cartId, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllOfferCodes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE3(cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).removeAllOfferCodesUsingDELETE3(cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE3(itemId, cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).removeItemFromOrderUsingDELETE3(itemId, cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE3(promoCode, cartId, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).removeOfferCodeUsingDELETE3(promoCode, cartId, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} quantity quantity
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT3(itemId, cartId, quantity, customerId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).updateItemQuantityUsingPUT3(itemId, cartId, quantity, customerId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderAttributesUsingPUT3(cartId, customerId, requestParams, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).updateOrderAttributesUsingPUT3(cartId, customerId, requestParams, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductOptionsUsingPUT3(cartId, itemId, customerId, requestParams, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CartEndpointApiAxiosParamCreator(configuration).updateProductOptionsUsingPUT3(cartId, itemId, customerId, requestParams, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CartEndpointApi - factory interface
 * @export
 */
exports.CartEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addItemToOrder
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToOrderUsingPOST3(cartId, customerId, orderItemWrapper, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).addItemToOrderUsingPOST3(cartId, customerId, orderItemWrapper, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOfferCodeUsingPOST3(promoCode, cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).addOfferCodeUsingPOST3(promoCode, cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary createNewCartForCustomer
         * @param {number} [customerId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCartForCustomerUsingPOST3(customerId, options) {
            return exports.CartEndpointApiFp(configuration).createNewCartForCustomerUsingPOST3(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderAttributesUsingDELETE3(cartId, customerId, requestParams, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).deleteOrderAttributesUsingDELETE3(cartId, customerId, requestParams, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deleteProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductOptionsUsingDELETE3(cartId, itemId, customerId, priceOrder, requestParams, options) {
            return exports.CartEndpointApiFp(configuration).deleteProductOptionsUsingDELETE3(cartId, itemId, customerId, priceOrder, requestParams, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCartById
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartByIdUsingGET3(cartId, customerId, options) {
            return exports.CartEndpointApiFp(configuration).findCartByIdUsingGET3(cartId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllOfferCodes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOfferCodesUsingDELETE3(cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).removeAllOfferCodesUsingDELETE3(cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeItemFromOrder
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromOrderUsingDELETE3(itemId, cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).removeItemFromOrderUsingDELETE3(itemId, cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeOfferCode
         * @param {string} promoCode promoCode
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOfferCodeUsingDELETE3(promoCode, cartId, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).removeOfferCodeUsingDELETE3(promoCode, cartId, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateItemQuantity
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {number} quantity quantity
         * @param {number} customerId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemQuantityUsingPUT3(itemId, cartId, quantity, customerId, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).updateItemQuantityUsingPUT3(itemId, cartId, quantity, customerId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateOrderAttributes
         * @param {number} cartId cartId
         * @param {number} customerId
         * @param {Array<OrderAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderAttributesUsingPUT3(cartId, customerId, requestParams, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).updateOrderAttributesUsingPUT3(cartId, customerId, requestParams, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateProductOptions
         * @param {number} cartId cartId
         * @param {number} itemId itemId
         * @param {number} customerId
         * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductOptionsUsingPUT3(cartId, itemId, customerId, requestParams, priceOrder, options) {
            return exports.CartEndpointApiFp(configuration).updateProductOptionsUsingPUT3(cartId, itemId, customerId, requestParams, priceOrder, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CartEndpointApi - object-oriented interface
 * @export
 * @class CartEndpointApi
 * @extends {BaseAPI}
 */
class CartEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addItemToOrderUsingPOST3(cartId, customerId, orderItemWrapper, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).addItemToOrderUsingPOST3(cartId, customerId, orderItemWrapper, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addOfferCodeUsingPOST3(promoCode, cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).addOfferCodeUsingPOST3(promoCode, cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    createNewCartForCustomerUsingPOST3(customerId, options) {
        return exports.CartEndpointApiFp(this.configuration).createNewCartForCustomerUsingPOST3(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteOrderAttributesUsingDELETE3(cartId, customerId, requestParams, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).deleteOrderAttributesUsingDELETE3(cartId, customerId, requestParams, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteProductOptionsUsingDELETE3(cartId, itemId, customerId, priceOrder, requestParams, options) {
        return exports.CartEndpointApiFp(this.configuration).deleteProductOptionsUsingDELETE3(cartId, itemId, customerId, priceOrder, requestParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findCartByIdUsingGET3(cartId, customerId, options) {
        return exports.CartEndpointApiFp(this.configuration).findCartByIdUsingGET3(cartId, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeAllOfferCodesUsingDELETE3(cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).removeAllOfferCodesUsingDELETE3(cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeItemFromOrderUsingDELETE3(itemId, cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).removeItemFromOrderUsingDELETE3(itemId, cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeOfferCodeUsingDELETE3(promoCode, cartId, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).removeOfferCodeUsingDELETE3(promoCode, cartId, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateItemQuantityUsingPUT3(itemId, cartId, quantity, customerId, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).updateItemQuantityUsingPUT3(itemId, cartId, quantity, customerId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateOrderAttributesUsingPUT3(cartId, customerId, requestParams, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).updateOrderAttributesUsingPUT3(cartId, customerId, requestParams, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateProductOptionsUsingPUT3(cartId, itemId, customerId, requestParams, priceOrder, options) {
        return exports.CartEndpointApiFp(this.configuration).updateProductOptionsUsingPUT3(cartId, itemId, customerId, requestParams, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CartEndpointApi = CartEndpointApi;
/**
 * CatalogEndpointApi - axios parameter creator
 * @export
 */
exports.CatalogEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findActiveSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveSubCategoriesUsingGET3: (categoryId, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findActiveSubCategoriesUsingGET3.');
            }
            const localVarPath = `/catalog/category/{categoryId}/activeSubcategories`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllCategories
         * @param {string} [name] name
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCategoriesUsingGET3: (name, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/catalog/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCategoryAttributesForCategory
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryAttributesForCategoryUsingGET3: (categoryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findCategoryAttributesForCategoryUsingGET3.');
            }
            const localVarPath = `/catalog/category/{categoryId}/attributes`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET3: (searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'searchParameter' is not null or undefined
            if (searchParameter === null || searchParameter === undefined) {
                throw new base_1.RequiredError('searchParameter', 'Required parameter searchParameter was null or undefined when calling findCategoryByIdOrNameUsingGET3.');
            }
            const localVarPath = `/catalog/category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (searchParameter !== undefined) {
                localVarQueryParameter['searchParameter'] = searchParameter;
            }
            if (productLimit !== undefined) {
                localVarQueryParameter['productLimit'] = productLimit;
            }
            if (productOffset !== undefined) {
                localVarQueryParameter['productOffset'] = productOffset;
            }
            if (subcategoryLimit !== undefined) {
                localVarQueryParameter['subcategoryLimit'] = subcategoryLimit;
            }
            if (subcategoryOffset !== undefined) {
                localVarQueryParameter['subcategoryOffset'] = subcategoryOffset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCategoryById
         * @param {number} categoryId categoryId
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdUsingGET3: (categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findCategoryByIdUsingGET3.');
            }
            const localVarPath = `/catalog/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (productLimit !== undefined) {
                localVarQueryParameter['productLimit'] = productLimit;
            }
            if (productOffset !== undefined) {
                localVarQueryParameter['productOffset'] = productOffset;
            }
            if (subcategoryLimit !== undefined) {
                localVarQueryParameter['subcategoryLimit'] = subcategoryLimit;
            }
            if (subcategoryOffset !== undefined) {
                localVarQueryParameter['subcategoryOffset'] = subcategoryOffset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCrossSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCrossSaleProductsByProductUsingGET3: (productId, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findCrossSaleProductsByProductUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/crosssale`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findDefaultSkuByProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultSkuByProductIdUsingGET3: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findDefaultSkuByProductIdUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/defaultSku`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findInventoryForSkus
         * @param {Array<number>} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkusUsingGET3: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling findInventoryForSkusUsingGET3.');
            }
            const localVarPath = `/catalog/sku/inventory`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findMediaForCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForCategoryUsingGET3: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling findMediaForCategoryUsingGET3.');
            }
            const localVarPath = `/catalog/category/{id}/media`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findMediaForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForProductUsingGET3: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findMediaForProductUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/media`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findMediaForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForSkuUsingGET3: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findMediaForSkuUsingGET3.');
            }
            const localVarPath = `/catalog/sku/{skuId}/media`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findParentCategoriesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findParentCategoriesForProductUsingGET3: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findParentCategoriesForProductUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/categories`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findProductAttributesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductAttributesForProductUsingGET3: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findProductAttributesForProductUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/attributes`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findProductById
         * @param {number} id id
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductByIdUsingGET3: (id, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling findProductByIdUsingGET3.');
            }
            const localVarPath = `/catalog/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSearchResultsByCategoryAndQuery
         * @param {number} categoryId categoryId
         * @param {string} [q] q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByCategoryAndQueryUsingGET3: (categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findSearchResultsByCategoryAndQueryUsingGET3.');
            }
            const localVarPath = `/catalog/search/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSearchResultsByQuery
         * @param {string} q q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByQueryUsingGET3: (q, pageSize, page, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new base_1.RequiredError('q', 'Required parameter q was null or undefined when calling findSearchResultsByQueryUsingGET3.');
            }
            const localVarPath = `/catalog/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSkuAttributesForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuAttributesForSkuUsingGET3: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findSkuAttributesForSkuUsingGET3.');
            }
            const localVarPath = `/catalog/sku/{skuId}/attributes`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSkuById
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuByIdUsingGET3: (skuId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'skuId' is not null or undefined
            if (skuId === null || skuId === undefined) {
                throw new base_1.RequiredError('skuId', 'Required parameter skuId was null or undefined when calling findSkuByIdUsingGET3.');
            }
            const localVarPath = `/catalog/sku/{skuId}`
                .replace(`{${"skuId"}}`, encodeURIComponent(String(skuId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSkusByProductById
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkusByProductByIdUsingGET3: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findSkusByProductByIdUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/skus`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [active] active
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSubCategoriesUsingGET3: (categoryId, limit, offset, active, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new base_1.RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling findSubCategoriesUsingGET3.');
            }
            const localVarPath = `/catalog/category/{categoryId}/categories`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findUpSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUpSaleProductsByProductUsingGET3: (productId, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findUpSaleProductsByProductUsingGET3.');
            }
            const localVarPath = `/catalog/product/{productId}/upsale`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CatalogEndpointApi - functional programming interface
 * @export
 */
exports.CatalogEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findActiveSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveSubCategoriesUsingGET3(categoryId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findActiveSubCategoriesUsingGET3(categoryId, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllCategories
         * @param {string} [name] name
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCategoriesUsingGET3(name, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findAllCategoriesUsingGET3(name, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCategoryAttributesForCategory
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryAttributesForCategoryUsingGET3(categoryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findCategoryAttributesForCategoryUsingGET3(categoryId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCategoryById
         * @param {number} categoryId categoryId
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdUsingGET3(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findCategoryByIdUsingGET3(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCrossSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findDefaultSkuByProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultSkuByProductIdUsingGET3(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findDefaultSkuByProductIdUsingGET3(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findInventoryForSkus
         * @param {Array<number>} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkusUsingGET3(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findInventoryForSkusUsingGET3(id, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findMediaForCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForCategoryUsingGET3(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findMediaForCategoryUsingGET3(id, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findMediaForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForProductUsingGET3(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findMediaForProductUsingGET3(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findMediaForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForSkuUsingGET3(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findMediaForSkuUsingGET3(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findParentCategoriesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findParentCategoriesForProductUsingGET3(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findParentCategoriesForProductUsingGET3(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findProductAttributesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductAttributesForProductUsingGET3(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findProductAttributesForProductUsingGET3(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findProductById
         * @param {number} id id
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductByIdUsingGET3(id, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findProductByIdUsingGET3(id, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSearchResultsByCategoryAndQuery
         * @param {number} categoryId categoryId
         * @param {string} [q] q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByCategoryAndQueryUsingGET3(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSearchResultsByCategoryAndQueryUsingGET3(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSearchResultsByQuery
         * @param {string} q q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByQueryUsingGET3(q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSearchResultsByQueryUsingGET3(q, pageSize, page, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSkuAttributesForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuAttributesForSkuUsingGET3(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSkuAttributesForSkuUsingGET3(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSkuById
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuByIdUsingGET3(skuId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSkuByIdUsingGET3(skuId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSkusByProductById
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkusByProductByIdUsingGET3(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSkusByProductByIdUsingGET3(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [active] active
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSubCategoriesUsingGET3(categoryId, limit, offset, active, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findSubCategoriesUsingGET3(categoryId, limit, offset, active, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findUpSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUpSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CatalogEndpointApiAxiosParamCreator(configuration).findUpSaleProductsByProductUsingGET3(productId, limit, offset, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CatalogEndpointApi - factory interface
 * @export
 */
exports.CatalogEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findActiveSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findActiveSubCategoriesUsingGET3(categoryId, limit, offset, options) {
            return exports.CatalogEndpointApiFp(configuration).findActiveSubCategoriesUsingGET3(categoryId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllCategories
         * @param {string} [name] name
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCategoriesUsingGET3(name, limit, offset, options) {
            return exports.CatalogEndpointApiFp(configuration).findAllCategoriesUsingGET3(name, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCategoryAttributesForCategory
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryAttributesForCategoryUsingGET3(categoryId, options) {
            return exports.CatalogEndpointApiFp(configuration).findCategoryAttributesForCategoryUsingGET3(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCategoryByIdOrName
         * @param {string} searchParameter searchParameter
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return exports.CatalogEndpointApiFp(configuration).findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCategoryById
         * @param {number} categoryId categoryId
         * @param {number} [productLimit] productLimit
         * @param {number} [productOffset] productOffset
         * @param {number} [subcategoryLimit] subcategoryLimit
         * @param {number} [subcategoryOffset] subcategoryOffset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByIdUsingGET3(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
            return exports.CatalogEndpointApiFp(configuration).findCategoryByIdUsingGET3(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCrossSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return exports.CatalogEndpointApiFp(configuration).findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findDefaultSkuByProductId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefaultSkuByProductIdUsingGET3(productId, options) {
            return exports.CatalogEndpointApiFp(configuration).findDefaultSkuByProductIdUsingGET3(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findInventoryForSkus
         * @param {Array<number>} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInventoryForSkusUsingGET3(id, options) {
            return exports.CatalogEndpointApiFp(configuration).findInventoryForSkusUsingGET3(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findMediaForCategory
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForCategoryUsingGET3(id, options) {
            return exports.CatalogEndpointApiFp(configuration).findMediaForCategoryUsingGET3(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findMediaForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForProductUsingGET3(productId, options) {
            return exports.CatalogEndpointApiFp(configuration).findMediaForProductUsingGET3(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findMediaForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMediaForSkuUsingGET3(skuId, options) {
            return exports.CatalogEndpointApiFp(configuration).findMediaForSkuUsingGET3(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findParentCategoriesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findParentCategoriesForProductUsingGET3(productId, options) {
            return exports.CatalogEndpointApiFp(configuration).findParentCategoriesForProductUsingGET3(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findProductAttributesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductAttributesForProductUsingGET3(productId, options) {
            return exports.CatalogEndpointApiFp(configuration).findProductAttributesForProductUsingGET3(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findProductById
         * @param {number} id id
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProductByIdUsingGET3(id, includePromotionMessages, includePriceData, options) {
            return exports.CatalogEndpointApiFp(configuration).findProductByIdUsingGET3(id, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSearchResultsByCategoryAndQuery
         * @param {number} categoryId categoryId
         * @param {string} [q] q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByCategoryAndQueryUsingGET3(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return exports.CatalogEndpointApiFp(configuration).findSearchResultsByCategoryAndQueryUsingGET3(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSearchResultsByQuery
         * @param {string} q q
         * @param {number} [pageSize] pageSize
         * @param {number} [page] page
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSearchResultsByQueryUsingGET3(q, pageSize, page, includePromotionMessages, includePriceData, options) {
            return exports.CatalogEndpointApiFp(configuration).findSearchResultsByQueryUsingGET3(q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSkuAttributesForSku
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuAttributesForSkuUsingGET3(skuId, options) {
            return exports.CatalogEndpointApiFp(configuration).findSkuAttributesForSkuUsingGET3(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSkuById
         * @param {number} skuId skuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkuByIdUsingGET3(skuId, options) {
            return exports.CatalogEndpointApiFp(configuration).findSkuByIdUsingGET3(skuId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSkusByProductById
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkusByProductByIdUsingGET3(productId, options) {
            return exports.CatalogEndpointApiFp(configuration).findSkusByProductByIdUsingGET3(productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findSubCategories
         * @param {number} categoryId categoryId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {boolean} [active] active
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSubCategoriesUsingGET3(categoryId, limit, offset, active, options) {
            return exports.CatalogEndpointApiFp(configuration).findSubCategoriesUsingGET3(categoryId, limit, offset, active, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findUpSaleProductsByProduct
         * @param {number} productId productId
         * @param {number} [limit] limit
         * @param {number} [offset] offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUpSaleProductsByProductUsingGET3(productId, limit, offset, options) {
            return exports.CatalogEndpointApiFp(configuration).findUpSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CatalogEndpointApi - object-oriented interface
 * @export
 * @class CatalogEndpointApi
 * @extends {BaseAPI}
 */
class CatalogEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findActiveSubCategoriesUsingGET3(categoryId, limit, offset, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findActiveSubCategoriesUsingGET3(categoryId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findAllCategoriesUsingGET3(name, limit, offset, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findAllCategoriesUsingGET3(name, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryAttributesForCategoryUsingGET3(categoryId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findCategoryAttributesForCategoryUsingGET3(categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findCategoryByIdOrNameUsingGET3(searchParameter, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryByIdUsingGET3(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findCategoryByIdUsingGET3(categoryId, productLimit, productOffset, subcategoryLimit, subcategoryOffset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findCrossSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findDefaultSkuByProductIdUsingGET3(productId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findDefaultSkuByProductIdUsingGET3(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findInventoryForSkusUsingGET3(id, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findInventoryForSkusUsingGET3(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForCategoryUsingGET3(id, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findMediaForCategoryUsingGET3(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForProductUsingGET3(productId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findMediaForProductUsingGET3(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForSkuUsingGET3(skuId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findMediaForSkuUsingGET3(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findParentCategoriesForProductUsingGET3(productId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findParentCategoriesForProductUsingGET3(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findProductAttributesForProductUsingGET3(productId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findProductAttributesForProductUsingGET3(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findProductByIdUsingGET3(id, includePromotionMessages, includePriceData, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findProductByIdUsingGET3(id, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByCategoryAndQueryUsingGET3(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSearchResultsByCategoryAndQueryUsingGET3(categoryId, q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByQueryUsingGET3(q, pageSize, page, includePromotionMessages, includePriceData, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSearchResultsByQueryUsingGET3(q, pageSize, page, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkuAttributesForSkuUsingGET3(skuId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSkuAttributesForSkuUsingGET3(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkuByIdUsingGET3(skuId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSkuByIdUsingGET3(skuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkusByProductByIdUsingGET3(productId, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSkusByProductByIdUsingGET3(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSubCategoriesUsingGET3(categoryId, limit, offset, active, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findSubCategoriesUsingGET3(categoryId, limit, offset, active, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findUpSaleProductsByProductUsingGET3(productId, limit, offset, options) {
        return exports.CatalogEndpointApiFp(this.configuration).findUpSaleProductsByProductUsingGET3(productId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CatalogEndpointApi = CatalogEndpointApi;
/**
 * CategoryEndpointApi - axios parameter creator
 * @export
 */
exports.CategoryEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findCategoryByUrl
         * @param {string} query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByUrlUsingGET3: (query, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new base_1.RequiredError('query', 'Required parameter query was null or undefined when calling findCategoryByUrlUsingGET3.');
            }
            const localVarPath = `/category/by-url/{query}`
                .replace(`{${"query"}}`, encodeURIComponent(String(query)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CategoryEndpointApi - functional programming interface
 * @export
 */
exports.CategoryEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findCategoryByUrl
         * @param {string} query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByUrlUsingGET3(query, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CategoryEndpointApiAxiosParamCreator(configuration).findCategoryByUrlUsingGET3(query, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CategoryEndpointApi - factory interface
 * @export
 */
exports.CategoryEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findCategoryByUrl
         * @param {string} query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoryByUrlUsingGET3(query, options) {
            return exports.CategoryEndpointApiFp(configuration).findCategoryByUrlUsingGET3(query, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CategoryEndpointApi - object-oriented interface
 * @export
 * @class CategoryEndpointApi
 * @extends {BaseAPI}
 */
class CategoryEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findCategoryByUrl
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findCategoryByUrlUsingGET3(query, options) {
        return exports.CategoryEndpointApiFp(this.configuration).findCategoryByUrlUsingGET3(query, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CategoryEndpointApi = CategoryEndpointApi;
/**
 * CheckoutEndpointApi - axios parameter creator
 * @export
 */
exports.CheckoutEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT3: (paymentId, cartId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
            }
            const localVarPath = `/cart/checkout/payment/{paymentId}/transaction`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST3: (amount, currency, customerPaymentId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new base_1.RequiredError('amount', 'Required parameter amount was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new base_1.RequiredError('currency', 'Required parameter currency was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
            }
            // verify required parameter 'customerPaymentId' is not null or undefined
            if (customerPaymentId === null || customerPaymentId === undefined) {
                throw new base_1.RequiredError('customerPaymentId', 'Required parameter customerPaymentId was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
            }
            const localVarPath = `/cart/checkout/payment/{customerPaymentId}`
                .replace(`{${"customerPaymentId"}}`, encodeURIComponent(String(customerPaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addPaymentToOrder
         * @param {number} cartId cartId
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST3: (cartId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addPaymentToOrderUsingPOST3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addPaymentToOrderUsingPOST3.');
            }
            const localVarPath = `/cart/checkout/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findPaymentsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling findPaymentsForOrderUsingGET3.');
            }
            const localVarPath = `/cart/checkout/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary performCheckout
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling performCheckoutUsingPOST3.');
            }
            const localVarPath = `/cart/checkout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE3: (paymentId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling removePaymentFromOrderByIdUsingDELETE3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removePaymentFromOrderByIdUsingDELETE3.');
            }
            const localVarPath = `/cart/checkout/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CheckoutEndpointApi - functional programming interface
 * @export
 */
exports.CheckoutEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT3(paymentId, cartId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CheckoutEndpointApiAxiosParamCreator(configuration).addOrderPaymentTransactionUsingPUT3(paymentId, cartId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CheckoutEndpointApiAxiosParamCreator(configuration).addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addPaymentToOrder
         * @param {number} cartId cartId
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST3(cartId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CheckoutEndpointApiAxiosParamCreator(configuration).addPaymentToOrderUsingPOST3(cartId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findPaymentsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CheckoutEndpointApiAxiosParamCreator(configuration).findPaymentsForOrderUsingGET3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary performCheckout
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CheckoutEndpointApiAxiosParamCreator(configuration).performCheckoutUsingPOST3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE3(paymentId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CheckoutEndpointApiAxiosParamCreator(configuration).removePaymentFromOrderByIdUsingDELETE3(paymentId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CheckoutEndpointApi - factory interface
 * @export
 */
exports.CheckoutEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addOrderPaymentTransaction
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {PaymentTransactionWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrderPaymentTransactionUsingPUT3(paymentId, cartId, wrapper, options) {
            return exports.CheckoutEndpointApiFp(configuration).addOrderPaymentTransactionUsingPUT3(paymentId, cartId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addPaymentToOrderById
         * @param {number} amount amount
         * @param {string} currency currency
         * @param {number} customerPaymentId customerPaymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, cartId, options) {
            return exports.CheckoutEndpointApiFp(configuration).addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addPaymentToOrder
         * @param {number} cartId cartId
         * @param {OrderPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentToOrderUsingPOST3(cartId, wrapper, options) {
            return exports.CheckoutEndpointApiFp(configuration).addPaymentToOrderUsingPOST3(cartId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findPaymentsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPaymentsForOrderUsingGET3(cartId, options) {
            return exports.CheckoutEndpointApiFp(configuration).findPaymentsForOrderUsingGET3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary performCheckout
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCheckoutUsingPOST3(cartId, options) {
            return exports.CheckoutEndpointApiFp(configuration).performCheckoutUsingPOST3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removePaymentFromOrderById
         * @param {number} paymentId paymentId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePaymentFromOrderByIdUsingDELETE3(paymentId, cartId, options) {
            return exports.CheckoutEndpointApiFp(configuration).removePaymentFromOrderByIdUsingDELETE3(paymentId, cartId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CheckoutEndpointApi - object-oriented interface
 * @export
 * @class CheckoutEndpointApi
 * @extends {BaseAPI}
 */
class CheckoutEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    addOrderPaymentTransactionUsingPUT3(paymentId, cartId, wrapper, options) {
        return exports.CheckoutEndpointApiFp(this.configuration).addOrderPaymentTransactionUsingPUT3(paymentId, cartId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, cartId, options) {
        return exports.CheckoutEndpointApiFp(this.configuration).addPaymentToOrderByIdUsingPOST3(amount, currency, customerPaymentId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    addPaymentToOrderUsingPOST3(cartId, wrapper, options) {
        return exports.CheckoutEndpointApiFp(this.configuration).addPaymentToOrderUsingPOST3(cartId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    findPaymentsForOrderUsingGET3(cartId, options) {
        return exports.CheckoutEndpointApiFp(this.configuration).findPaymentsForOrderUsingGET3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    performCheckoutUsingPOST3(cartId, options) {
        return exports.CheckoutEndpointApiFp(this.configuration).performCheckoutUsingPOST3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    removePaymentFromOrderByIdUsingDELETE3(paymentId, cartId, options) {
        return exports.CheckoutEndpointApiFp(this.configuration).removePaymentFromOrderByIdUsingDELETE3(paymentId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CheckoutEndpointApi = CheckoutEndpointApi;
/**
 * CustomCartEndpointApi - axios parameter creator
 * @export
 */
exports.CustomCartEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findCartForCustomer
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartForCustomerUsingGET3: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findCartForCustomerUsingGET3.');
            }
            const localVarPath = `/cart`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomCartEndpointApi - functional programming interface
 * @export
 */
exports.CustomCartEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findCartForCustomer
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartForCustomerUsingGET3(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomCartEndpointApiAxiosParamCreator(configuration).findCartForCustomerUsingGET3(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CustomCartEndpointApi - factory interface
 * @export
 */
exports.CustomCartEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findCartForCustomer
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartForCustomerUsingGET3(customerId, options) {
            return exports.CustomCartEndpointApiFp(configuration).findCartForCustomerUsingGET3(customerId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CustomCartEndpointApi - object-oriented interface
 * @export
 * @class CustomCartEndpointApi
 * @extends {BaseAPI}
 */
class CustomCartEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCartEndpointApi
     */
    findCartForCustomerUsingGET3(customerId, options) {
        return exports.CustomCartEndpointApiFp(this.configuration).findCartForCustomerUsingGET3(customerId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CustomCartEndpointApi = CustomCartEndpointApi;
/**
 * CustomerEndpointApi - axios parameter creator
 * @export
 */
exports.CustomerEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addAddress
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddressUsingPUT3: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addAddressUsingPUT3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addAddressUsingPUT3.');
            }
            const localVarPath = `/customer/address`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addAttribute
         * @param {number} customerId
         * @param {CustomerAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttributeUsingPUT3: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addAttributeUsingPUT3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addAttributeUsingPUT3.');
            }
            const localVarPath = `/customer/attribute`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addCustomerPayment
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerPaymentUsingPOST3: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling addCustomerPaymentUsingPOST3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addCustomerPaymentUsingPOST3.');
            }
            const localVarPath = `/customer/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addCustomer
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingPOST3: (wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addCustomerUsingPOST3.');
            }
            const localVarPath = `/customer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary changePassword
         * @param {ChangePasswordForm} changePasswordForm changePasswordForm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST3: (changePasswordForm, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'changePasswordForm' is not null or undefined
            if (changePasswordForm === null || changePasswordForm === undefined) {
                throw new base_1.RequiredError('changePasswordForm', 'Required parameter changePasswordForm was null or undefined when calling changePasswordUsingPOST3.');
            }
            const localVarPath = `/customer/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof changePasswordForm !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(changePasswordForm !== undefined ? changePasswordForm : {}) : (changePasswordForm || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAddressUsingGET3: (addressName, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'addressName' is not null or undefined
            if (addressName === null || addressName === undefined) {
                throw new base_1.RequiredError('addressName', 'Required parameter addressName was null or undefined when calling findAddressUsingGET3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findAddressUsingGET3.');
            }
            const localVarPath = `/customer/address`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (addressName !== undefined) {
                localVarQueryParameter['addressName'] = addressName;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllAddressesUsingGET3: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findAllAddressesUsingGET3.');
            }
            const localVarPath = `/customer/addresses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCustomerPaymentsUsingGET3: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findAllCustomerPaymentsUsingGET3.');
            }
            const localVarPath = `/customer/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCustomerByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerByEmailUsingGET3: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling findCustomerByEmailUsingGET3.');
            }
            const localVarPath = `/customer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerPaymentUsingGET3: (paymentId, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling findCustomerPaymentUsingGET3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling findCustomerPaymentUsingGET3.');
            }
            const localVarPath = `/customer/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (paymentId !== undefined) {
                localVarQueryParameter['paymentId'] = paymentId;
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddressUsingDELETE3: (addressName, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'addressName' is not null or undefined
            if (addressName === null || addressName === undefined) {
                throw new base_1.RequiredError('addressName', 'Required parameter addressName was null or undefined when calling removeAddressUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAddressUsingDELETE3.');
            }
            const localVarPath = `/customer/address/{addressName}`
                .replace(`{${"addressName"}}`, encodeURIComponent(String(addressName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAddressesUsingDELETE3: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllAddressesUsingDELETE3.');
            }
            const localVarPath = `/customer/addresses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllAttributes
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAttributesUsingDELETE3: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllAttributesUsingDELETE3.');
            }
            const localVarPath = `/customer/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllCustomerPaymentsUsingDELETE3: (customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAllCustomerPaymentsUsingDELETE3.');
            }
            const localVarPath = `/customer/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAttribute
         * @param {string} attributeName attributeName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAttributeUsingDELETE3: (attributeName, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'attributeName' is not null or undefined
            if (attributeName === null || attributeName === undefined) {
                throw new base_1.RequiredError('attributeName', 'Required parameter attributeName was null or undefined when calling removeAttributeUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeAttributeUsingDELETE3.');
            }
            const localVarPath = `/customer/attribute/{attributeName}`
                .replace(`{${"attributeName"}}`, encodeURIComponent(String(attributeName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomerPaymentUsingDELETE3: (paymentId, customerId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling removeCustomerPaymentUsingDELETE3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling removeCustomerPaymentUsingDELETE3.');
            }
            const localVarPath = `/customer/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateAddress
         * @param {number} addressId addressId
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressUsingPUT3: (addressId, customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'addressId' is not null or undefined
            if (addressId === null || addressId === undefined) {
                throw new base_1.RequiredError('addressId', 'Required parameter addressId was null or undefined when calling updateAddressUsingPUT3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateAddressUsingPUT3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateAddressUsingPUT3.');
            }
            const localVarPath = `/customer/address/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerPaymentUsingPUT3: (paymentId, customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new base_1.RequiredError('paymentId', 'Required parameter paymentId was null or undefined when calling updateCustomerPaymentUsingPUT3.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateCustomerPaymentUsingPUT3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateCustomerPaymentUsingPUT3.');
            }
            const localVarPath = `/customer/payment/{paymentId}`
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateCustomer
         * @param {number} customerId
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT3: (customerId, wrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new base_1.RequiredError('customerId', 'Required parameter customerId was null or undefined when calling updateCustomerUsingPUT3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateCustomerUsingPUT3.');
            }
            const localVarPath = `/customer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomerEndpointApi - functional programming interface
 * @export
 */
exports.CustomerEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addAddress
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddressUsingPUT3(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addAddressUsingPUT3(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addAttribute
         * @param {number} customerId
         * @param {CustomerAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttributeUsingPUT3(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addAttributeUsingPUT3(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addCustomerPayment
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerPaymentUsingPOST3(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addCustomerPaymentUsingPOST3(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addCustomer
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingPOST3(wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).addCustomerUsingPOST3(wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary changePassword
         * @param {ChangePasswordForm} changePasswordForm changePasswordForm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST3(changePasswordForm, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).changePasswordUsingPOST3(changePasswordForm, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAddressUsingGET3(addressName, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findAddressUsingGET3(addressName, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllAddressesUsingGET3(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findAllAddressesUsingGET3(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCustomerPaymentsUsingGET3(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findAllCustomerPaymentsUsingGET3(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCustomerByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerByEmailUsingGET3(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findCustomerByEmailUsingGET3(email, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerPaymentUsingGET3(paymentId, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).findCustomerPaymentUsingGET3(paymentId, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddressUsingDELETE3(addressName, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAddressUsingDELETE3(addressName, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAddressesUsingDELETE3(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAllAddressesUsingDELETE3(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllAttributes
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAttributesUsingDELETE3(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAllAttributesUsingDELETE3(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllCustomerPaymentsUsingDELETE3(customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAllCustomerPaymentsUsingDELETE3(customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAttribute
         * @param {string} attributeName attributeName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAttributeUsingDELETE3(attributeName, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeAttributeUsingDELETE3(attributeName, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomerPaymentUsingDELETE3(paymentId, customerId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).removeCustomerPaymentUsingDELETE3(paymentId, customerId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateAddress
         * @param {number} addressId addressId
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressUsingPUT3(addressId, customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).updateAddressUsingPUT3(addressId, customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerPaymentUsingPUT3(paymentId, customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).updateCustomerPaymentUsingPUT3(paymentId, customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateCustomer
         * @param {number} customerId
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT3(customerId, wrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.CustomerEndpointApiAxiosParamCreator(configuration).updateCustomerUsingPUT3(customerId, wrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * CustomerEndpointApi - factory interface
 * @export
 */
exports.CustomerEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addAddress
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddressUsingPUT3(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addAddressUsingPUT3(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addAttribute
         * @param {number} customerId
         * @param {CustomerAttributeWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttributeUsingPUT3(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addAttributeUsingPUT3(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addCustomerPayment
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerPaymentUsingPOST3(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addCustomerPaymentUsingPOST3(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addCustomer
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerUsingPOST3(wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).addCustomerUsingPOST3(wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary changePassword
         * @param {ChangePasswordForm} changePasswordForm changePasswordForm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST3(changePasswordForm, options) {
            return exports.CustomerEndpointApiFp(configuration).changePasswordUsingPOST3(changePasswordForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAddressUsingGET3(addressName, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findAddressUsingGET3(addressName, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllAddressesUsingGET3(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findAllAddressesUsingGET3(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCustomerPaymentsUsingGET3(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findAllCustomerPaymentsUsingGET3(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCustomerByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerByEmailUsingGET3(email, options) {
            return exports.CustomerEndpointApiFp(configuration).findCustomerByEmailUsingGET3(email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCustomerPaymentUsingGET3(paymentId, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).findCustomerPaymentUsingGET3(paymentId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAddress
         * @param {string} addressName addressName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddressUsingDELETE3(addressName, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAddressUsingDELETE3(addressName, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllAddresses
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAddressesUsingDELETE3(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAllAddressesUsingDELETE3(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllAttributes
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllAttributesUsingDELETE3(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAllAttributesUsingDELETE3(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllCustomerPayments
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllCustomerPaymentsUsingDELETE3(customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAllCustomerPaymentsUsingDELETE3(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAttribute
         * @param {string} attributeName attributeName
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAttributeUsingDELETE3(attributeName, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeAttributeUsingDELETE3(attributeName, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomerPaymentUsingDELETE3(paymentId, customerId, options) {
            return exports.CustomerEndpointApiFp(configuration).removeCustomerPaymentUsingDELETE3(paymentId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateAddress
         * @param {number} addressId addressId
         * @param {number} customerId
         * @param {CustomerAddressWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddressUsingPUT3(addressId, customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).updateAddressUsingPUT3(addressId, customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateCustomerPayment
         * @param {number} paymentId paymentId
         * @param {number} customerId
         * @param {CustomerPaymentWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerPaymentUsingPUT3(paymentId, customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).updateCustomerPaymentUsingPUT3(paymentId, customerId, wrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateCustomer
         * @param {number} customerId
         * @param {CustomerWrapper} wrapper wrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT3(customerId, wrapper, options) {
            return exports.CustomerEndpointApiFp(configuration).updateCustomerUsingPUT3(customerId, wrapper, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CustomerEndpointApi - object-oriented interface
 * @export
 * @class CustomerEndpointApi
 * @extends {BaseAPI}
 */
class CustomerEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAddressUsingPUT3(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addAddressUsingPUT3(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAttributeUsingPUT3(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addAttributeUsingPUT3(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerPaymentUsingPOST3(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addCustomerPaymentUsingPOST3(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerUsingPOST3(wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).addCustomerUsingPOST3(wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    changePasswordUsingPOST3(changePasswordForm, options) {
        return exports.CustomerEndpointApiFp(this.configuration).changePasswordUsingPOST3(changePasswordForm, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAddressUsingGET3(addressName, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findAddressUsingGET3(addressName, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllAddressesUsingGET3(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findAllAddressesUsingGET3(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllCustomerPaymentsUsingGET3(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findAllCustomerPaymentsUsingGET3(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerByEmailUsingGET3(email, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findCustomerByEmailUsingGET3(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerPaymentUsingGET3(paymentId, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).findCustomerPaymentUsingGET3(paymentId, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAddressUsingDELETE3(addressName, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAddressUsingDELETE3(addressName, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAddressesUsingDELETE3(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAllAddressesUsingDELETE3(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAttributesUsingDELETE3(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAllAttributesUsingDELETE3(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllCustomerPaymentsUsingDELETE3(customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAllCustomerPaymentsUsingDELETE3(customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAttributeUsingDELETE3(attributeName, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeAttributeUsingDELETE3(attributeName, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeCustomerPaymentUsingDELETE3(paymentId, customerId, options) {
        return exports.CustomerEndpointApiFp(this.configuration).removeCustomerPaymentUsingDELETE3(paymentId, customerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateAddressUsingPUT3(addressId, customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).updateAddressUsingPUT3(addressId, customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerPaymentUsingPUT3(paymentId, customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).updateCustomerPaymentUsingPUT3(paymentId, customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerUsingPUT3(customerId, wrapper, options) {
        return exports.CustomerEndpointApiFp(this.configuration).updateCustomerUsingPUT3(customerId, wrapper, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CustomerEndpointApi = CustomerEndpointApi;
/**
 * EndpointMvcAdapterApi - axios parameter creator
 * @export
 */
exports.EndpointMvcAdapterApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET49: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/autoconfig`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET51: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/autoconfig.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET53: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/beans`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET55: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/beans.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET57: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/configprops`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET59: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/configprops.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET61: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/dump`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET63: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/dump.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET65: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET67: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/info.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET69: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/mappings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET71: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/mappings.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET73: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/trace`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET75: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/trace.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EndpointMvcAdapterApi - functional programming interface
 * @export
 */
exports.EndpointMvcAdapterApiFp = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET49(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET49(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET51(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET51(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET53(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET53(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET55(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET55(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET57(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET57(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET59(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET59(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET61(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET61(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET63(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET63(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET65(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET65(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET67(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET67(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET69(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET69(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET71(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET71(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET73(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET73(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET75(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EndpointMvcAdapterApiAxiosParamCreator(configuration).invokeUsingGET75(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * EndpointMvcAdapterApi - factory interface
 * @export
 */
exports.EndpointMvcAdapterApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET49(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET49(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET51(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET51(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET53(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET53(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET55(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET55(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET57(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET57(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET59(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET59(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET61(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET61(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET63(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET63(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET65(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET65(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET67(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET67(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET69(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET69(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET71(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET71(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET73(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET73(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET75(options) {
            return exports.EndpointMvcAdapterApiFp(configuration).invokeUsingGET75(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EndpointMvcAdapterApi - object-oriented interface
 * @export
 * @class EndpointMvcAdapterApi
 * @extends {BaseAPI}
 */
class EndpointMvcAdapterApi extends base_1.BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET49(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET49(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET51(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET51(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET53(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET53(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET55(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET55(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET57(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET57(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET59(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET59(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET61(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET61(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET63(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET63(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET65(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET65(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET67(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET67(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET69(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET69(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET71(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET71(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET73(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET73(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET75(options) {
        return exports.EndpointMvcAdapterApiFp(this.configuration).invokeUsingGET75(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EndpointMvcAdapterApi = EndpointMvcAdapterApi;
/**
 * EnvironmentMvcEndpointApi - axios parameter creator
 * @export
 */
exports.EnvironmentMvcEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET77: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/env`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET79: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/env.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary value
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueUsingGET5: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling valueUsingGET5.');
            }
            const localVarPath = `/env/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnvironmentMvcEndpointApi - functional programming interface
 * @export
 */
exports.EnvironmentMvcEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET77(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnvironmentMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET77(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET79(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnvironmentMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET79(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary value
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueUsingGET5(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnvironmentMvcEndpointApiAxiosParamCreator(configuration).valueUsingGET5(name, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * EnvironmentMvcEndpointApi - factory interface
 * @export
 */
exports.EnvironmentMvcEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET77(options) {
            return exports.EnvironmentMvcEndpointApiFp(configuration).invokeUsingGET77(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET79(options) {
            return exports.EnvironmentMvcEndpointApiFp(configuration).invokeUsingGET79(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary value
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueUsingGET5(name, options) {
            return exports.EnvironmentMvcEndpointApiFp(configuration).valueUsingGET5(name, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnvironmentMvcEndpointApi - object-oriented interface
 * @export
 * @class EnvironmentMvcEndpointApi
 * @extends {BaseAPI}
 */
class EnvironmentMvcEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentMvcEndpointApi
     */
    invokeUsingGET77(options) {
        return exports.EnvironmentMvcEndpointApiFp(this.configuration).invokeUsingGET77(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentMvcEndpointApi
     */
    invokeUsingGET79(options) {
        return exports.EnvironmentMvcEndpointApiFp(this.configuration).invokeUsingGET79(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentMvcEndpointApi
     */
    valueUsingGET5(name, options) {
        return exports.EnvironmentMvcEndpointApiFp(this.configuration).valueUsingGET5(name, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnvironmentMvcEndpointApi = EnvironmentMvcEndpointApi;
/**
 * FulfillmentEndpointApi - axios parameter creator
 * @export
 */
exports.FulfillmentEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addFulfillmentGroupToOrder
         * @param {number} cartId cartId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentGroupToOrderUsingPOST3: (cartId, wrapper, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addFulfillmentGroupToOrderUsingPOST3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addFulfillmentGroupToOrderUsingPOST3.');
            }
            const localVarPath = `/shipping/{cartId}/group`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addFulfillmentOptionToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} fulfillmentOptionId fulfillmentOptionId
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentOptionToFulfillmentGroupUsingPUT3: (fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling addFulfillmentOptionToFulfillmentGroupUsingPUT3.');
            }
            // verify required parameter 'fulfillmentOptionId' is not null or undefined
            if (fulfillmentOptionId === null || fulfillmentOptionId === undefined) {
                throw new base_1.RequiredError('fulfillmentOptionId', 'Required parameter fulfillmentOptionId was null or undefined when calling addFulfillmentOptionToFulfillmentGroupUsingPUT3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addFulfillmentOptionToFulfillmentGroupUsingPUT3.');
            }
            const localVarPath = `/shipping/{cartId}/group/{fulfillmentGroupId}/option/{fulfillmentOptionId}`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"fulfillmentOptionId"}}`, encodeURIComponent(String(fulfillmentOptionId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addItemToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {FulfillmentGroupItemWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToFulfillmentGroupUsingPOST3: (fulfillmentGroupId, cartId, wrapper, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling addItemToFulfillmentGroupUsingPOST3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling addItemToFulfillmentGroupUsingPOST3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling addItemToFulfillmentGroupUsingPOST3.');
            }
            const localVarPath = `/shipping/{cartId}/group/{fulfillmentGroupId}/item`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findFulfillmentGroupsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentGroupsForOrderUsingGET3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling findFulfillmentGroupsForOrderUsingGET3.');
            }
            const localVarPath = `/shipping/{cartId}/groups`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findFulfillmentOptions
         * @param {string} fulfillmentType fulfillmentType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentOptionsUsingGET3: (fulfillmentType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentType' is not null or undefined
            if (fulfillmentType === null || fulfillmentType === undefined) {
                throw new base_1.RequiredError('fulfillmentType', 'Required parameter fulfillmentType was null or undefined when calling findFulfillmentOptionsUsingGET3.');
            }
            const localVarPath = `/shipping/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (fulfillmentType !== undefined) {
                localVarQueryParameter['fulfillmentType'] = fulfillmentType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingDELETE3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingDELETE3.');
            }
            const localVarPath = `/shipping/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingGET3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingGET3.');
            }
            const localVarPath = `/shipping/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingHEAD3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingHEAD3.');
            }
            const localVarPath = `/shipping/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingOPTIONS3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingOPTIONS3.');
            }
            const localVarPath = `/shipping/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'OPTIONS' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPATCH3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingPATCH3.');
            }
            const localVarPath = `/shipping/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPOST3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingPOST3.');
            }
            const localVarPath = `/shipping/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPUT3: (cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getFulfillmentEstimationsUsingPUT3.');
            }
            const localVarPath = `/shipping/{cartId}/estimate`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeAllFulfillmentGroupsFromOrder
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFulfillmentGroupsFromOrderUsingDELETE3: (cartId, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeAllFulfillmentGroupsFromOrderUsingDELETE3.');
            }
            const localVarPath = `/shipping/{cartId}/groups`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeFulfillmentGroupFromOrder
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFulfillmentGroupFromOrderUsingDELETE3: (fulfillmentGroupId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling removeFulfillmentGroupFromOrderUsingDELETE3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeFulfillmentGroupFromOrderUsingDELETE3.');
            }
            const localVarPath = `/shipping/{cartId}/group/{fulfillmentGroupId}`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeOrderItemFromFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrderItemFromFulfillmentGroupUsingDELETE3: (fulfillmentGroupId, itemId, cartId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling removeOrderItemFromFulfillmentGroupUsingDELETE3.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeOrderItemFromFulfillmentGroupUsingDELETE3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling removeOrderItemFromFulfillmentGroupUsingDELETE3.');
            }
            const localVarPath = `/shipping/{cartId}/group/{fulfillmentGroupId}/item/{itemId}`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {AddressWrapper} address address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT3: (fulfillmentGroupId, cartId, address, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling updateFulfillmentGroupAddressUsingPUT3.');
            }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateFulfillmentGroupAddressUsingPUT3.');
            }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new base_1.RequiredError('address', 'Required parameter address was null or undefined when calling updateFulfillmentGroupAddressUsingPUT3.');
            }
            const localVarPath = `/shipping/{cartId}/{fulfillmentGroupId}/address`
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)))
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof address !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(address !== undefined ? address : {}) : (address || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateFulfillmentGroup
         * @param {number} cartId cartId
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupUsingPATCH3: (cartId, fulfillmentGroupId, wrapper, priceOrder, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new base_1.RequiredError('cartId', 'Required parameter cartId was null or undefined when calling updateFulfillmentGroupUsingPATCH3.');
            }
            // verify required parameter 'fulfillmentGroupId' is not null or undefined
            if (fulfillmentGroupId === null || fulfillmentGroupId === undefined) {
                throw new base_1.RequiredError('fulfillmentGroupId', 'Required parameter fulfillmentGroupId was null or undefined when calling updateFulfillmentGroupUsingPATCH3.');
            }
            // verify required parameter 'wrapper' is not null or undefined
            if (wrapper === null || wrapper === undefined) {
                throw new base_1.RequiredError('wrapper', 'Required parameter wrapper was null or undefined when calling updateFulfillmentGroupUsingPATCH3.');
            }
            const localVarPath = `/shipping/{cartId}/group/{fulfillmentGroupId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"fulfillmentGroupId"}}`, encodeURIComponent(String(fulfillmentGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (priceOrder !== undefined) {
                localVarQueryParameter['priceOrder'] = priceOrder;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof wrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(wrapper !== undefined ? wrapper : {}) : (wrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FulfillmentEndpointApi - functional programming interface
 * @export
 */
exports.FulfillmentEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addFulfillmentGroupToOrder
         * @param {number} cartId cartId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentGroupToOrderUsingPOST3(cartId, wrapper, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).addFulfillmentGroupToOrderUsingPOST3(cartId, wrapper, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addFulfillmentOptionToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} fulfillmentOptionId fulfillmentOptionId
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addItemToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {FulfillmentGroupItemWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId, cartId, wrapper, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId, cartId, wrapper, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findFulfillmentGroupsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentGroupsForOrderUsingGET3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findFulfillmentGroupsForOrderUsingGET3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findFulfillmentOptions
         * @param {string} fulfillmentType fulfillmentType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentOptionsUsingGET3(fulfillmentType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).findFulfillmentOptionsUsingGET3(fulfillmentType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingDELETE3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingDELETE3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingGET3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingGET3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingHEAD3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingHEAD3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingOPTIONS3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingOPTIONS3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPATCH3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingPATCH3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPOST3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingPOST3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPUT3(cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).getFulfillmentEstimationsUsingPUT3(cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeAllFulfillmentGroupsFromOrder
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeFulfillmentGroupFromOrder
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeOrderItemFromFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId, itemId, cartId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId, itemId, cartId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {AddressWrapper} address address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId, cartId, address, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId, cartId, address, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateFulfillmentGroup
         * @param {number} cartId cartId
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupUsingPATCH3(cartId, fulfillmentGroupId, wrapper, priceOrder, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FulfillmentEndpointApiAxiosParamCreator(configuration).updateFulfillmentGroupUsingPATCH3(cartId, fulfillmentGroupId, wrapper, priceOrder, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * FulfillmentEndpointApi - factory interface
 * @export
 */
exports.FulfillmentEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addFulfillmentGroupToOrder
         * @param {number} cartId cartId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentGroupToOrderUsingPOST3(cartId, wrapper, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).addFulfillmentGroupToOrderUsingPOST3(cartId, wrapper, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addFulfillmentOptionToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} fulfillmentOptionId fulfillmentOptionId
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addItemToFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {FulfillmentGroupItemWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId, cartId, wrapper, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId, cartId, wrapper, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findFulfillmentGroupsForOrder
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentGroupsForOrderUsingGET3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).findFulfillmentGroupsForOrderUsingGET3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findFulfillmentOptions
         * @param {string} fulfillmentType fulfillmentType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFulfillmentOptionsUsingGET3(fulfillmentType, options) {
            return exports.FulfillmentEndpointApiFp(configuration).findFulfillmentOptionsUsingGET3(fulfillmentType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingDELETE3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingDELETE3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingGET3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingGET3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingHEAD3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingHEAD3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingOPTIONS3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingOPTIONS3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPATCH3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingPATCH3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPOST3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingPOST3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getFulfillmentEstimations
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentEstimationsUsingPUT3(cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).getFulfillmentEstimationsUsingPUT3(cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeAllFulfillmentGroupsFromOrder
         * @param {number} cartId cartId
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId, priceOrder, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeFulfillmentGroupFromOrder
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId, cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId, cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeOrderItemFromFulfillmentGroup
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} itemId itemId
         * @param {number} cartId cartId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId, itemId, cartId, options) {
            return exports.FulfillmentEndpointApiFp(configuration).removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId, itemId, cartId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateFulfillmentGroupAddress
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {number} cartId cartId
         * @param {AddressWrapper} address address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId, cartId, address, options) {
            return exports.FulfillmentEndpointApiFp(configuration).updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId, cartId, address, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateFulfillmentGroup
         * @param {number} cartId cartId
         * @param {number} fulfillmentGroupId fulfillmentGroupId
         * @param {FulfillmentGroupWrapper} wrapper wrapper
         * @param {boolean} [priceOrder] priceOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentGroupUsingPATCH3(cartId, fulfillmentGroupId, wrapper, priceOrder, options) {
            return exports.FulfillmentEndpointApiFp(configuration).updateFulfillmentGroupUsingPATCH3(cartId, fulfillmentGroupId, wrapper, priceOrder, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FulfillmentEndpointApi - object-oriented interface
 * @export
 * @class FulfillmentEndpointApi
 * @extends {BaseAPI}
 */
class FulfillmentEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentGroupToOrderUsingPOST3(cartId, wrapper, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).addFulfillmentGroupToOrderUsingPOST3(cartId, wrapper, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId, fulfillmentOptionId, cartId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId, cartId, wrapper, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId, cartId, wrapper, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentGroupsForOrderUsingGET3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findFulfillmentGroupsForOrderUsingGET3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentOptionsUsingGET3(fulfillmentType, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).findFulfillmentOptionsUsingGET3(fulfillmentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingDELETE3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingDELETE3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingGET3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingGET3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingHEAD3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingHEAD3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingOPTIONS3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingOPTIONS3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingPATCH3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingPATCH3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingPOST3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingPOST3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingPUT3(cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).getFulfillmentEstimationsUsingPUT3(cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId, cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId, itemId, cartId, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId, itemId, cartId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId, cartId, address, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId, cartId, address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupUsingPATCH3(cartId, fulfillmentGroupId, wrapper, priceOrder, options) {
        return exports.FulfillmentEndpointApiFp(this.configuration).updateFulfillmentGroupUsingPATCH3(cartId, fulfillmentGroupId, wrapper, priceOrder, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FulfillmentEndpointApi = FulfillmentEndpointApi;
/**
 * HealthMvcEndpointApi - axios parameter creator
 * @export
 */
exports.HealthMvcEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET81: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/health`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET83: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/health.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * HealthMvcEndpointApi - functional programming interface
 * @export
 */
exports.HealthMvcEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET81(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.HealthMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET81(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET83(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.HealthMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET83(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * HealthMvcEndpointApi - factory interface
 * @export
 */
exports.HealthMvcEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET81(options) {
            return exports.HealthMvcEndpointApiFp(configuration).invokeUsingGET81(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET83(options) {
            return exports.HealthMvcEndpointApiFp(configuration).invokeUsingGET83(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * HealthMvcEndpointApi - object-oriented interface
 * @export
 * @class HealthMvcEndpointApi
 * @extends {BaseAPI}
 */
class HealthMvcEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMvcEndpointApi
     */
    invokeUsingGET81(options) {
        return exports.HealthMvcEndpointApiFp(this.configuration).invokeUsingGET81(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMvcEndpointApi
     */
    invokeUsingGET83(options) {
        return exports.HealthMvcEndpointApiFp(this.configuration).invokeUsingGET83(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HealthMvcEndpointApi = HealthMvcEndpointApi;
/**
 * HeapdumpMvcEndpointApi - axios parameter creator
 * @export
 */
exports.HeapdumpMvcEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {boolean} [live] live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET85: (live, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/heapdump`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {boolean} [live] live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET87: (live, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/heapdump.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * HeapdumpMvcEndpointApi - functional programming interface
 * @export
 */
exports.HeapdumpMvcEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {boolean} [live] live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET85(live, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.HeapdumpMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET85(live, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {boolean} [live] live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET87(live, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.HeapdumpMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET87(live, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * HeapdumpMvcEndpointApi - factory interface
 * @export
 */
exports.HeapdumpMvcEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary invoke
         * @param {boolean} [live] live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET85(live, options) {
            return exports.HeapdumpMvcEndpointApiFp(configuration).invokeUsingGET85(live, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {boolean} [live] live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET87(live, options) {
            return exports.HeapdumpMvcEndpointApiFp(configuration).invokeUsingGET87(live, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * HeapdumpMvcEndpointApi - object-oriented interface
 * @export
 * @class HeapdumpMvcEndpointApi
 * @extends {BaseAPI}
 */
class HeapdumpMvcEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeapdumpMvcEndpointApi
     */
    invokeUsingGET85(live, options) {
        return exports.HeapdumpMvcEndpointApiFp(this.configuration).invokeUsingGET85(live, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeapdumpMvcEndpointApi
     */
    invokeUsingGET87(live, options) {
        return exports.HeapdumpMvcEndpointApiFp(this.configuration).invokeUsingGET87(live, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HeapdumpMvcEndpointApi = HeapdumpMvcEndpointApi;
/**
 * LoggersMvcEndpointApi - axios parameter creator
 * @export
 */
exports.LoggersMvcEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary get
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET3: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling getUsingGET3.');
            }
            const localVarPath = `/loggers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET89: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/loggers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET91: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/loggers.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary set
         * @param {string} name name
         * @param {{ [key: string]: string; }} configuration configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUsingPOST3: (name, configuration, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling setUsingPOST3.');
            }
            // verify required parameter 'configuration' is not null or undefined
            if (configuration === null || configuration === undefined) {
                throw new base_1.RequiredError('configuration', 'Required parameter configuration was null or undefined when calling setUsingPOST3.');
            }
            const localVarPath = `/loggers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof configuration !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(configuration !== undefined ? configuration : {}) : (configuration || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * LoggersMvcEndpointApi - functional programming interface
 * @export
 */
exports.LoggersMvcEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary get
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET3(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.LoggersMvcEndpointApiAxiosParamCreator(configuration).getUsingGET3(name, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET89(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.LoggersMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET89(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET91(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.LoggersMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET91(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary set
         * @param {string} name name
         * @param {{ [key: string]: string; }} configuration configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUsingPOST3(name, configuration, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.LoggersMvcEndpointApiAxiosParamCreator(configuration).setUsingPOST3(name, configuration, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * LoggersMvcEndpointApi - factory interface
 * @export
 */
exports.LoggersMvcEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary get
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET3(name, options) {
            return exports.LoggersMvcEndpointApiFp(configuration).getUsingGET3(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET89(options) {
            return exports.LoggersMvcEndpointApiFp(configuration).invokeUsingGET89(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET91(options) {
            return exports.LoggersMvcEndpointApiFp(configuration).invokeUsingGET91(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary set
         * @param {string} name name
         * @param {{ [key: string]: string; }} configuration configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUsingPOST3(name, configuration, options) {
            return exports.LoggersMvcEndpointApiFp(configuration).setUsingPOST3(name, configuration, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * LoggersMvcEndpointApi - object-oriented interface
 * @export
 * @class LoggersMvcEndpointApi
 * @extends {BaseAPI}
 */
class LoggersMvcEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary get
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    getUsingGET3(name, options) {
        return exports.LoggersMvcEndpointApiFp(this.configuration).getUsingGET3(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    invokeUsingGET89(options) {
        return exports.LoggersMvcEndpointApiFp(this.configuration).invokeUsingGET89(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    invokeUsingGET91(options) {
        return exports.LoggersMvcEndpointApiFp(this.configuration).invokeUsingGET91(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary set
     * @param {string} name name
     * @param {{ [key: string]: string; }} configuration configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    setUsingPOST3(name, configuration, options) {
        return exports.LoggersMvcEndpointApiFp(this.configuration).setUsingPOST3(name, configuration, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LoggersMvcEndpointApi = LoggersMvcEndpointApi;
/**
 * MetricsMvcEndpointApi - axios parameter creator
 * @export
 */
exports.MetricsMvcEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET93: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/metrics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET95: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/metrics.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary value
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueUsingGET7: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling valueUsingGET7.');
            }
            const localVarPath = `/metrics/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * MetricsMvcEndpointApi - functional programming interface
 * @export
 */
exports.MetricsMvcEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET93(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MetricsMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET93(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET95(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MetricsMvcEndpointApiAxiosParamCreator(configuration).invokeUsingGET95(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary value
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueUsingGET7(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.MetricsMvcEndpointApiAxiosParamCreator(configuration).valueUsingGET7(name, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * MetricsMvcEndpointApi - factory interface
 * @export
 */
exports.MetricsMvcEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET93(options) {
            return exports.MetricsMvcEndpointApiFp(configuration).invokeUsingGET93(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary invoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeUsingGET95(options) {
            return exports.MetricsMvcEndpointApiFp(configuration).invokeUsingGET95(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary value
         * @param {string} name name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueUsingGET7(name, options) {
            return exports.MetricsMvcEndpointApiFp(configuration).valueUsingGET7(name, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * MetricsMvcEndpointApi - object-oriented interface
 * @export
 * @class MetricsMvcEndpointApi
 * @extends {BaseAPI}
 */
class MetricsMvcEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsMvcEndpointApi
     */
    invokeUsingGET93(options) {
        return exports.MetricsMvcEndpointApiFp(this.configuration).invokeUsingGET93(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsMvcEndpointApi
     */
    invokeUsingGET95(options) {
        return exports.MetricsMvcEndpointApiFp(this.configuration).invokeUsingGET95(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsMvcEndpointApi
     */
    valueUsingGET7(name, options) {
        return exports.MetricsMvcEndpointApiFp(this.configuration).valueUsingGET7(name, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MetricsMvcEndpointApi = MetricsMvcEndpointApi;
/**
 * OrderHistoryEndpointApi - axios parameter creator
 * @export
 */
exports.OrderHistoryEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findAllOrdersForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOrdersForCustomerUsingGET3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders/summary`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findOrderById
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrderByIdUsingGET3: (orderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new base_1.RequiredError('orderId', 'Required parameter orderId was null or undefined when calling findOrderByIdUsingGET3.');
            }
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary findOrdersForCustomer
         * @param {string} [orderStatus] orderStatus
         * @param {string} [orderNumber] orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrdersForCustomerUsingGET3: (orderStatus, orderNumber, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/orders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (orderStatus !== undefined) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }
            if (orderNumber !== undefined) {
                localVarQueryParameter['orderNumber'] = orderNumber;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrderHistoryEndpointApi - functional programming interface
 * @export
 */
exports.OrderHistoryEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findAllOrdersForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOrdersForCustomerUsingGET3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderHistoryEndpointApiAxiosParamCreator(configuration).findAllOrdersForCustomerUsingGET3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findOrderById
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrderByIdUsingGET3(orderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderHistoryEndpointApiAxiosParamCreator(configuration).findOrderByIdUsingGET3(orderId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary findOrdersForCustomer
         * @param {string} [orderStatus] orderStatus
         * @param {string} [orderNumber] orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrdersForCustomerUsingGET3(orderStatus, orderNumber, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.OrderHistoryEndpointApiAxiosParamCreator(configuration).findOrdersForCustomerUsingGET3(orderStatus, orderNumber, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * OrderHistoryEndpointApi - factory interface
 * @export
 */
exports.OrderHistoryEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findAllOrdersForCustomer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllOrdersForCustomerUsingGET3(options) {
            return exports.OrderHistoryEndpointApiFp(configuration).findAllOrdersForCustomerUsingGET3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findOrderById
         * @param {number} orderId orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrderByIdUsingGET3(orderId, options) {
            return exports.OrderHistoryEndpointApiFp(configuration).findOrderByIdUsingGET3(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary findOrdersForCustomer
         * @param {string} [orderStatus] orderStatus
         * @param {string} [orderNumber] orderNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOrdersForCustomerUsingGET3(orderStatus, orderNumber, options) {
            return exports.OrderHistoryEndpointApiFp(configuration).findOrdersForCustomerUsingGET3(orderStatus, orderNumber, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrderHistoryEndpointApi - object-oriented interface
 * @export
 * @class OrderHistoryEndpointApi
 * @extends {BaseAPI}
 */
class OrderHistoryEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findAllOrdersForCustomerUsingGET3(options) {
        return exports.OrderHistoryEndpointApiFp(this.configuration).findAllOrdersForCustomerUsingGET3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrderByIdUsingGET3(orderId, options) {
        return exports.OrderHistoryEndpointApiFp(this.configuration).findOrderByIdUsingGET3(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrdersForCustomerUsingGET3(orderStatus, orderNumber, options) {
        return exports.OrderHistoryEndpointApiFp(this.configuration).findOrdersForCustomerUsingGET3(orderStatus, orderNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrderHistoryEndpointApi = OrderHistoryEndpointApi;
/**
 * PreviewTemplateControllerApi - axios parameter creator
 * @export
 */
exports.PreviewTemplateControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingDELETE3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingGET3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingHEAD3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingOPTIONS3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'OPTIONS' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPATCH3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPOST3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPUT3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/preview/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PreviewTemplateControllerApi - functional programming interface
 * @export
 */
exports.PreviewTemplateControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingDELETE3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingDELETE3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingGET3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingGET3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingHEAD3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingHEAD3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingOPTIONS3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingOPTIONS3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPATCH3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingPATCH3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPOST3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingPOST3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPUT3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PreviewTemplateControllerApiAxiosParamCreator(configuration).displayPreviewUsingPUT3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PreviewTemplateControllerApi - factory interface
 * @export
 */
exports.PreviewTemplateControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingDELETE3(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingDELETE3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingGET3(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingGET3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingHEAD3(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingHEAD3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingOPTIONS3(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingOPTIONS3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPATCH3(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingPATCH3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPOST3(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingPOST3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary displayPreview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayPreviewUsingPUT3(options) {
            return exports.PreviewTemplateControllerApiFp(configuration).displayPreviewUsingPUT3(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PreviewTemplateControllerApi - object-oriented interface
 * @export
 * @class PreviewTemplateControllerApi
 * @extends {BaseAPI}
 */
class PreviewTemplateControllerApi extends base_1.BaseAPI {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingDELETE3(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingDELETE3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingGET3(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingGET3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingHEAD3(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingHEAD3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingOPTIONS3(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingOPTIONS3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPATCH3(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingPATCH3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPOST3(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingPOST3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPUT3(options) {
        return exports.PreviewTemplateControllerApiFp(this.configuration).displayPreviewUsingPUT3(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PreviewTemplateControllerApi = PreviewTemplateControllerApi;
/**
 * PromotionMessageEndpointApi - axios parameter creator
 * @export
 */
exports.PromotionMessageEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary findPromotionMessagesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPromotionMessagesForProductUsingGET3: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling findPromotionMessagesForProductUsingGET3.');
            }
            const localVarPath = `/promotion-messages/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PromotionMessageEndpointApi - functional programming interface
 * @export
 */
exports.PromotionMessageEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findPromotionMessagesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPromotionMessagesForProductUsingGET3(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PromotionMessageEndpointApiAxiosParamCreator(configuration).findPromotionMessagesForProductUsingGET3(productId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PromotionMessageEndpointApi - factory interface
 * @export
 */
exports.PromotionMessageEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findPromotionMessagesForProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPromotionMessagesForProductUsingGET3(productId, options) {
            return exports.PromotionMessageEndpointApiFp(configuration).findPromotionMessagesForProductUsingGET3(productId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PromotionMessageEndpointApi - object-oriented interface
 * @export
 * @class PromotionMessageEndpointApi
 * @extends {BaseAPI}
 */
class PromotionMessageEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionMessageEndpointApi
     */
    findPromotionMessagesForProductUsingGET3(productId, options) {
        return exports.PromotionMessageEndpointApiFp(this.configuration).findPromotionMessagesForProductUsingGET3(productId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PromotionMessageEndpointApi = PromotionMessageEndpointApi;
/**
 * RatingEndpointApi - axios parameter creator
 * @export
 */
exports.RatingEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingDELETE3: (itemId, ratingType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling getRatingsForItemUsingDELETE3.');
            }
            const localVarPath = `/ratings/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (ratingType !== undefined) {
                localVarQueryParameter['ratingType'] = ratingType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingGET3: (itemId, ratingType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling getRatingsForItemUsingGET3.');
            }
            const localVarPath = `/ratings/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (ratingType !== undefined) {
                localVarQueryParameter['ratingType'] = ratingType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingHEAD3: (itemId, ratingType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling getRatingsForItemUsingHEAD3.');
            }
            const localVarPath = `/ratings/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (ratingType !== undefined) {
                localVarQueryParameter['ratingType'] = ratingType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingOPTIONS3: (itemId, ratingType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling getRatingsForItemUsingOPTIONS3.');
            }
            const localVarPath = `/ratings/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'OPTIONS' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (ratingType !== undefined) {
                localVarQueryParameter['ratingType'] = ratingType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingPATCH3: (itemId, ratingType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling getRatingsForItemUsingPATCH3.');
            }
            const localVarPath = `/ratings/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (ratingType !== undefined) {
                localVarQueryParameter['ratingType'] = ratingType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingPUT3: (itemId, ratingType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling getRatingsForItemUsingPUT3.');
            }
            const localVarPath = `/ratings/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (ratingType !== undefined) {
                localVarQueryParameter['ratingType'] = ratingType;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary submitReviewForItem
         * @param {string} itemId itemId
         * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitReviewForItemUsingPOST3: (itemId, reviewDetailWrapper, ratingType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling submitReviewForItemUsingPOST3.');
            }
            // verify required parameter 'reviewDetailWrapper' is not null or undefined
            if (reviewDetailWrapper === null || reviewDetailWrapper === undefined) {
                throw new base_1.RequiredError('reviewDetailWrapper', 'Required parameter reviewDetailWrapper was null or undefined when calling submitReviewForItemUsingPOST3.');
            }
            const localVarPath = `/ratings/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (ratingType !== undefined) {
                localVarQueryParameter['ratingType'] = ratingType;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof reviewDetailWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(reviewDetailWrapper !== undefined ? reviewDetailWrapper : {}) : (reviewDetailWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RatingEndpointApi - functional programming interface
 * @export
 */
exports.RatingEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingDELETE3(itemId, ratingType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RatingEndpointApiAxiosParamCreator(configuration).getRatingsForItemUsingDELETE3(itemId, ratingType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingGET3(itemId, ratingType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RatingEndpointApiAxiosParamCreator(configuration).getRatingsForItemUsingGET3(itemId, ratingType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingHEAD3(itemId, ratingType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RatingEndpointApiAxiosParamCreator(configuration).getRatingsForItemUsingHEAD3(itemId, ratingType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingOPTIONS3(itemId, ratingType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RatingEndpointApiAxiosParamCreator(configuration).getRatingsForItemUsingOPTIONS3(itemId, ratingType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingPATCH3(itemId, ratingType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RatingEndpointApiAxiosParamCreator(configuration).getRatingsForItemUsingPATCH3(itemId, ratingType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingPUT3(itemId, ratingType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RatingEndpointApiAxiosParamCreator(configuration).getRatingsForItemUsingPUT3(itemId, ratingType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary submitReviewForItem
         * @param {string} itemId itemId
         * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitReviewForItemUsingPOST3(itemId, reviewDetailWrapper, ratingType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RatingEndpointApiAxiosParamCreator(configuration).submitReviewForItemUsingPOST3(itemId, reviewDetailWrapper, ratingType, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * RatingEndpointApi - factory interface
 * @export
 */
exports.RatingEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingDELETE3(itemId, ratingType, options) {
            return exports.RatingEndpointApiFp(configuration).getRatingsForItemUsingDELETE3(itemId, ratingType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingGET3(itemId, ratingType, options) {
            return exports.RatingEndpointApiFp(configuration).getRatingsForItemUsingGET3(itemId, ratingType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingHEAD3(itemId, ratingType, options) {
            return exports.RatingEndpointApiFp(configuration).getRatingsForItemUsingHEAD3(itemId, ratingType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingOPTIONS3(itemId, ratingType, options) {
            return exports.RatingEndpointApiFp(configuration).getRatingsForItemUsingOPTIONS3(itemId, ratingType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingPATCH3(itemId, ratingType, options) {
            return exports.RatingEndpointApiFp(configuration).getRatingsForItemUsingPATCH3(itemId, ratingType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getRatingsForItem
         * @param {string} itemId itemId
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingsForItemUsingPUT3(itemId, ratingType, options) {
            return exports.RatingEndpointApiFp(configuration).getRatingsForItemUsingPUT3(itemId, ratingType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary submitReviewForItem
         * @param {string} itemId itemId
         * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
         * @param {string} [ratingType] ratingType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitReviewForItemUsingPOST3(itemId, reviewDetailWrapper, ratingType, options) {
            return exports.RatingEndpointApiFp(configuration).submitReviewForItemUsingPOST3(itemId, reviewDetailWrapper, ratingType, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RatingEndpointApi - object-oriented interface
 * @export
 * @class RatingEndpointApi
 * @extends {BaseAPI}
 */
class RatingEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingDELETE3(itemId, ratingType, options) {
        return exports.RatingEndpointApiFp(this.configuration).getRatingsForItemUsingDELETE3(itemId, ratingType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingGET3(itemId, ratingType, options) {
        return exports.RatingEndpointApiFp(this.configuration).getRatingsForItemUsingGET3(itemId, ratingType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingHEAD3(itemId, ratingType, options) {
        return exports.RatingEndpointApiFp(this.configuration).getRatingsForItemUsingHEAD3(itemId, ratingType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingOPTIONS3(itemId, ratingType, options) {
        return exports.RatingEndpointApiFp(this.configuration).getRatingsForItemUsingOPTIONS3(itemId, ratingType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingPATCH3(itemId, ratingType, options) {
        return exports.RatingEndpointApiFp(this.configuration).getRatingsForItemUsingPATCH3(itemId, ratingType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingPUT3(itemId, ratingType, options) {
        return exports.RatingEndpointApiFp(this.configuration).getRatingsForItemUsingPUT3(itemId, ratingType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary submitReviewForItem
     * @param {string} itemId itemId
     * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    submitReviewForItemUsingPOST3(itemId, reviewDetailWrapper, ratingType, options) {
        return exports.RatingEndpointApiFp(this.configuration).submitReviewForItemUsingPOST3(itemId, reviewDetailWrapper, ratingType, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RatingEndpointApi = RatingEndpointApi;
/**
 * RelatedProductsEndpointApi - axios parameter creator
 * @export
 */
exports.RelatedProductsEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary getRelatedProducts
         * @param {number} [productId] productId
         * @param {string} [productKey] productKey
         * @param {number} [categoryId] categoryId
         * @param {string} [categoryKey] categoryKey
         * @param {number} [quantity] quantity
         * @param {string} [type] type
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProductsUsingGET3: (productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/related-products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }
            if (productKey !== undefined) {
                localVarQueryParameter['productKey'] = productKey;
            }
            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }
            if (categoryKey !== undefined) {
                localVarQueryParameter['categoryKey'] = categoryKey;
            }
            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (includePromotionMessages !== undefined) {
                localVarQueryParameter['includePromotionMessages'] = includePromotionMessages;
            }
            if (includePriceData !== undefined) {
                localVarQueryParameter['includePriceData'] = includePriceData;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RelatedProductsEndpointApi - functional programming interface
 * @export
 */
exports.RelatedProductsEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getRelatedProducts
         * @param {number} [productId] productId
         * @param {string} [productKey] productKey
         * @param {number} [categoryId] categoryId
         * @param {string} [categoryKey] categoryKey
         * @param {number} [quantity] quantity
         * @param {string} [type] type
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProductsUsingGET3(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.RelatedProductsEndpointApiAxiosParamCreator(configuration).getRelatedProductsUsingGET3(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * RelatedProductsEndpointApi - factory interface
 * @export
 */
exports.RelatedProductsEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getRelatedProducts
         * @param {number} [productId] productId
         * @param {string} [productKey] productKey
         * @param {number} [categoryId] categoryId
         * @param {string} [categoryKey] categoryKey
         * @param {number} [quantity] quantity
         * @param {string} [type] type
         * @param {boolean} [includePromotionMessages] includePromotionMessages
         * @param {boolean} [includePriceData] includePriceData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProductsUsingGET3(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options) {
            return exports.RelatedProductsEndpointApiFp(configuration).getRelatedProductsUsingGET3(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RelatedProductsEndpointApi - object-oriented interface
 * @export
 * @class RelatedProductsEndpointApi
 * @extends {BaseAPI}
 */
class RelatedProductsEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatedProductsEndpointApi
     */
    getRelatedProductsUsingGET3(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options) {
        return exports.RelatedProductsEndpointApiFp(this.configuration).getRelatedProductsUsingGET3(productId, productKey, categoryId, categoryKey, quantity, type, includePromotionMessages, includePriceData, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RelatedProductsEndpointApi = RelatedProductsEndpointApi;
/**
 * SwaggerDocsReloadEndpointApi - axios parameter creator
 * @export
 */
exports.SwaggerDocsReloadEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingDELETE3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/docsreload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingGET3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/docsreload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingHEAD3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/docsreload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'HEAD' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingOPTIONS3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/docsreload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'OPTIONS' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPATCH3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/docsreload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPOST3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/docsreload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPUT3: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/docsreload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SwaggerDocsReloadEndpointApi - functional programming interface
 * @export
 */
exports.SwaggerDocsReloadEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingDELETE3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SwaggerDocsReloadEndpointApiAxiosParamCreator(configuration).reloadUsingDELETE3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingGET3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SwaggerDocsReloadEndpointApiAxiosParamCreator(configuration).reloadUsingGET3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingHEAD3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SwaggerDocsReloadEndpointApiAxiosParamCreator(configuration).reloadUsingHEAD3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingOPTIONS3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SwaggerDocsReloadEndpointApiAxiosParamCreator(configuration).reloadUsingOPTIONS3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPATCH3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SwaggerDocsReloadEndpointApiAxiosParamCreator(configuration).reloadUsingPATCH3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPOST3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SwaggerDocsReloadEndpointApiAxiosParamCreator(configuration).reloadUsingPOST3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPUT3(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SwaggerDocsReloadEndpointApiAxiosParamCreator(configuration).reloadUsingPUT3(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * SwaggerDocsReloadEndpointApi - factory interface
 * @export
 */
exports.SwaggerDocsReloadEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingDELETE3(options) {
            return exports.SwaggerDocsReloadEndpointApiFp(configuration).reloadUsingDELETE3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingGET3(options) {
            return exports.SwaggerDocsReloadEndpointApiFp(configuration).reloadUsingGET3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingHEAD3(options) {
            return exports.SwaggerDocsReloadEndpointApiFp(configuration).reloadUsingHEAD3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingOPTIONS3(options) {
            return exports.SwaggerDocsReloadEndpointApiFp(configuration).reloadUsingOPTIONS3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPATCH3(options) {
            return exports.SwaggerDocsReloadEndpointApiFp(configuration).reloadUsingPATCH3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPOST3(options) {
            return exports.SwaggerDocsReloadEndpointApiFp(configuration).reloadUsingPOST3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hot-reloads the Swagger documentation in the running context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reloadUsingPUT3(options) {
            return exports.SwaggerDocsReloadEndpointApiFp(configuration).reloadUsingPUT3(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SwaggerDocsReloadEndpointApi - object-oriented interface
 * @export
 * @class SwaggerDocsReloadEndpointApi
 * @extends {BaseAPI}
 */
class SwaggerDocsReloadEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingDELETE3(options) {
        return exports.SwaggerDocsReloadEndpointApiFp(this.configuration).reloadUsingDELETE3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingGET3(options) {
        return exports.SwaggerDocsReloadEndpointApiFp(this.configuration).reloadUsingGET3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingHEAD3(options) {
        return exports.SwaggerDocsReloadEndpointApiFp(this.configuration).reloadUsingHEAD3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingOPTIONS3(options) {
        return exports.SwaggerDocsReloadEndpointApiFp(this.configuration).reloadUsingOPTIONS3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingPATCH3(options) {
        return exports.SwaggerDocsReloadEndpointApiFp(this.configuration).reloadUsingPATCH3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingPOST3(options) {
        return exports.SwaggerDocsReloadEndpointApiFp(this.configuration).reloadUsingPOST3(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingPUT3(options) {
        return exports.SwaggerDocsReloadEndpointApiFp(this.configuration).reloadUsingPUT3(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SwaggerDocsReloadEndpointApi = SwaggerDocsReloadEndpointApi;
/**
 * WishlistEndpointApi - axios parameter creator
 * @export
 */
exports.WishlistEndpointApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary addConfigureItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfigureItemToWishlistUsingPOST3: (wishlistName, orderItemWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling addConfigureItemToWishlistUsingPOST3.');
            }
            // verify required parameter 'orderItemWrapper' is not null or undefined
            if (orderItemWrapper === null || orderItemWrapper === undefined) {
                throw new base_1.RequiredError('orderItemWrapper', 'Required parameter orderItemWrapper was null or undefined when calling addConfigureItemToWishlistUsingPOST3.');
            }
            const localVarPath = `/wishlist/configure-item`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItemWrapper !== undefined ? orderItemWrapper : {}) : (orderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary addItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToWishlistUsingPOST3: (wishlistName, orderItemWrapper, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling addItemToWishlistUsingPOST3.');
            }
            // verify required parameter 'orderItemWrapper' is not null or undefined
            if (orderItemWrapper === null || orderItemWrapper === undefined) {
                throw new base_1.RequiredError('orderItemWrapper', 'Required parameter orderItemWrapper was null or undefined when calling addItemToWishlistUsingPOST3.');
            }
            const localVarPath = `/wishlist/item`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof orderItemWrapper !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(orderItemWrapper !== undefined ? orderItemWrapper : {}) : (orderItemWrapper || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getWishlist
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWishlistUsingGET3: (wishlistName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling getWishlistUsingGET3.');
            }
            const localVarPath = `/wishlist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary moveItemToCart
         * @param {string} wishlistName wishlistName
         * @param {string} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItemToCartUsingPOST3: (wishlistName, itemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling moveItemToCartUsingPOST3.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling moveItemToCartUsingPOST3.');
            }
            const localVarPath = `/wishlist/items/{itemId}/move`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary moveListToCart
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveListToCartUsingPOST3: (wishlistName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling moveListToCartUsingPOST3.');
            }
            const localVarPath = `/wishlist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary removeItemFromWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromWishlistUsingDELETE3: (wishlistName, itemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling removeItemFromWishlistUsingDELETE3.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling removeItemFromWishlistUsingDELETE3.');
            }
            const localVarPath = `/wishlist/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary updateQuantityInWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantityInWishlistUsingPUT3: (wishlistName, itemId, quantity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wishlistName' is not null or undefined
            if (wishlistName === null || wishlistName === undefined) {
                throw new base_1.RequiredError('wishlistName', 'Required parameter wishlistName was null or undefined when calling updateQuantityInWishlistUsingPUT3.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new base_1.RequiredError('itemId', 'Required parameter itemId was null or undefined when calling updateQuantityInWishlistUsingPUT3.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new base_1.RequiredError('quantity', 'Required parameter quantity was null or undefined when calling updateQuantityInWishlistUsingPUT3.');
            }
            const localVarPath = `/wishlist/items/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }
            if (wishlistName !== undefined) {
                localVarQueryParameter['wishlistName'] = wishlistName;
            }
            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * WishlistEndpointApi - functional programming interface
 * @export
 */
exports.WishlistEndpointApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addConfigureItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfigureItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).addConfigureItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary addItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).addItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary getWishlist
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWishlistUsingGET3(wishlistName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).getWishlistUsingGET3(wishlistName, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary moveItemToCart
         * @param {string} wishlistName wishlistName
         * @param {string} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItemToCartUsingPOST3(wishlistName, itemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).moveItemToCartUsingPOST3(wishlistName, itemId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary moveListToCart
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveListToCartUsingPOST3(wishlistName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).moveListToCartUsingPOST3(wishlistName, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary removeItemFromWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromWishlistUsingDELETE3(wishlistName, itemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).removeItemFromWishlistUsingDELETE3(wishlistName, itemId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @summary updateQuantityInWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantityInWishlistUsingPUT3(wishlistName, itemId, quantity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.WishlistEndpointApiAxiosParamCreator(configuration).updateQuantityInWishlistUsingPUT3(wishlistName, itemId, quantity, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * WishlistEndpointApi - factory interface
 * @export
 */
exports.WishlistEndpointApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addConfigureItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addConfigureItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options) {
            return exports.WishlistEndpointApiFp(configuration).addConfigureItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary addItemToWishlist
         * @param {string} wishlistName wishlistName
         * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options) {
            return exports.WishlistEndpointApiFp(configuration).addItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getWishlist
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWishlistUsingGET3(wishlistName, options) {
            return exports.WishlistEndpointApiFp(configuration).getWishlistUsingGET3(wishlistName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary moveItemToCart
         * @param {string} wishlistName wishlistName
         * @param {string} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveItemToCartUsingPOST3(wishlistName, itemId, options) {
            return exports.WishlistEndpointApiFp(configuration).moveItemToCartUsingPOST3(wishlistName, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary moveListToCart
         * @param {string} wishlistName wishlistName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveListToCartUsingPOST3(wishlistName, options) {
            return exports.WishlistEndpointApiFp(configuration).moveListToCartUsingPOST3(wishlistName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary removeItemFromWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromWishlistUsingDELETE3(wishlistName, itemId, options) {
            return exports.WishlistEndpointApiFp(configuration).removeItemFromWishlistUsingDELETE3(wishlistName, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary updateQuantityInWishlist
         * @param {string} wishlistName wishlistName
         * @param {number} itemId itemId
         * @param {number} quantity quantity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuantityInWishlistUsingPUT3(wishlistName, itemId, quantity, options) {
            return exports.WishlistEndpointApiFp(configuration).updateQuantityInWishlistUsingPUT3(wishlistName, itemId, quantity, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * WishlistEndpointApi - object-oriented interface
 * @export
 * @class WishlistEndpointApi
 * @extends {BaseAPI}
 */
class WishlistEndpointApi extends base_1.BaseAPI {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addConfigureItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options) {
        return exports.WishlistEndpointApiFp(this.configuration).addConfigureItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options) {
        return exports.WishlistEndpointApiFp(this.configuration).addItemToWishlistUsingPOST3(wishlistName, orderItemWrapper, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    getWishlistUsingGET3(wishlistName, options) {
        return exports.WishlistEndpointApiFp(this.configuration).getWishlistUsingGET3(wishlistName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveItemToCartUsingPOST3(wishlistName, itemId, options) {
        return exports.WishlistEndpointApiFp(this.configuration).moveItemToCartUsingPOST3(wishlistName, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveListToCartUsingPOST3(wishlistName, options) {
        return exports.WishlistEndpointApiFp(this.configuration).moveListToCartUsingPOST3(wishlistName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    removeItemFromWishlistUsingDELETE3(wishlistName, itemId, options) {
        return exports.WishlistEndpointApiFp(this.configuration).removeItemFromWishlistUsingDELETE3(wishlistName, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    updateQuantityInWishlistUsingPUT3(wishlistName, itemId, quantity, options) {
        return exports.WishlistEndpointApiFp(this.configuration).updateQuantityInWishlistUsingPUT3(wishlistName, itemId, quantity, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.WishlistEndpointApi = WishlistEndpointApi;

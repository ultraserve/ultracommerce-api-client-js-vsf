/**
 * UltraCommerce API
 * The UltraCommerce API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AddressWrapper
 */
export interface AddressWrapper {
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    addressLine1?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    addressLine2?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    addressLine3?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    companyName?: string;
    /**
     *
     * @type {CountryWrapper}
     * @memberof AddressWrapper
     */
    country?: CountryWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    firstName?: string;
    /**
     *
     * @type {number}
     * @memberof AddressWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof AddressWrapper
     */
    isBusiness?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AddressWrapper
     */
    isDefault?: boolean;
    /**
     *
     * @type {ISOCountryWrapper}
     * @memberof AddressWrapper
     */
    isoCountryAlpha2?: ISOCountryWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    isoCountrySubdivision?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    lastName?: string;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof AddressWrapper
     */
    phoneFax?: PhoneWrapper;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof AddressWrapper
     */
    phonePrimary?: PhoneWrapper;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof AddressWrapper
     */
    phoneSecondary?: PhoneWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    postalCode?: string;
    /**
     *
     * @type {StateWrapper}
     * @memberof AddressWrapper
     */
    state?: StateWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    stateProvinceRegion?: string;
}
/**
 *
 * @export
 * @interface AdjustmentWrapper
 */
export interface AdjustmentWrapper {
    /**
     *
     * @type {Money}
     * @memberof AdjustmentWrapper
     */
    adjustmentValue?: Money;
    /**
     *
     * @type {ApplicationContext}
     * @memberof AdjustmentWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {number}
     * @memberof AdjustmentWrapper
     */
    discountAmount?: number;
    /**
     *
     * @type {string}
     * @memberof AdjustmentWrapper
     */
    discountType?: string;
    /**
     *
     * @type {number}
     * @memberof AdjustmentWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof AdjustmentWrapper
     */
    marketingMessage?: string;
    /**
     *
     * @type {number}
     * @memberof AdjustmentWrapper
     */
    offerid?: number;
    /**
     *
     * @type {string}
     * @memberof AdjustmentWrapper
     */
    reason?: string;
}
/**
 *
 * @export
 * @interface ApplicationContext
 */
export interface ApplicationContext {
    /**
     *
     * @type {string}
     * @memberof ApplicationContext
     */
    applicationName?: string;
    /**
     *
     * @type {object}
     * @memberof ApplicationContext
     */
    autowireCapableBeanFactory?: object;
    /**
     *
     * @type {number}
     * @memberof ApplicationContext
     */
    beanDefinitionCount?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof ApplicationContext
     */
    beanDefinitionNames?: Array<string>;
    /**
     *
     * @type {ClassLoader}
     * @memberof ApplicationContext
     */
    classLoader?: ClassLoader;
    /**
     *
     * @type {string}
     * @memberof ApplicationContext
     */
    displayName?: string;
    /**
     *
     * @type {Environment}
     * @memberof ApplicationContext
     */
    environment?: Environment;
    /**
     *
     * @type {string}
     * @memberof ApplicationContext
     */
    id?: string;
    /**
     *
     * @type {ApplicationContext}
     * @memberof ApplicationContext
     */
    parent?: ApplicationContext;
    /**
     *
     * @type {object}
     * @memberof ApplicationContext
     */
    parentBeanFactory?: object;
    /**
     *
     * @type {number}
     * @memberof ApplicationContext
     */
    startupDate?: number;
}
/**
 *
 * @export
 * @interface BroadleafEnumerationTypeWrapper
 */
export interface BroadleafEnumerationTypeWrapper {
    /**
     *
     * @type {string}
     * @memberof BroadleafEnumerationTypeWrapper
     */
    friendlyName?: string;
    /**
     *
     * @type {string}
     * @memberof BroadleafEnumerationTypeWrapper
     */
    type?: string;
}
/**
 *
 * @export
 * @interface BulkResponseFulfillmentOrderWrapper
 */
export interface BulkResponseFulfillmentOrderWrapper {
    /**
     *
     * @type {string}
     * @memberof BulkResponseFulfillmentOrderWrapper
     */
    bulkToken?: string;
    /**
     *
     * @type {Array<FulfillmentOrderWrapper>}
     * @memberof BulkResponseFulfillmentOrderWrapper
     */
    items?: Array<FulfillmentOrderWrapper>;
}
/**
 *
 * @export
 * @interface BulkResponseOrderWrapper
 */
export interface BulkResponseOrderWrapper {
    /**
     *
     * @type {string}
     * @memberof BulkResponseOrderWrapper
     */
    bulkToken?: string;
    /**
     *
     * @type {Array<OrderWrapper>}
     * @memberof BulkResponseOrderWrapper
     */
    items?: Array<OrderWrapper>;
}
/**
 *
 * @export
 * @interface CancelRequestWrapper
 */
export interface CancelRequestWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof CancelRequestWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof CancelRequestWrapper
     */
    comment?: string;
    /**
     *
     * @type {string}
     * @memberof CancelRequestWrapper
     */
    fulfillmentOrderNumber?: string;
    /**
     *
     * @type {Array<FulfillmentOrderItemWrapper>}
     * @memberof CancelRequestWrapper
     */
    items?: Array<FulfillmentOrderItemWrapper>;
    /**
     *
     * @type {string}
     * @memberof CancelRequestWrapper
     */
    orderNumber?: string;
    /**
     *
     * @type {string}
     * @memberof CancelRequestWrapper
     */
    reason?: string;
}
/**
 *
 * @export
 * @interface CartMessageWrapper
 */
export interface CartMessageWrapper {
    /**
     *
     * @type {string}
     * @memberof CartMessageWrapper
     */
    errorCode?: string;
    /**
     *
     * @type {string}
     * @memberof CartMessageWrapper
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof CartMessageWrapper
     */
    messageType?: string;
    /**
     *
     * @type {number}
     * @memberof CartMessageWrapper
     */
    priority?: number;
}
/**
 *
 * @export
 * @interface CategoriesWrapper
 */
export interface CategoriesWrapper {
    /**
     *
     * @type {Array<CategoryWrapper>}
     * @memberof CategoriesWrapper
     */
    categories?: Array<CategoryWrapper>;
}
/**
 *
 * @export
 * @interface CategoryAttributeWrapper
 */
export interface CategoryAttributeWrapper {
    /**
     *
     * @type {string}
     * @memberof CategoryAttributeWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryAttributeWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {number}
     * @memberof CategoryAttributeWrapper
     */
    categoryId?: number;
    /**
     *
     * @type {number}
     * @memberof CategoryAttributeWrapper
     */
    id?: number;
}
/**
 *
 * @export
 * @interface CategoryWrapper
 */
export interface CategoryWrapper {
    /**
     *
     * @type {boolean}
     * @memberof CategoryWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    archived?: string;
    /**
     *
     * @type {Array<CategoryAttributeWrapper>}
     * @memberof CategoryWrapper
     */
    categoryAttributes?: Array<CategoryAttributeWrapper>;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof CategoryWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    name?: string;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof CategoryWrapper
     */
    products?: Array<ProductWrapper>;
    /**
     *
     * @type {Array<CategoryWrapper>}
     * @memberof CategoryWrapper
     */
    subcategories?: Array<CategoryWrapper>;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    urlKey?: string;
}
/**
 *
 * @export
 * @interface ChangePasswordForm
 */
export interface ChangePasswordForm {
    /**
     *
     * @type {string}
     * @memberof ChangePasswordForm
     */
    currentPassword?: string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordForm
     */
    newPassword?: string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordForm
     */
    newPasswordConfirm?: string;
}
/**
 *
 * @export
 * @interface ClassLoader
 */
export interface ClassLoader {
    /**
     *
     * @type {boolean}
     * @memberof ClassLoader
     */
    defaultAssertionStatus?: boolean;
    /**
     *
     * @type {ClassLoader}
     * @memberof ClassLoader
     */
    parent?: ClassLoader;
}
/**
 *
 * @export
 * @interface ConfigurableOrderItemWrapper
 */
export interface ConfigurableOrderItemWrapper {
    /**
     *
     * @type {Array<MapElementWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    additionalAttributes?: Array<MapElementWrapper>;
    /**
     *
     * @type {ApplicationContext}
     * @memberof ConfigurableOrderItemWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {Array<ConfigurableOrderItemWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    childOrderItems?: Array<ConfigurableOrderItemWrapper>;
    /**
     *
     * @type {Money}
     * @memberof ConfigurableOrderItemWrapper
     */
    displayPrice?: Money;
    /**
     *
     * @type {boolean}
     * @memberof ConfigurableOrderItemWrapper
     */
    hasConfigurationError?: boolean;
    /**
     *
     * @type {Array<OrderItemAttributeWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    itemAttributes?: Array<OrderItemAttributeWrapper>;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    maxQuantity?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    minQuantity?: number;
    /**
     *
     * @type {boolean}
     * @memberof ConfigurableOrderItemWrapper
     */
    multiSelect?: boolean;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    orderItemId?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    orderItemIndex?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    originalOrderItemId?: number;
    /**
     *
     * @type {Money}
     * @memberof ConfigurableOrderItemWrapper
     */
    overrideRetailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof ConfigurableOrderItemWrapper
     */
    overrideSalePrice?: Money;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    parentOrderItemId?: number;
    /**
     *
     * @type {ProductWrapper}
     * @memberof ConfigurableOrderItemWrapper
     */
    product?: ProductWrapper;
    /**
     *
     * @type {Array<ConfigurableOrderItemWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    productChoices?: Array<ConfigurableOrderItemWrapper>;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    productId?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    skuId?: number;
    /**
     *
     * @type {boolean}
     * @memberof ConfigurableOrderItemWrapper
     */
    updateRequest?: boolean;
}
/**
 *
 * @export
 * @interface CountryWrapper
 */
export interface CountryWrapper {
    /**
     *
     * @type {string}
     * @memberof CountryWrapper
     */
    abbreviation?: string;
    /**
     *
     * @type {string}
     * @memberof CountryWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface CustomerAddressWrapper
 */
export interface CustomerAddressWrapper {
    /**
     *
     * @type {AddressWrapper}
     * @memberof CustomerAddressWrapper
     */
    address?: AddressWrapper;
    /**
     *
     * @type {string}
     * @memberof CustomerAddressWrapper
     */
    addressName?: string;
    /**
     *
     * @type {ApplicationContext}
     * @memberof CustomerAddressWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof CustomerAddressWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerAddressWrapper
     */
    id?: number;
}
/**
 *
 * @export
 * @interface CustomerAttributeWrapper
 */
export interface CustomerAttributeWrapper {
    /**
     *
     * @type {number}
     * @memberof CustomerAttributeWrapper
     */
    customerId?: number;
    /**
     *
     * @type {number}
     * @memberof CustomerAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CustomerAttributeWrapper
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerAttributeWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CustomerPaymentWrapper
 */
export interface CustomerPaymentWrapper {
    /**
     *
     * @type {Array<MapElementWrapper>}
     * @memberof CustomerPaymentWrapper
     */
    additionalFields?: Array<MapElementWrapper>;
    /**
     *
     * @type {ApplicationContext}
     * @memberof CustomerPaymentWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {AddressWrapper}
     * @memberof CustomerPaymentWrapper
     */
    billingAddress?: AddressWrapper;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    cardName?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    cardType?: string;
    /**
     *
     * @type {CustomerWrapper}
     * @memberof CustomerPaymentWrapper
     */
    customer?: CustomerWrapper;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    expirationDate?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerPaymentWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof CustomerPaymentWrapper
     */
    isDefault?: boolean;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    lastFour?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    paymentGatewayType?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    paymentToken?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    paymentType?: string;
}
/**
 *
 * @export
 * @interface CustomerWrapper
 */
export interface CustomerWrapper {
    /**
     *
     * @type {Array<CustomerAttributeWrapper>}
     * @memberof CustomerWrapper
     */
    customerAttributes?: Array<CustomerAttributeWrapper>;
    /**
     *
     * @type {string}
     * @memberof CustomerWrapper
     */
    emailAddress?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerWrapper
     */
    firstName?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CustomerWrapper
     */
    lastName?: string;
    /**
     *
     * @type {boolean}
     * @memberof CustomerWrapper
     */
    registered?: boolean;
}
/**
 *
 * @export
 * @interface DimensionWrapper
 */
export interface DimensionWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof DimensionWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof DimensionWrapper
     */
    container?: string;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    depth?: number;
    /**
     *
     * @type {string}
     * @memberof DimensionWrapper
     */
    dimensionUnitOfMeasure?: string;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    girth?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    height?: number;
    /**
     *
     * @type {string}
     * @memberof DimensionWrapper
     */
    size?: string;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    width?: number;
}
/**
 *
 * @export
 * @interface DynamicSkuPricesWrapper
 */
export interface DynamicSkuPricesWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof DynamicSkuPricesWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {Money}
     * @memberof DynamicSkuPricesWrapper
     */
    priceAdjustment?: Money;
    /**
     *
     * @type {Money}
     * @memberof DynamicSkuPricesWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof DynamicSkuPricesWrapper
     */
    salePrice?: Money;
}
/**
 *
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     *
     * @type {Array<string>}
     * @memberof Environment
     */
    activeProfiles?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Environment
     */
    defaultProfiles?: Array<string>;
}
/**
 *
 * @export
 * @interface ErrorMessageWrapper
 */
export interface ErrorMessageWrapper {
    /**
     *
     * @type {string}
     * @memberof ErrorMessageWrapper
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorMessageWrapper
     */
    messageKey?: string;
}
/**
 *
 * @export
 * @interface ErrorWrapper
 */
export interface ErrorWrapper {
    /**
     *
     * @type {number}
     * @memberof ErrorWrapper
     */
    httpStatusCode?: number;
    /**
     *
     * @type {Array<ErrorMessageWrapper>}
     * @memberof ErrorWrapper
     */
    messages?: Array<ErrorMessageWrapper>;
}
/**
 *
 * @export
 * @interface FulfillmentEstimationWrapper
 */
export interface FulfillmentEstimationWrapper {
    /**
     *
     * @type {FulfillmentOptionWrapper}
     * @memberof FulfillmentEstimationWrapper
     */
    fulfillmentOption?: FulfillmentOptionWrapper;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentEstimationWrapper
     */
    price?: Money;
}
/**
 *
 * @export
 * @interface FulfillmentGroupItemWrapper
 */
export interface FulfillmentGroupItemWrapper {
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    fulfillmentGroupId?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    id?: number;
    /**
     *
     * @type {OrderItemWrapper}
     * @memberof FulfillmentGroupItemWrapper
     */
    orderItem?: OrderItemWrapper;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    orderItemId?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Array<TaxDetailWrapper>}
     * @memberof FulfillmentGroupItemWrapper
     */
    taxDetails?: Array<TaxDetailWrapper>;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentGroupItemWrapper
     */
    totalItemAmount?: Money;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentGroupItemWrapper
     */
    totalTax?: Money;
}
/**
 *
 * @export
 * @interface FulfillmentGroupWrapper
 */
export interface FulfillmentGroupWrapper {
    /**
     *
     * @type {AddressWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    address?: AddressWrapper;
    /**
     *
     * @type {Array<AdjustmentWrapper>}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentGroupAdjustments?: Array<AdjustmentWrapper>;
    /**
     *
     * @type {Array<FulfillmentGroupItemWrapper>}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentGroupItems?: Array<FulfillmentGroupItemWrapper>;
    /**
     *
     * @type {FulfillmentOptionWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentOption?: FulfillmentOptionWrapper;
    /**
     *
     * @type {BroadleafEnumerationTypeWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentType?: BroadleafEnumerationTypeWrapper;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupWrapper
     */
    orderId?: number;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    phone?: PhoneWrapper;
    /**
     *
     * @type {Array<TaxDetailWrapper>}
     * @memberof FulfillmentGroupWrapper
     */
    taxDetails?: Array<TaxDetailWrapper>;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentGroupWrapper
     */
    total?: Money;
}
/**
 *
 * @export
 * @interface FulfillmentLocationWrapper
 */
export interface FulfillmentLocationWrapper {
    /**
     *
     * @type {AddressWrapper}
     * @memberof FulfillmentLocationWrapper
     */
    address?: AddressWrapper;
    /**
     *
     * @type {boolean}
     * @memberof FulfillmentLocationWrapper
     */
    defaultLocation?: boolean;
    /**
     *
     * @type {string}
     * @memberof FulfillmentLocationWrapper
     */
    fulfillmentType?: string;
    /**
     *
     * @type {number}
     * @memberof FulfillmentLocationWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof FulfillmentLocationWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface FulfillmentOptionWrapper
 */
export interface FulfillmentOptionWrapper {
    /**
     *
     * @type {string}
     * @memberof FulfillmentOptionWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOptionWrapper
     */
    description?: string;
    /**
     *
     * @type {BroadleafEnumerationTypeWrapper}
     * @memberof FulfillmentOptionWrapper
     */
    fulfillmentType?: BroadleafEnumerationTypeWrapper;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOptionWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOptionWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface FulfillmentOrderAcknowledgementWrapper
 */
export interface FulfillmentOrderAcknowledgementWrapper {
    /**
     *
     * @type {boolean}
     * @memberof FulfillmentOrderAcknowledgementWrapper
     */
    acknowledged?: boolean;
    /**
     *
     * @type {ApplicationContext}
     * @memberof FulfillmentOrderAcknowledgementWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOrderAcknowledgementWrapper
     */
    externalFulfillmentOrderId?: string;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOrderAcknowledgementWrapper
     */
    fulfillmentOrderId?: number;
    /**
     *
     * @type {boolean}
     * @memberof FulfillmentOrderAcknowledgementWrapper
     */
    inFulfillment?: boolean;
    /**
     *
     * @type {Array<OrderAttributeWrapper>}
     * @memberof FulfillmentOrderAcknowledgementWrapper
     */
    parentOrderAttributes?: Array<OrderAttributeWrapper>;
}
/**
 *
 * @export
 * @interface FulfillmentOrderItemWrapper
 */
export interface FulfillmentOrderItemWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof FulfillmentOrderItemWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOrderItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOrderItemWrapper
     */
    skuId?: number;
}
/**
 *
 * @export
 * @interface FulfillmentOrderWrapper
 */
export interface FulfillmentOrderWrapper {
    /**
     *
     * @type {boolean}
     * @memberof FulfillmentOrderWrapper
     */
    acknowledged?: boolean;
    /**
     *
     * @type {ApplicationContext}
     * @memberof FulfillmentOrderWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOrderWrapper
     */
    customerEmailAddress?: string;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOrderWrapper
     */
    customerFirstName?: string;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOrderWrapper
     */
    customerId?: number;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOrderWrapper
     */
    customerLastName?: string;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOrderWrapper
     */
    fulfillmentGroupId?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOrderWrapper
     */
    fulfillmentOrderId?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof FulfillmentOrderWrapper
     */
    fulfillmentOrderNotes?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOrderWrapper
     */
    fulfillmentOrderNumber?: string;
    /**
     *
     * @type {Array<FulfillmentOrderItemWrapper>}
     * @memberof FulfillmentOrderWrapper
     */
    items?: Array<FulfillmentOrderItemWrapper>;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOrderWrapper
     */
    orderNumber?: string;
    /**
     *
     * @type {Array<OrderAttributeWrapper>}
     * @memberof FulfillmentOrderWrapper
     */
    parentOrderAttributes?: Array<OrderAttributeWrapper>;
    /**
     *
     * @type {Array<ShipmentDetailWrapper>}
     * @memberof FulfillmentOrderWrapper
     */
    shipmentDetails?: Array<ShipmentDetailWrapper>;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOrderWrapper
     */
    status?: string;
}
/**
 *
 * @export
 * @interface ISOCountryWrapper
 */
export interface ISOCountryWrapper {
    /**
     *
     * @type {string}
     * @memberof ISOCountryWrapper
     */
    alpha2?: string;
    /**
     *
     * @type {string}
     * @memberof ISOCountryWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface InventoryNotificationWrapper
 */
export interface InventoryNotificationWrapper {
    /**
     *
     * @type {string}
     * @memberof InventoryNotificationWrapper
     */
    date?: string;
    /**
     *
     * @type {string}
     * @memberof InventoryNotificationWrapper
     */
    emailAddress?: string;
    /**
     *
     * @type {number}
     * @memberof InventoryNotificationWrapper
     */
    id?: number;
    /**
     *
     * @type {FulfillmentLocationWrapper}
     * @memberof InventoryNotificationWrapper
     */
    location?: FulfillmentLocationWrapper;
    /**
     *
     * @type {boolean}
     * @memberof InventoryNotificationWrapper
     */
    processed?: boolean;
    /**
     *
     * @type {SkuWrapper}
     * @memberof InventoryNotificationWrapper
     */
    sku?: SkuWrapper;
}
/**
 *
 * @export
 * @interface InventoryWrapper
 */
export interface InventoryWrapper {
    /**
     *
     * @type {boolean}
     * @memberof InventoryWrapper
     */
    quantityOnHandEnabled?: boolean;
}
/**
 *
 * @export
 * @interface Link
 */
export interface Link {
    /**
     *
     * @type {string}
     * @memberof Link
     */
    href?: string;
    /**
     *
     * @type {boolean}
     * @memberof Link
     */
    templated?: boolean;
}
/**
 *
 * @export
 * @interface MapElementWrapper
 */
export interface MapElementWrapper {
    /**
     *
     * @type {string}
     * @memberof MapElementWrapper
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof MapElementWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface MediaWrapper
 */
export interface MediaWrapper {
    /**
     *
     * @type {boolean}
     * @memberof MediaWrapper
     */
    allowOverrideUrl?: boolean;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    altText?: string;
    /**
     *
     * @type {ApplicationContext}
     * @memberof MediaWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof MediaWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    tags?: string;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     *
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     *
     * @type {object}
     * @memberof ModelAndView
     */
    model?: object;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ModelAndView
     */
    modelMap?: {
        [key: string]: object;
    };
    /**
     *
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     *
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndViewStatusEnum;
    /**
     *
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     *
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ModelAndViewStatusEnum {
    _100CONTINUE = "100 CONTINUE",
    _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS",
    _102PROCESSING = "102 PROCESSING",
    _103CHECKPOINT = "103 CHECKPOINT",
    _200OK = "200 OK",
    _201CREATED = "201 CREATED",
    _202ACCEPTED = "202 ACCEPTED",
    _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION",
    _204NOCONTENT = "204 NO_CONTENT",
    _205RESETCONTENT = "205 RESET_CONTENT",
    _206PARTIALCONTENT = "206 PARTIAL_CONTENT",
    _207MULTISTATUS = "207 MULTI_STATUS",
    _208ALREADYREPORTED = "208 ALREADY_REPORTED",
    _226IMUSED = "226 IM_USED",
    _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES",
    _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY",
    _302FOUND = "302 FOUND",
    _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY",
    _303SEEOTHER = "303 SEE_OTHER",
    _304NOTMODIFIED = "304 NOT_MODIFIED",
    _305USEPROXY = "305 USE_PROXY",
    _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT",
    _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT",
    _400BADREQUEST = "400 BAD_REQUEST",
    _401UNAUTHORIZED = "401 UNAUTHORIZED",
    _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED",
    _403FORBIDDEN = "403 FORBIDDEN",
    _404NOTFOUND = "404 NOT_FOUND",
    _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED",
    _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE",
    _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED",
    _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT",
    _409CONFLICT = "409 CONFLICT",
    _410GONE = "410 GONE",
    _411LENGTHREQUIRED = "411 LENGTH_REQUIRED",
    _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED",
    _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE",
    _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE",
    _414URITOOLONG = "414 URI_TOO_LONG",
    _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG",
    _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE",
    _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE",
    _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED",
    _418IAMATEAPOT = "418 I_AM_A_TEAPOT",
    _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE",
    _420METHODFAILURE = "420 METHOD_FAILURE",
    _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED",
    _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY",
    _423LOCKED = "423 LOCKED",
    _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY",
    _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED",
    _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED",
    _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS",
    _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
    _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS",
    _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR",
    _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED",
    _502BADGATEWAY = "502 BAD_GATEWAY",
    _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE",
    _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT",
    _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED",
    _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES",
    _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE",
    _508LOOPDETECTED = "508 LOOP_DETECTED",
    _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED",
    _510NOTEXTENDED = "510 NOT_EXTENDED",
    _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
}
/**
 *
 * @export
 * @interface Money
 */
export interface Money {
    /**
     *
     * @type {number}
     * @memberof Money
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof Money
     */
    currency?: string;
    /**
     *
     * @type {boolean}
     * @memberof Money
     */
    zero?: boolean;
}
/**
 *
 * @export
 * @interface OrderAcknowledgementWrapper
 */
export interface OrderAcknowledgementWrapper {
    /**
     *
     * @type {boolean}
     * @memberof OrderAcknowledgementWrapper
     */
    acknowledged?: boolean;
    /**
     *
     * @type {ApplicationContext}
     * @memberof OrderAcknowledgementWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof OrderAcknowledgementWrapper
     */
    externalOrderId?: string;
    /**
     *
     * @type {boolean}
     * @memberof OrderAcknowledgementWrapper
     */
    inFulfillment?: boolean;
    /**
     *
     * @type {Array<OrderAttributeWrapper>}
     * @memberof OrderAcknowledgementWrapper
     */
    orderAttributes?: Array<OrderAttributeWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderAcknowledgementWrapper
     */
    orderId?: number;
}
/**
 *
 * @export
 * @interface OrderAttributeWrapper
 */
export interface OrderAttributeWrapper {
    /**
     *
     * @type {number}
     * @memberof OrderAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OrderAttributeWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof OrderAttributeWrapper
     */
    orderId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderAttributeWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrderItemAttributeWrapper
 */
export interface OrderItemAttributeWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof OrderItemAttributeWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {number}
     * @memberof OrderItemAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OrderItemAttributeWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof OrderItemAttributeWrapper
     */
    orderItemId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderItemAttributeWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrderItemPriceDetailWrapper
 */
export interface OrderItemPriceDetailWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof OrderItemPriceDetailWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {number}
     * @memberof OrderItemPriceDetailWrapper
     */
    id?: number;
    /**
     *
     * @type {Array<AdjustmentWrapper>}
     * @memberof OrderItemPriceDetailWrapper
     */
    orderItemPriceDetailAdjustments?: Array<AdjustmentWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderItemPriceDetailWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemPriceDetailWrapper
     */
    totalAdjustedPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderItemPriceDetailWrapper
     */
    totalAdjustmentValue?: Money;
}
/**
 *
 * @export
 * @interface OrderItemQualifierWrapper
 */
export interface OrderItemQualifierWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof OrderItemQualifierWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {number}
     * @memberof OrderItemQualifierWrapper
     */
    offerId?: number;
    /**
     *
     * @type {number}
     * @memberof OrderItemQualifierWrapper
     */
    quantity?: number;
}
/**
 *
 * @export
 * @interface OrderItemWrapper
 */
export interface OrderItemWrapper {
    /**
     *
     * @type {Array<MapElementWrapper>}
     * @memberof OrderItemWrapper
     */
    additionalAttributes?: Array<MapElementWrapper>;
    /**
     *
     * @type {ApplicationContext}
     * @memberof OrderItemWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    averagePrice?: Money;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    bundle?: boolean;
    /**
     *
     * @type {Array<OrderItemWrapper>}
     * @memberof OrderItemWrapper
     */
    bundleItems?: Array<OrderItemWrapper>;
    /**
     *
     * @type {Array<string>}
     * @memberof OrderItemWrapper
     */
    cartMessages?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    categoryId?: number;
    /**
     *
     * @type {Array<OrderItemWrapper>}
     * @memberof OrderItemWrapper
     */
    childOrderItems?: Array<OrderItemWrapper>;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    discountingAllowed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    hasValidationError?: boolean;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    isBundle?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    isDiscountingAllowed?: boolean;
    /**
     *
     * @type {string}
     * @memberof OrderItemWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    orderId?: number;
    /**
     *
     * @type {Array<OrderItemAttributeWrapper>}
     * @memberof OrderItemWrapper
     */
    orderItemAttributes?: Array<OrderItemAttributeWrapper>;
    /**
     *
     * @type {Array<OrderItemPriceDetailWrapper>}
     * @memberof OrderItemWrapper
     */
    orderItemPriceDetails?: Array<OrderItemPriceDetailWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    parentOrderItemId?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    priceBeforeAdjustments?: Money;
    /**
     *
     * @type {MediaWrapper}
     * @memberof OrderItemWrapper
     */
    primaryMedia?: MediaWrapper;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    productId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderItemWrapper
     */
    productUrl?: string;
    /**
     *
     * @type {Array<OrderItemQualifierWrapper>}
     * @memberof OrderItemWrapper
     */
    qualifiers?: Array<OrderItemQualifierWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    skuId?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    totalAdjustmentValue?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    totalPrice?: Money;
}
/**
 *
 * @export
 * @interface OrderNoteWrapper
 */
export interface OrderNoteWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof OrderNoteWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof OrderNoteWrapper
     */
    orderNote?: string;
}
/**
 *
 * @export
 * @interface OrderPaymentWrapper
 */
export interface OrderPaymentWrapper {
    /**
     *
     * @type {boolean}
     * @memberof OrderPaymentWrapper
     */
    active?: boolean;
    /**
     *
     * @type {number}
     * @memberof OrderPaymentWrapper
     */
    amount?: number;
    /**
     *
     * @type {AddressWrapper}
     * @memberof OrderPaymentWrapper
     */
    billingAddress?: AddressWrapper;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    gatewayType?: string;
    /**
     *
     * @type {number}
     * @memberof OrderPaymentWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof OrderPaymentWrapper
     */
    orderId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    referenceNumber?: string;
    /**
     *
     * @type {Array<PaymentTransactionWrapper>}
     * @memberof OrderPaymentWrapper
     */
    transactions?: Array<PaymentTransactionWrapper>;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    type?: string;
}
/**
 *
 * @export
 * @interface OrderWrapper
 */
export interface OrderWrapper {
    /**
     *
     * @type {Array<CartMessageWrapper>}
     * @memberof OrderWrapper
     */
    cartMessages?: Array<CartMessageWrapper>;
    /**
     *
     * @type {CustomerWrapper}
     * @memberof OrderWrapper
     */
    customer?: CustomerWrapper;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    emailAddress?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    fulfillmentGroupAdjustmentsValue?: Money;
    /**
     *
     * @type {Array<FulfillmentGroupWrapper>}
     * @memberof OrderWrapper
     */
    fulfillmentGroups?: Array<FulfillmentGroupWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderWrapper
     */
    id?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    itemAdjustmentsValue?: Money;
    /**
     *
     * @type {number}
     * @memberof OrderWrapper
     */
    itemCount?: number;
    /**
     *
     * @type {Array<AdjustmentWrapper>}
     * @memberof OrderWrapper
     */
    orderAdjustments?: Array<AdjustmentWrapper>;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    orderAdjustmentsValue?: Money;
    /**
     *
     * @type {Array<OrderAttributeWrapper>}
     * @memberof OrderWrapper
     */
    orderAttributes?: Array<OrderAttributeWrapper>;
    /**
     *
     * @type {Array<OrderItemWrapper>}
     * @memberof OrderWrapper
     */
    orderItems?: Array<OrderItemWrapper>;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    orderNumber?: string;
    /**
     *
     * @type {Array<OrderPaymentWrapper>}
     * @memberof OrderWrapper
     */
    payments?: Array<OrderPaymentWrapper>;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    status?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    subTotal?: Money;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    submitDate?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    total?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    totalAdjustmentsValue?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    totalShipping?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    totalTax?: Money;
}
/**
 *
 * @export
 * @interface PaymentTransactionWrapper
 */
export interface PaymentTransactionWrapper {
    /**
     *
     * @type {Array<MapElementWrapper>}
     * @memberof PaymentTransactionWrapper
     */
    additionalFields?: Array<MapElementWrapper>;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    customerIpAddress?: string;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    orderPaymentId?: number;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    parentTransactionId?: number;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    rawResponse?: string;
    /**
     *
     * @type {boolean}
     * @memberof PaymentTransactionWrapper
     */
    success?: boolean;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    type?: string;
}
/**
 *
 * @export
 * @interface PhoneWrapper
 */
export interface PhoneWrapper {
    /**
     *
     * @type {number}
     * @memberof PhoneWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof PhoneWrapper
     */
    isActive?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PhoneWrapper
     */
    isDefault?: boolean;
    /**
     *
     * @type {string}
     * @memberof PhoneWrapper
     */
    phoneNumber?: string;
}
/**
 *
 * @export
 * @interface ProductAttributeWrapper
 */
export interface ProductAttributeWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof ProductAttributeWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof ProductAttributeWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof ProductAttributeWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof ProductAttributeWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {number}
     * @memberof ProductAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof ProductAttributeWrapper
     */
    productId?: number;
}
/**
 *
 * @export
 * @interface ProductOptionValueWrapper
 */
export interface ProductOptionValueWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof ProductOptionValueWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof ProductOptionValueWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionValueWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {Money}
     * @memberof ProductOptionValueWrapper
     */
    priceAdjustment?: Money;
    /**
     *
     * @type {number}
     * @memberof ProductOptionValueWrapper
     */
    productOptionId?: number;
}
/**
 *
 * @export
 * @interface ProductOptionWrapper
 */
export interface ProductOptionWrapper {
    /**
     *
     * @type {Array<ProductOptionValueWrapper>}
     * @memberof ProductOptionWrapper
     */
    allowedValues?: Array<ProductOptionValueWrapper>;
    /**
     *
     * @type {ApplicationContext}
     * @memberof ProductOptionWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    productOptionType?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    productOptionValidationStrategyType?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    productOptionValidationType?: string;
    /**
     *
     * @type {boolean}
     * @memberof ProductOptionWrapper
     */
    required?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    validationString?: string;
}
/**
 *
 * @export
 * @interface ProductWrapper
 */
export interface ProductWrapper {
    /**
     *
     * @type {boolean}
     * @memberof ProductWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {Array<SkuWrapper>}
     * @memberof ProductWrapper
     */
    additionalSkus?: Array<SkuWrapper>;
    /**
     *
     * @type {ApplicationContext}
     * @memberof ProductWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    archived?: string;
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    bundleItemsRetailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    bundleItemsSalePrice?: Money;
    /**
     *
     * @type {Array<RelatedProductWrapper>}
     * @memberof ProductWrapper
     */
    crossSaleProducts?: Array<RelatedProductWrapper>;
    /**
     *
     * @type {number}
     * @memberof ProductWrapper
     */
    defaultCategoryId?: number;
    /**
     *
     * @type {SkuWrapper}
     * @memberof ProductWrapper
     */
    defaultSku?: SkuWrapper;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    description?: string;
    /**
     *
     * @type {DynamicSkuPricesWrapper}
     * @memberof ProductWrapper
     */
    dynamicSkuPrices?: DynamicSkuPricesWrapper;
    /**
     *
     * @type {number}
     * @memberof ProductWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    manufacturer?: string;
    /**
     *
     * @type {Array<MediaWrapper>}
     * @memberof ProductWrapper
     */
    media?: Array<MediaWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    model?: string;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    name?: string;
    /**
     *
     * @type {MediaWrapper}
     * @memberof ProductWrapper
     */
    primaryMedia?: MediaWrapper;
    /**
     *
     * @type {number}
     * @memberof ProductWrapper
     */
    priority?: number;
    /**
     *
     * @type {Array<ProductAttributeWrapper>}
     * @memberof ProductWrapper
     */
    productAttributes?: Array<ProductAttributeWrapper>;
    /**
     *
     * @type {Array<ProductOptionWrapper>}
     * @memberof ProductWrapper
     */
    productOptions?: Array<ProductOptionWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    promoMessage?: string;
    /**
     *
     * @type {{ [key: string]: Array<PromotionMessageDTOWrapper>; }}
     * @memberof ProductWrapper
     */
    promotionMessages?: {
        [key: string]: Array<PromotionMessageDTOWrapper>;
    };
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {Array<SkuBundleItemWrapper>}
     * @memberof ProductWrapper
     */
    skuBundleItems?: Array<SkuBundleItemWrapper>;
    /**
     *
     * @type {Array<RelatedProductWrapper>}
     * @memberof ProductWrapper
     */
    upsaleProducts?: Array<RelatedProductWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    url?: string;
}
/**
 *
 * @export
 * @interface PromotionMessageDTOWrapper
 */
export interface PromotionMessageDTOWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof PromotionMessageDTOWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof PromotionMessageDTOWrapper
     */
    localeCode?: string;
    /**
     *
     * @type {MediaWrapper}
     * @memberof PromotionMessageDTOWrapper
     */
    media?: MediaWrapper;
    /**
     *
     * @type {string}
     * @memberof PromotionMessageDTOWrapper
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof PromotionMessageDTOWrapper
     */
    messagePlacement?: string;
    /**
     *
     * @type {number}
     * @memberof PromotionMessageDTOWrapper
     */
    priority?: number;
}
/**
 *
 * @export
 * @interface RelatedProductWrapper
 */
export interface RelatedProductWrapper {
    /**
     *
     * @type {ApplicationContext}
     * @memberof RelatedProductWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof RelatedProductWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof RelatedProductWrapper
     */
    id?: number;
    /**
     *
     * @type {ProductWrapper}
     * @memberof RelatedProductWrapper
     */
    product?: ProductWrapper;
    /**
     *
     * @type {string}
     * @memberof RelatedProductWrapper
     */
    promotionalMessage?: string;
    /**
     *
     * @type {number}
     * @memberof RelatedProductWrapper
     */
    sequence?: number;
}
/**
 *
 * @export
 * @interface SearchFacetValueWrapper
 */
export interface SearchFacetValueWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SearchFacetValueWrapper
     */
    active?: boolean;
    /**
     *
     * @type {number}
     * @memberof SearchFacetValueWrapper
     */
    maxValue?: number;
    /**
     *
     * @type {number}
     * @memberof SearchFacetValueWrapper
     */
    minValue?: number;
    /**
     *
     * @type {number}
     * @memberof SearchFacetValueWrapper
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof SearchFacetValueWrapper
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof SearchFacetValueWrapper
     */
    valueKey?: string;
}
/**
 *
 * @export
 * @interface SearchFacetWrapper
 */
export interface SearchFacetWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SearchFacetWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof SearchFacetWrapper
     */
    fieldName?: string;
    /**
     *
     * @type {string}
     * @memberof SearchFacetWrapper
     */
    label?: string;
    /**
     *
     * @type {Array<SearchFacetValueWrapper>}
     * @memberof SearchFacetWrapper
     */
    values?: Array<SearchFacetValueWrapper>;
}
/**
 *
 * @export
 * @interface SearchResultsWrapper
 */
export interface SearchResultsWrapper {
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    page?: number;
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    pageSize?: number;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof SearchResultsWrapper
     */
    products?: Array<ProductWrapper>;
    /**
     *
     * @type {Array<SearchFacetWrapper>}
     * @memberof SearchResultsWrapper
     */
    searchFacets?: Array<SearchFacetWrapper>;
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    totalResults?: number;
}
/**
 *
 * @export
 * @interface ShipmentDetailWrapper
 */
export interface ShipmentDetailWrapper {
    /**
     *
     * @type {string}
     * @memberof ShipmentDetailWrapper
     */
    actualShipDate?: string;
    /**
     *
     * @type {ApplicationContext}
     * @memberof ShipmentDetailWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof ShipmentDetailWrapper
     */
    expectedShipDate?: string;
    /**
     *
     * @type {string}
     * @memberof ShipmentDetailWrapper
     */
    serviceCode?: string;
    /**
     *
     * @type {string}
     * @memberof ShipmentDetailWrapper
     */
    shipperType?: string;
    /**
     *
     * @type {string}
     * @memberof ShipmentDetailWrapper
     */
    trackingNumber?: string;
}
/**
 *
 * @export
 * @interface SkuAttributeWrapper
 */
export interface SkuAttributeWrapper {
    /**
     *
     * @type {string}
     * @memberof SkuAttributeWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof SkuAttributeWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof SkuAttributeWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {number}
     * @memberof SkuAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof SkuAttributeWrapper
     */
    skuId?: number;
}
/**
 *
 * @export
 * @interface SkuBundleItemWrapper
 */
export interface SkuBundleItemWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SkuBundleItemWrapper
     */
    active?: boolean;
    /**
     *
     * @type {ApplicationContext}
     * @memberof SkuBundleItemWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    bundleId?: number;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    productId?: number;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Money}
     * @memberof SkuBundleItemWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof SkuBundleItemWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {SkuWrapper}
     * @memberof SkuBundleItemWrapper
     */
    sku?: SkuWrapper;
}
/**
 *
 * @export
 * @interface SkuWrapper
 */
export interface SkuWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SkuWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {ApplicationContext}
     * @memberof SkuWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    archived?: string;
    /**
     *
     * @type {boolean}
     * @memberof SkuWrapper
     */
    available?: boolean;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    description?: string;
    /**
     *
     * @type {DimensionWrapper}
     * @memberof SkuWrapper
     */
    dimension?: DimensionWrapper;
    /**
     *
     * @type {number}
     * @memberof SkuWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    inventoryType?: string;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    name?: string;
    /**
     *
     * @type {Money}
     * @memberof SkuWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof SkuWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {WeightWrapper}
     * @memberof SkuWrapper
     */
    weight?: WeightWrapper;
}
/**
 *
 * @export
 * @interface StateWrapper
 */
export interface StateWrapper {
    /**
     *
     * @type {string}
     * @memberof StateWrapper
     */
    abbreviation?: string;
    /**
     *
     * @type {string}
     * @memberof StateWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface TaxDetailWrapper
 */
export interface TaxDetailWrapper {
    /**
     *
     * @type {Money}
     * @memberof TaxDetailWrapper
     */
    amount?: Money;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    currency?: string;
    /**
     *
     * @type {number}
     * @memberof TaxDetailWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    jurisdictionName?: string;
    /**
     *
     * @type {number}
     * @memberof TaxDetailWrapper
     */
    rate?: number;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    taxName?: string;
    /**
     *
     * @type {BroadleafEnumerationTypeWrapper}
     * @memberof TaxDetailWrapper
     */
    taxType?: BroadleafEnumerationTypeWrapper;
}
/**
 *
 * @export
 * @interface UCProductIdsWrapper
 */
export interface UCProductIdsWrapper {
    /**
     *
     * @type {Array<number>}
     * @memberof UCProductIdsWrapper
     */
    productIds?: Array<number>;
}
/**
 *
 * @export
 * @interface UCProductWrapper
 */
export interface UCProductWrapper {
    /**
     *
     * @type {boolean}
     * @memberof UCProductWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {Array<SkuWrapper>}
     * @memberof UCProductWrapper
     */
    additionalSkus?: Array<SkuWrapper>;
    /**
     *
     * @type {ApplicationContext}
     * @memberof UCProductWrapper
     */
    applicationContext?: ApplicationContext;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    archived?: string;
    /**
     *
     * @type {Money}
     * @memberof UCProductWrapper
     */
    bundleItemsRetailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof UCProductWrapper
     */
    bundleItemsSalePrice?: Money;
    /**
     *
     * @type {boolean}
     * @memberof UCProductWrapper
     */
    canSellWithoutOptions?: boolean;
    /**
     *
     * @type {Array<RelatedProductWrapper>}
     * @memberof UCProductWrapper
     */
    crossSaleProducts?: Array<RelatedProductWrapper>;
    /**
     *
     * @type {number}
     * @memberof UCProductWrapper
     */
    defaultCategoryId?: number;
    /**
     *
     * @type {SkuWrapper}
     * @memberof UCProductWrapper
     */
    defaultSku?: SkuWrapper;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    displayTemplate?: string;
    /**
     *
     * @type {DynamicSkuPricesWrapper}
     * @memberof UCProductWrapper
     */
    dynamicSkuPrices?: DynamicSkuPricesWrapper;
    /**
     *
     * @type {number}
     * @memberof UCProductWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    manufacturer?: string;
    /**
     *
     * @type {Array<MediaWrapper>}
     * @memberof UCProductWrapper
     */
    media?: Array<MediaWrapper>;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    model?: string;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    name?: string;
    /**
     *
     * @type {MediaWrapper}
     * @memberof UCProductWrapper
     */
    primaryMedia?: MediaWrapper;
    /**
     *
     * @type {number}
     * @memberof UCProductWrapper
     */
    priority?: number;
    /**
     *
     * @type {Array<ProductAttributeWrapper>}
     * @memberof UCProductWrapper
     */
    productAttributes?: Array<ProductAttributeWrapper>;
    /**
     *
     * @type {Array<ProductOptionWrapper>}
     * @memberof UCProductWrapper
     */
    productOptions?: Array<ProductOptionWrapper>;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    promoMessage?: string;
    /**
     *
     * @type {{ [key: string]: Array<PromotionMessageDTOWrapper>; }}
     * @memberof UCProductWrapper
     */
    promotionMessages?: {
        [key: string]: Array<PromotionMessageDTOWrapper>;
    };
    /**
     *
     * @type {Money}
     * @memberof UCProductWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof UCProductWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {Array<SkuBundleItemWrapper>}
     * @memberof UCProductWrapper
     */
    skuBundleItems?: Array<SkuBundleItemWrapper>;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    taxCode?: string;
    /**
     *
     * @type {Array<RelatedProductWrapper>}
     * @memberof UCProductWrapper
     */
    upsaleProducts?: Array<RelatedProductWrapper>;
    /**
     *
     * @type {string}
     * @memberof UCProductWrapper
     */
    url?: string;
}
/**
 *
 * @export
 * @interface UCProductsDeleteResponseWrapper
 */
export interface UCProductsDeleteResponseWrapper {
    /**
     *
     * @type {Array<number>}
     * @memberof UCProductsDeleteResponseWrapper
     */
    deletedProducts?: Array<number>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof UCProductsDeleteResponseWrapper
     */
    erroredProducts?: {
        [key: string]: string;
    };
    /**
     *
     * @type {Array<number>}
     * @memberof UCProductsDeleteResponseWrapper
     */
    missingProducts?: Array<number>;
}
/**
 *
 * @export
 * @interface USCategoryWrapper
 */
export interface USCategoryWrapper {
    /**
     *
     * @type {boolean}
     * @memberof USCategoryWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    archived?: string;
    /**
     *
     * @type {Array<CategoryAttributeWrapper>}
     * @memberof USCategoryWrapper
     */
    categoryAttributes?: Array<CategoryAttributeWrapper>;
    /**
     *
     * @type {Array<USCategoryWrapper>}
     * @memberof USCategoryWrapper
     */
    children?: Array<USCategoryWrapper>;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof USCategoryWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    name?: string;
    /**
     *
     * @type {USCategoryWrapper}
     * @memberof USCategoryWrapper
     */
    parent?: USCategoryWrapper;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof USCategoryWrapper
     */
    products?: Array<ProductWrapper>;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    slug?: string;
    /**
     *
     * @type {Array<CategoryWrapper>}
     * @memberof USCategoryWrapper
     */
    subcategories?: Array<CategoryWrapper>;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof USCategoryWrapper
     */
    urlKey?: string;
}
/**
 *
 * @export
 * @interface View
 */
export interface View {
    /**
     *
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}
/**
 *
 * @export
 * @interface WeightWrapper
 */
export interface WeightWrapper {
    /**
     *
     * @type {string}
     * @memberof WeightWrapper
     */
    unitOfMeasure?: string;
    /**
     *
     * @type {number}
     * @memberof WeightWrapper
     */
    weight?: number;
}
/**
 * BasicErrorControllerApi - axios parameter creator
 * @export
 */
export declare const BasicErrorControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingDELETE1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingGET1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingHEAD1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingOPTIONS1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPATCH1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPOST1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPUT1: (options?: any) => Promise<RequestArgs>;
};
/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export declare const BasicErrorControllerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingDELETE1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingHEAD1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingOPTIONS1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPATCH1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPOST1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPUT1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
};
/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export declare const BasicErrorControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingDELETE1(options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingGET1(options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingHEAD1(options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingOPTIONS1(options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPATCH1(options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPOST1(options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorUsingPUT1(options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
};
/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export declare class BasicErrorControllerApi extends BaseAPI {
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingDELETE1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingGET1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingHEAD1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingOPTIONS1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingPATCH1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingPOST1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorUsingPUT1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
}
/**
 * CartEndpointApi - axios parameter creator
 * @export
 */
export declare const CartEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {boolean} [isUpdateRequest] isUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToOrderUsingPOST1: (cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOfferCodeUsingPOST1: (promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrderPaymentTransactionUsingPUT1: (paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderByIdUsingPOST1: (amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderUsingPOST1: (cartId: number, wrapper: OrderPaymentWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary configureProductItem
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureProductItemUsingGET1: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCartForCustomerUsingPOST1: (customerId?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderAttributesUsingDELETE1: (cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductOptionsUsingDELETE1: (cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartByIdUsingGET1: (cartId: number, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartForCustomerUsingGET1: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPaymentsForOrderUsingGET1: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performCheckoutUsingPOST1: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary reconfigureOrderItemFromOrder
     * @param {number} orderItemId orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reconfigureOrderItemFromOrderUsingGET1: (orderItemId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllOfferCodesUsingDELETE1: (cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromOrderUsingDELETE1: (itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOfferCodeUsingDELETE1: (promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePaymentFromOrderByIdUsingDELETE1: (paymentId: number, cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemQuantityUsingPUT1: (itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderAttributesUsingPUT1: (cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductOptionsUsingPUT1: (cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * CartEndpointApi - functional programming interface
 * @export
 */
export declare const CartEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {boolean} [isUpdateRequest] isUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToOrderUsingPOST1(cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOfferCodeUsingPOST1(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrderPaymentTransactionUsingPUT1(paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderByIdUsingPOST1(amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderUsingPOST1(cartId: number, wrapper: OrderPaymentWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPaymentWrapper>>;
    /**
     *
     * @summary configureProductItem
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureProductItemUsingGET1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurableOrderItemWrapper>>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCartForCustomerUsingPOST1(customerId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderAttributesUsingDELETE1(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductOptionsUsingDELETE1(cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartByIdUsingGET1(cartId: number, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartForCustomerUsingGET1(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPaymentsForOrderUsingGET1(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderPaymentWrapper>>>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performCheckoutUsingPOST1(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary reconfigureOrderItemFromOrder
     * @param {number} orderItemId orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reconfigureOrderItemFromOrderUsingGET1(orderItemId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurableOrderItemWrapper>>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllOfferCodesUsingDELETE1(cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromOrderUsingDELETE1(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOfferCodeUsingDELETE1(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePaymentFromOrderByIdUsingDELETE1(paymentId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemQuantityUsingPUT1(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderAttributesUsingPUT1(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductOptionsUsingPUT1(cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
};
/**
 * CartEndpointApi - factory interface
 * @export
 */
export declare const CartEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {boolean} [isUpdateRequest] isUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToOrderUsingPOST1(cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOfferCodeUsingPOST1(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrderPaymentTransactionUsingPUT1(paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any): AxiosPromise<OrderPaymentWrapper>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderByIdUsingPOST1(amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any): AxiosPromise<OrderPaymentWrapper>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderUsingPOST1(cartId: number, wrapper: OrderPaymentWrapper, options?: any): AxiosPromise<OrderPaymentWrapper>;
    /**
     *
     * @summary configureProductItem
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configureProductItemUsingGET1(productId: number, options?: any): AxiosPromise<ConfigurableOrderItemWrapper>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCartForCustomerUsingPOST1(customerId?: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderAttributesUsingDELETE1(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductOptionsUsingDELETE1(cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartByIdUsingGET1(cartId: number, customerId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartForCustomerUsingGET1(customerId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPaymentsForOrderUsingGET1(cartId: number, options?: any): AxiosPromise<Array<OrderPaymentWrapper>>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performCheckoutUsingPOST1(cartId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary reconfigureOrderItemFromOrder
     * @param {number} orderItemId orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reconfigureOrderItemFromOrderUsingGET1(orderItemId: number, options?: any): AxiosPromise<ConfigurableOrderItemWrapper>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllOfferCodesUsingDELETE1(cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromOrderUsingDELETE1(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOfferCodeUsingDELETE1(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePaymentFromOrderByIdUsingDELETE1(paymentId: number, cartId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemQuantityUsingPUT1(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderAttributesUsingPUT1(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductOptionsUsingPUT1(cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
};
/**
 * CartEndpointApi - object-oriented interface
 * @export
 * @class CartEndpointApi
 * @extends {BaseAPI}
 */
export declare class CartEndpointApi extends BaseAPI {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {boolean} [isUpdateRequest] isUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addItemToOrderUsingPOST1(cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addOfferCodeUsingPOST1(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addOrderPaymentTransactionUsingPUT1(paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addPaymentToOrderByIdUsingPOST1(amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addPaymentToOrderUsingPOST1(cartId: number, wrapper: OrderPaymentWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper>>;
    /**
     *
     * @summary configureProductItem
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    configureProductItemUsingGET1(productId: number, options?: any): Promise<import("axios").AxiosResponse<ConfigurableOrderItemWrapper>>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    createNewCartForCustomerUsingPOST1(customerId?: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteOrderAttributesUsingDELETE1(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteProductOptionsUsingDELETE1(cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findCartByIdUsingGET1(cartId: number, customerId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findCartForCustomerUsingGET1(customerId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findPaymentsForOrderUsingGET1(cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper[]>>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    performCheckoutUsingPOST1(cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary reconfigureOrderItemFromOrder
     * @param {number} orderItemId orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    reconfigureOrderItemFromOrderUsingGET1(orderItemId: number, options?: any): Promise<import("axios").AxiosResponse<ConfigurableOrderItemWrapper>>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeAllOfferCodesUsingDELETE1(cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeItemFromOrderUsingDELETE1(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeOfferCodeUsingDELETE1(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removePaymentFromOrderByIdUsingDELETE1(paymentId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateItemQuantityUsingPUT1(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateOrderAttributesUsingPUT1(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateProductOptionsUsingPUT1(cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
}
/**
 * CatalogEndpointApi - axios parameter creator
 * @export
 */
export declare const CatalogEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary deleteProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductByIdUsingDELETE1: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary deleteProductsById
     * @param {UCProductIdsWrapper} products products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsByIdUsingDELETE1: (products: UCProductIdsWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findActiveSubCategoriesUsingGET1: (categoryId: number, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCategoriesUsingGET1: (name?: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllProducts
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllProductsUsingGET1: (limit?: number, offset?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryAttributesForCategoryUsingGET1: (categoryId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdOrNameUsingGET1: (searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdUsingGET1: (categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCrossSaleProductsByProductUsingGET1: (productId: number, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultSkuByProductIdUsingGET1: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkusUsingGET1: (id: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForCategoryUsingGET1: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForProductUsingGET1: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForSkuUsingGET1: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findParentCategoriesForProductUsingGET1: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductAttributesForProductUsingGET1: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductByIdUsingGET1: (id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByCategoryAndQueryUsingGET1: (categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByQueryUsingGET1: (q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuAttributesForSkuUsingGET1: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuByIdUsingGET1: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkusByProductByIdUsingGET1: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSubCategoriesUsingGET1: (categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUpSaleProductsByProductUsingGET1: (productId: number, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateProductById
     * @param {number} productId productId
     * @param {UCProductWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductByIdUsingPUT1: (productId: number, wrapper: UCProductWrapper, options?: any) => Promise<RequestArgs>;
};
/**
 * CatalogEndpointApi - functional programming interface
 * @export
 */
export declare const CatalogEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary deleteProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductByIdUsingDELETE1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary deleteProductsById
     * @param {UCProductIdsWrapper} products products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsByIdUsingDELETE1(products: UCProductIdsWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UCProductsDeleteResponseWrapper>>;
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findActiveSubCategoriesUsingGET1(categoryId: number, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCategoriesUsingGET1(name?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findAllProducts
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllProductsUsingGET1(limit?: number, offset?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWrapper>>>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryAttributesForCategoryUsingGET1(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryAttributeWrapper>>>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdOrNameUsingGET1(searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<USCategoryWrapper>>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdUsingGET1(categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryWrapper>>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCrossSaleProductsByProductUsingGET1(productId: number, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedProductWrapper>>>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultSkuByProductIdUsingGET1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuWrapper>>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkusUsingGET1(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWrapper>>>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForCategoryUsingGET1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaWrapper>>>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForProductUsingGET1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaWrapper>>>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForSkuUsingGET1(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaWrapper>>>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findParentCategoriesForProductUsingGET1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductAttributesForProductUsingGET1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAttributeWrapper>>>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductByIdUsingGET1(id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UCProductWrapper>>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByCategoryAndQueryUsingGET1(categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultsWrapper>>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByQueryUsingGET1(q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultsWrapper>>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuAttributesForSkuUsingGET1(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkuAttributeWrapper>>>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuByIdUsingGET1(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuWrapper>>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkusByProductByIdUsingGET1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkuWrapper>>>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSubCategoriesUsingGET1(categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUpSaleProductsByProductUsingGET1(productId: number, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedProductWrapper>>>;
    /**
     *
     * @summary updateProductById
     * @param {number} productId productId
     * @param {UCProductWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductByIdUsingPUT1(productId: number, wrapper: UCProductWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UCProductWrapper>>;
};
/**
 * CatalogEndpointApi - factory interface
 * @export
 */
export declare const CatalogEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary deleteProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductByIdUsingDELETE1(productId: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary deleteProductsById
     * @param {UCProductIdsWrapper} products products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsByIdUsingDELETE1(products: UCProductIdsWrapper, options?: any): AxiosPromise<UCProductsDeleteResponseWrapper>;
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findActiveSubCategoriesUsingGET1(categoryId: number, limit?: number, offset?: number, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCategoriesUsingGET1(name?: string, limit?: number, offset?: number, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findAllProducts
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllProductsUsingGET1(limit?: number, offset?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<Array<ProductWrapper>>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryAttributesForCategoryUsingGET1(categoryId: number, options?: any): AxiosPromise<Array<CategoryAttributeWrapper>>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdOrNameUsingGET1(searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): AxiosPromise<USCategoryWrapper>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdUsingGET1(categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): AxiosPromise<CategoryWrapper>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCrossSaleProductsByProductUsingGET1(productId: number, limit?: number, offset?: number, options?: any): AxiosPromise<Array<RelatedProductWrapper>>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultSkuByProductIdUsingGET1(productId: number, options?: any): AxiosPromise<SkuWrapper>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkusUsingGET1(id: Array<number>, options?: any): AxiosPromise<Array<InventoryWrapper>>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForCategoryUsingGET1(id: number, options?: any): AxiosPromise<Array<MediaWrapper>>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForProductUsingGET1(productId: number, options?: any): AxiosPromise<Array<MediaWrapper>>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForSkuUsingGET1(skuId: number, options?: any): AxiosPromise<Array<MediaWrapper>>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findParentCategoriesForProductUsingGET1(productId: number, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductAttributesForProductUsingGET1(productId: number, options?: any): AxiosPromise<Array<ProductAttributeWrapper>>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductByIdUsingGET1(id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<UCProductWrapper>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByCategoryAndQueryUsingGET1(categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<SearchResultsWrapper>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByQueryUsingGET1(q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<SearchResultsWrapper>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuAttributesForSkuUsingGET1(skuId: number, options?: any): AxiosPromise<Array<SkuAttributeWrapper>>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuByIdUsingGET1(skuId: number, options?: any): AxiosPromise<SkuWrapper>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkusByProductByIdUsingGET1(productId: number, options?: any): AxiosPromise<Array<SkuWrapper>>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSubCategoriesUsingGET1(categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUpSaleProductsByProductUsingGET1(productId: number, limit?: number, offset?: number, options?: any): AxiosPromise<Array<RelatedProductWrapper>>;
    /**
     *
     * @summary updateProductById
     * @param {number} productId productId
     * @param {UCProductWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductByIdUsingPUT1(productId: number, wrapper: UCProductWrapper, options?: any): AxiosPromise<UCProductWrapper>;
};
/**
 * CatalogEndpointApi - object-oriented interface
 * @export
 * @class CatalogEndpointApi
 * @extends {BaseAPI}
 */
export declare class CatalogEndpointApi extends BaseAPI {
    /**
     *
     * @summary deleteProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    deleteProductByIdUsingDELETE1(productId: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary deleteProductsById
     * @param {UCProductIdsWrapper} products products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    deleteProductsByIdUsingDELETE1(products: UCProductIdsWrapper, options?: any): Promise<import("axios").AxiosResponse<UCProductsDeleteResponseWrapper>>;
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findActiveSubCategoriesUsingGET1(categoryId: number, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findAllCategoriesUsingGET1(name?: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findAllProducts
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findAllProductsUsingGET1(limit?: number, offset?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<ProductWrapper[]>>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryAttributesForCategoryUsingGET1(categoryId: number, options?: any): Promise<import("axios").AxiosResponse<CategoryAttributeWrapper[]>>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryByIdOrNameUsingGET1(searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<import("axios").AxiosResponse<USCategoryWrapper>>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryByIdUsingGET1(categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<import("axios").AxiosResponse<CategoryWrapper>>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCrossSaleProductsByProductUsingGET1(productId: number, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<RelatedProductWrapper[]>>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findDefaultSkuByProductIdUsingGET1(productId: number, options?: any): Promise<import("axios").AxiosResponse<SkuWrapper>>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findInventoryForSkusUsingGET1(id: Array<number>, options?: any): Promise<import("axios").AxiosResponse<InventoryWrapper[]>>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForCategoryUsingGET1(id: number, options?: any): Promise<import("axios").AxiosResponse<MediaWrapper[]>>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForProductUsingGET1(productId: number, options?: any): Promise<import("axios").AxiosResponse<MediaWrapper[]>>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForSkuUsingGET1(skuId: number, options?: any): Promise<import("axios").AxiosResponse<MediaWrapper[]>>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findParentCategoriesForProductUsingGET1(productId: number, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findProductAttributesForProductUsingGET1(productId: number, options?: any): Promise<import("axios").AxiosResponse<ProductAttributeWrapper[]>>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findProductByIdUsingGET1(id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<UCProductWrapper>>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByCategoryAndQueryUsingGET1(categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<SearchResultsWrapper>>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByQueryUsingGET1(q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<SearchResultsWrapper>>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkuAttributesForSkuUsingGET1(skuId: number, options?: any): Promise<import("axios").AxiosResponse<SkuAttributeWrapper[]>>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkuByIdUsingGET1(skuId: number, options?: any): Promise<import("axios").AxiosResponse<SkuWrapper>>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkusByProductByIdUsingGET1(productId: number, options?: any): Promise<import("axios").AxiosResponse<SkuWrapper[]>>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSubCategoriesUsingGET1(categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findUpSaleProductsByProductUsingGET1(productId: number, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<RelatedProductWrapper[]>>;
    /**
     *
     * @summary updateProductById
     * @param {number} productId productId
     * @param {UCProductWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    updateProductByIdUsingPUT1(productId: number, wrapper: UCProductWrapper, options?: any): Promise<import("axios").AxiosResponse<UCProductWrapper>>;
}
/**
 * CustomerEndpointApi - axios parameter creator
 * @export
 */
export declare const CustomerEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddressUsingPUT1: (customerId: number, wrapper: CustomerAddressWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAttributeUsingPUT1: (customerId: number, wrapper: CustomerAttributeWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerPaymentUsingPOST1: (customerId: number, wrapper: CustomerPaymentWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST1: (wrapper: CustomerWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST1: (changePasswordForm: ChangePasswordForm, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAddressUsingGET1: (addressName: string, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllAddressesUsingGET1: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCustomerPaymentsUsingGET1: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerByEmailUsingGET1: (email: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerPaymentUsingGET1: (paymentId: number, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddressUsingDELETE1: (addressName: string, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAddressesUsingDELETE1: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAttributesUsingDELETE1: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllCustomerPaymentsUsingDELETE1: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAttributeUsingDELETE1: (attributeName: string, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCustomerPaymentUsingDELETE1: (paymentId: number, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAddressUsingPUT1: (addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentUsingPUT1: (paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPUT1: (customerId: number, wrapper: CustomerWrapper, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomerEndpointApi - functional programming interface
 * @export
 */
export declare const CustomerEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddressUsingPUT1(customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressWrapper>>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAttributeUsingPUT1(customerId: number, wrapper: CustomerAttributeWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerPaymentUsingPOST1(customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentWrapper>>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST1(wrapper: CustomerWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST1(changePasswordForm: ChangePasswordForm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAddressUsingGET1(addressName: string, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressWrapper>>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllAddressesUsingGET1(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerAddressWrapper>>>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCustomerPaymentsUsingGET1(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerPaymentWrapper>>>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerByEmailUsingGET1(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerPaymentUsingGET1(paymentId: number, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentWrapper>>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddressUsingDELETE1(addressName: string, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerAddressWrapper>>>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAddressesUsingDELETE1(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAttributesUsingDELETE1(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllCustomerPaymentsUsingDELETE1(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAttributeUsingDELETE1(attributeName: string, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCustomerPaymentUsingDELETE1(paymentId: number, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerPaymentWrapper>>>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAddressUsingPUT1(addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressWrapper>>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentUsingPUT1(paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentWrapper>>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPUT1(customerId: number, wrapper: CustomerWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
};
/**
 * CustomerEndpointApi - factory interface
 * @export
 */
export declare const CustomerEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddressUsingPUT1(customerId: number, wrapper: CustomerAddressWrapper, options?: any): AxiosPromise<CustomerAddressWrapper>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAttributeUsingPUT1(customerId: number, wrapper: CustomerAttributeWrapper, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerPaymentUsingPOST1(customerId: number, wrapper: CustomerPaymentWrapper, options?: any): AxiosPromise<CustomerPaymentWrapper>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST1(wrapper: CustomerWrapper, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST1(changePasswordForm: ChangePasswordForm, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAddressUsingGET1(addressName: string, customerId: number, options?: any): AxiosPromise<CustomerAddressWrapper>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllAddressesUsingGET1(customerId: number, options?: any): AxiosPromise<Array<CustomerAddressWrapper>>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCustomerPaymentsUsingGET1(customerId: number, options?: any): AxiosPromise<Array<CustomerPaymentWrapper>>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerByEmailUsingGET1(email: string, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerPaymentUsingGET1(paymentId: number, customerId: number, options?: any): AxiosPromise<CustomerPaymentWrapper>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddressUsingDELETE1(addressName: string, customerId: number, options?: any): AxiosPromise<Array<CustomerAddressWrapper>>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAddressesUsingDELETE1(customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAttributesUsingDELETE1(customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllCustomerPaymentsUsingDELETE1(customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAttributeUsingDELETE1(attributeName: string, customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCustomerPaymentUsingDELETE1(paymentId: number, customerId: number, options?: any): AxiosPromise<Array<CustomerPaymentWrapper>>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAddressUsingPUT1(addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any): AxiosPromise<CustomerAddressWrapper>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentUsingPUT1(paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any): AxiosPromise<CustomerPaymentWrapper>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPUT1(customerId: number, wrapper: CustomerWrapper, options?: any): AxiosPromise<CustomerWrapper>;
};
/**
 * CustomerEndpointApi - object-oriented interface
 * @export
 * @class CustomerEndpointApi
 * @extends {BaseAPI}
 */
export declare class CustomerEndpointApi extends BaseAPI {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAddressUsingPUT1(customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper>>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAttributeUsingPUT1(customerId: number, wrapper: CustomerAttributeWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerPaymentUsingPOST1(customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper>>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerUsingPOST1(wrapper: CustomerWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    changePasswordUsingPOST1(changePasswordForm: ChangePasswordForm, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAddressUsingGET1(addressName: string, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper>>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllAddressesUsingGET1(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper[]>>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllCustomerPaymentsUsingGET1(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper[]>>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerByEmailUsingGET1(email: string, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerPaymentUsingGET1(paymentId: number, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper>>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAddressUsingDELETE1(addressName: string, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper[]>>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAddressesUsingDELETE1(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAttributesUsingDELETE1(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllCustomerPaymentsUsingDELETE1(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAttributeUsingDELETE1(attributeName: string, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeCustomerPaymentUsingDELETE1(paymentId: number, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper[]>>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateAddressUsingPUT1(addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper>>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerPaymentUsingPUT1(paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper>>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerUsingPUT1(customerId: number, wrapper: CustomerWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
}
/**
 * FulfillmentEndpointApi - axios parameter creator
 * @export
 */
export declare const FulfillmentEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentGroupToOrderUsingPOST1: (cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT1: (fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToFulfillmentGroupUsingPOST1: (fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllInventoryForLocation
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllInventoryForLocationUsingGET1: (locationId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllPhysicalLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllPhysicalLocationsUsingGET1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllPickupLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllPickupLocationsUsingGET1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllShippingLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllShippingLocationsUsingGET1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findDefaultFulfillmentLocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultFulfillmentLocationUsingGET1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentGroupsForOrderUsingGET1: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentOptionsUsingGET1: (fulfillmentType: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findLocationById
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLocationByIdUsingGET1: (locationId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingGET1: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE1: (cartId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFulfillmentGroupFromOrderUsingDELETE1: (fulfillmentGroupId: number, cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE1: (fulfillmentGroupId: number, itemId: number, cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT1: (fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupUsingPATCH1: (cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * FulfillmentEndpointApi - functional programming interface
 * @export
 */
export declare const FulfillmentEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentGroupToOrderUsingPOST1(cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary findAllInventoryForLocation
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllInventoryForLocationUsingGET1(locationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWrapper>>>;
    /**
     *
     * @summary findAllPhysicalLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllPhysicalLocationsUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentLocationWrapper>>>;
    /**
     *
     * @summary findAllPickupLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllPickupLocationsUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentLocationWrapper>>>;
    /**
     *
     * @summary findAllShippingLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllShippingLocationsUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentLocationWrapper>>>;
    /**
     *
     * @summary findDefaultFulfillmentLocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultFulfillmentLocationUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentLocationWrapper>>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentGroupsForOrderUsingGET1(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentGroupWrapper>>>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentOptionsUsingGET1(fulfillmentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOptionWrapper>>>;
    /**
     *
     * @summary findLocationById
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLocationByIdUsingGET1(locationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentLocationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingGET1(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentGroupWrapper>>>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId: number, itemId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupUsingPATCH1(cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
};
/**
 * FulfillmentEndpointApi - factory interface
 * @export
 */
export declare const FulfillmentEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentGroupToOrderUsingPOST1(cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary findAllInventoryForLocation
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllInventoryForLocationUsingGET1(locationId: number, options?: any): AxiosPromise<Array<InventoryWrapper>>;
    /**
     *
     * @summary findAllPhysicalLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllPhysicalLocationsUsingGET1(options?: any): AxiosPromise<Array<FulfillmentLocationWrapper>>;
    /**
     *
     * @summary findAllPickupLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllPickupLocationsUsingGET1(options?: any): AxiosPromise<Array<FulfillmentLocationWrapper>>;
    /**
     *
     * @summary findAllShippingLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllShippingLocationsUsingGET1(options?: any): AxiosPromise<Array<FulfillmentLocationWrapper>>;
    /**
     *
     * @summary findDefaultFulfillmentLocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultFulfillmentLocationUsingGET1(options?: any): AxiosPromise<FulfillmentLocationWrapper>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentGroupsForOrderUsingGET1(cartId: number, options?: any): AxiosPromise<Array<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentOptionsUsingGET1(fulfillmentType: string, options?: any): AxiosPromise<Array<FulfillmentOptionWrapper>>;
    /**
     *
     * @summary findLocationById
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLocationByIdUsingGET1(locationId: number, options?: any): AxiosPromise<FulfillmentLocationWrapper>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingGET1(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId: number, cartId: number, options?: any): AxiosPromise<Array<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId: number, itemId: number, cartId: number, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupUsingPATCH1(cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
};
/**
 * FulfillmentEndpointApi - object-oriented interface
 * @export
 * @class FulfillmentEndpointApi
 * @extends {BaseAPI}
 */
export declare class FulfillmentEndpointApi extends BaseAPI {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentGroupToOrderUsingPOST1(cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT1(fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addItemToFulfillmentGroupUsingPOST1(fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary findAllInventoryForLocation
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllInventoryForLocationUsingGET1(locationId: number, options?: any): Promise<import("axios").AxiosResponse<InventoryWrapper[]>>;
    /**
     *
     * @summary findAllPhysicalLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllPhysicalLocationsUsingGET1(options?: any): Promise<import("axios").AxiosResponse<FulfillmentLocationWrapper[]>>;
    /**
     *
     * @summary findAllPickupLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllPickupLocationsUsingGET1(options?: any): Promise<import("axios").AxiosResponse<FulfillmentLocationWrapper[]>>;
    /**
     *
     * @summary findAllShippingLocations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findAllShippingLocationsUsingGET1(options?: any): Promise<import("axios").AxiosResponse<FulfillmentLocationWrapper[]>>;
    /**
     *
     * @summary findDefaultFulfillmentLocation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findDefaultFulfillmentLocationUsingGET1(options?: any): Promise<import("axios").AxiosResponse<FulfillmentLocationWrapper>>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentGroupsForOrderUsingGET1(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper[]>>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentOptionsUsingGET1(fulfillmentType: string, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOptionWrapper[]>>;
    /**
     *
     * @summary findLocationById
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findLocationByIdUsingGET1(locationId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentLocationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingGET1(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE1(cartId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeFulfillmentGroupFromOrderUsingDELETE1(fulfillmentGroupId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper[]>>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE1(fulfillmentGroupId: number, itemId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupAddressUsingPUT1(fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupUsingPATCH1(cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
}
/**
 * InventoryEndpointApi - axios parameter creator
 * @export
 */
export declare const InventoryEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addNotification
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNotificationUsingPUT1: (skuId: number, locationId: number, email: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findInventoryForSku
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkuUsingGET1: (skuId: number, locationId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findPhysicalInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPhysicalInventoryForSkuUsingGET1: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findPickupInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPickupInventoryForSkuUsingGET1: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findShippableInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShippableInventoryForSkuUsingGET1: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getAllUnProcessedNotifications
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUnProcessedNotificationsUsingGET1: (limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getQuantityAvailable
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuantityAvailableUsingGET1: (skuId: number, locationId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getUnProcessedNotificationsForEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnProcessedNotificationsForEmailUsingGET1: (email: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary processNotification
     * @param {number} notificationId notificationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotificationUsingPOST1: (notificationId: number, options?: any) => Promise<RequestArgs>;
};
/**
 * InventoryEndpointApi - functional programming interface
 * @export
 */
export declare const InventoryEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addNotification
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNotificationUsingPUT1(skuId: number, locationId: number, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @summary findInventoryForSku
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkuUsingGET1(skuId: number, locationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWrapper>>>;
    /**
     *
     * @summary findPhysicalInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPhysicalInventoryForSkuUsingGET1(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWrapper>>>;
    /**
     *
     * @summary findPickupInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPickupInventoryForSkuUsingGET1(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWrapper>>>;
    /**
     *
     * @summary findShippableInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShippableInventoryForSkuUsingGET1(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWrapper>>>;
    /**
     *
     * @summary getAllUnProcessedNotifications
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUnProcessedNotificationsUsingGET1(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryNotificationWrapper>>>;
    /**
     *
     * @summary getQuantityAvailable
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuantityAvailableUsingGET1(skuId: number, locationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    /**
     *
     * @summary getUnProcessedNotificationsForEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnProcessedNotificationsForEmailUsingGET1(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryNotificationWrapper>>>;
    /**
     *
     * @summary processNotification
     * @param {number} notificationId notificationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotificationUsingPOST1(notificationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
};
/**
 * InventoryEndpointApi - factory interface
 * @export
 */
export declare const InventoryEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addNotification
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNotificationUsingPUT1(skuId: number, locationId: number, email: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary findInventoryForSku
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkuUsingGET1(skuId: number, locationId: number, options?: any): AxiosPromise<Array<InventoryWrapper>>;
    /**
     *
     * @summary findPhysicalInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPhysicalInventoryForSkuUsingGET1(skuId: number, options?: any): AxiosPromise<Array<InventoryWrapper>>;
    /**
     *
     * @summary findPickupInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPickupInventoryForSkuUsingGET1(skuId: number, options?: any): AxiosPromise<Array<InventoryWrapper>>;
    /**
     *
     * @summary findShippableInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShippableInventoryForSkuUsingGET1(skuId: number, options?: any): AxiosPromise<Array<InventoryWrapper>>;
    /**
     *
     * @summary getAllUnProcessedNotifications
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUnProcessedNotificationsUsingGET1(limit?: number, offset?: number, options?: any): AxiosPromise<Array<InventoryNotificationWrapper>>;
    /**
     *
     * @summary getQuantityAvailable
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuantityAvailableUsingGET1(skuId: number, locationId: number, options?: any): AxiosPromise<number>;
    /**
     *
     * @summary getUnProcessedNotificationsForEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnProcessedNotificationsForEmailUsingGET1(email: string, options?: any): AxiosPromise<Array<InventoryNotificationWrapper>>;
    /**
     *
     * @summary processNotification
     * @param {number} notificationId notificationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotificationUsingPOST1(notificationId: number, options?: any): AxiosPromise<boolean>;
};
/**
 * InventoryEndpointApi - object-oriented interface
 * @export
 * @class InventoryEndpointApi
 * @extends {BaseAPI}
 */
export declare class InventoryEndpointApi extends BaseAPI {
    /**
     *
     * @summary addNotification
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    addNotificationUsingPUT1(skuId: number, locationId: number, email: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     *
     * @summary findInventoryForSku
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findInventoryForSkuUsingGET1(skuId: number, locationId: number, options?: any): Promise<import("axios").AxiosResponse<InventoryWrapper[]>>;
    /**
     *
     * @summary findPhysicalInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findPhysicalInventoryForSkuUsingGET1(skuId: number, options?: any): Promise<import("axios").AxiosResponse<InventoryWrapper[]>>;
    /**
     *
     * @summary findPickupInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findPickupInventoryForSkuUsingGET1(skuId: number, options?: any): Promise<import("axios").AxiosResponse<InventoryWrapper[]>>;
    /**
     *
     * @summary findShippableInventoryForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    findShippableInventoryForSkuUsingGET1(skuId: number, options?: any): Promise<import("axios").AxiosResponse<InventoryWrapper[]>>;
    /**
     *
     * @summary getAllUnProcessedNotifications
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    getAllUnProcessedNotificationsUsingGET1(limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<InventoryNotificationWrapper[]>>;
    /**
     *
     * @summary getQuantityAvailable
     * @param {number} skuId skuId
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    getQuantityAvailableUsingGET1(skuId: number, locationId: number, options?: any): Promise<import("axios").AxiosResponse<number>>;
    /**
     *
     * @summary getUnProcessedNotificationsForEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    getUnProcessedNotificationsForEmailUsingGET1(email: string, options?: any): Promise<import("axios").AxiosResponse<InventoryNotificationWrapper[]>>;
    /**
     *
     * @summary processNotification
     * @param {number} notificationId notificationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryEndpointApi
     */
    processNotificationUsingPOST1(notificationId: number, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
}
/**
 * OperationHandlerApi - axios parameter creator
 * @export
 */
export declare const OperationHandlerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET1: (body?: {
        [key: string]: string;
    }, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET3: (body?: {
        [key: string]: string;
    }, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET5: (body?: {
        [key: string]: string;
    }, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET7: (body?: {
        [key: string]: string;
    }, options?: any) => Promise<RequestArgs>;
};
/**
 * OperationHandlerApi - functional programming interface
 * @export
 */
export declare const OperationHandlerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET1(body?: {
        [key: string]: string;
    }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET3(body?: {
        [key: string]: string;
    }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET5(body?: {
        [key: string]: string;
    }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET7(body?: {
        [key: string]: string;
    }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * OperationHandlerApi - factory interface
 * @export
 */
export declare const OperationHandlerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET1(body?: {
        [key: string]: string;
    }, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET3(body?: {
        [key: string]: string;
    }, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET5(body?: {
        [key: string]: string;
    }, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleUsingGET7(body?: {
        [key: string]: string;
    }, options?: any): AxiosPromise<object>;
};
/**
 * OperationHandlerApi - object-oriented interface
 * @export
 * @class OperationHandlerApi
 * @extends {BaseAPI}
 */
export declare class OperationHandlerApi extends BaseAPI {
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET1(body?: {
        [key: string]: string;
    }, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET3(body?: {
        [key: string]: string;
    }, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET5(body?: {
        [key: string]: string;
    }, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    handleUsingGET7(body?: {
        [key: string]: string;
    }, options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * OrderEndpointApi - axios parameter creator
 * @export
 */
export declare const OrderEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary acknowledgeFulfillmentOrder
     * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acknowledgeFulfillmentOrderUsingPATCH1: (fulfillmentOrderAcknowledgementList: Array<FulfillmentOrderAcknowledgementWrapper>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary acknowledgeOrder
     * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acknowledgeOrderUsingPATCH1: (orderAcknowledgementList: Array<OrderAcknowledgementWrapper>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addNote
     * @param {string} orderNumber orderNumber
     * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNoteUsingPOST1: (orderNumber: string, orderNoteWrapper: OrderNoteWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary blockOrder
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockOrderUsingPOST1: (orderNumber: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary cancelItems
     * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelItemsUsingPOST1: (cancelRequestWrappers: Array<CancelRequestWrapper>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary cancelItems
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelItemsUsingPOST3: (orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary cancelOrder
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrderUsingPOST1: (orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary cancelSingleItem
     * @param {string} orderNumber orderNumber
     * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
     * @param {number} skuId skuId
     * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSingleItemUsingPOST1: (orderNumber: string, fulfillmentOrderNumber: string, skuId: number, fulfillmentOrderItemWrapper: FulfillmentOrderItemWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentOrders
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentOrdersUsingGET1: (orderNumber: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getNotes
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotesUsingGET1: (orderNumber: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary listFulfillmentOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFulfillmentOrdersUsingGET1: (token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary listOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrdersUsingGET1: (token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary shipItems
     * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipItemsUsingPOST1: (fulfillmentOrderWrappers: Array<FulfillmentOrderWrapper>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary shipItems
     * @param {string} orderNumber orderNumber
     * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipItemsUsingPOST3: (orderNumber: string, fulfillmentOrderWrapper: FulfillmentOrderWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary showFulfillmentGroups
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showFulfillmentGroupsUsingGET1: (orderNumber: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary showOrderPayments
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showOrderPaymentsUsingGET1: (orderNumber: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {string} orderNumber orderNumber
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT3: (orderNumber: string, fulfillmentGroupId: number, fulfillmentGroupWrapper: FulfillmentGroupWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateOrderPaymentAddress
     * @param {string} orderNumber orderNumber
     * @param {number} paymentId paymentId
     * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderPaymentAddressUsingPUT1: (orderNumber: string, paymentId: number, orderPaymentWrapper: OrderPaymentWrapper, options?: any) => Promise<RequestArgs>;
};
/**
 * OrderEndpointApi - functional programming interface
 * @export
 */
export declare const OrderEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary acknowledgeFulfillmentOrder
     * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList: Array<FulfillmentOrderAcknowledgementWrapper>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOrderAcknowledgementWrapper>>>;
    /**
     *
     * @summary acknowledgeOrder
     * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acknowledgeOrderUsingPATCH1(orderAcknowledgementList: Array<OrderAcknowledgementWrapper>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderAcknowledgementWrapper>>>;
    /**
     *
     * @summary addNote
     * @param {string} orderNumber orderNumber
     * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNoteUsingPOST1(orderNumber: string, orderNoteWrapper: OrderNoteWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderNoteWrapper>>>;
    /**
     *
     * @summary blockOrder
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockOrderUsingPOST1(orderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>>;
    /**
     *
     * @summary cancelItems
     * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelItemsUsingPOST1(cancelRequestWrappers: Array<CancelRequestWrapper>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary cancelItems
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelItemsUsingPOST3(orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOrderWrapper>>>;
    /**
     *
     * @summary cancelOrder
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrderUsingPOST1(orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOrderWrapper>>>;
    /**
     *
     * @summary cancelSingleItem
     * @param {string} orderNumber orderNumber
     * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
     * @param {number} skuId skuId
     * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSingleItemUsingPOST1(orderNumber: string, fulfillmentOrderNumber: string, skuId: number, fulfillmentOrderItemWrapper: FulfillmentOrderItemWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOrderWrapper>>>;
    /**
     *
     * @summary getFulfillmentOrders
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentOrdersUsingGET1(orderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOrderWrapper>>>;
    /**
     *
     * @summary getNotes
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotesUsingGET1(orderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderNoteWrapper>>>;
    /**
     *
     * @summary listFulfillmentOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFulfillmentOrdersUsingGET1(token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkResponseFulfillmentOrderWrapper>>;
    /**
     *
     * @summary listOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrdersUsingGET1(token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkResponseOrderWrapper>>;
    /**
     *
     * @summary shipItems
     * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipItemsUsingPOST1(fulfillmentOrderWrappers: Array<FulfillmentOrderWrapper>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary shipItems
     * @param {string} orderNumber orderNumber
     * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipItemsUsingPOST3(orderNumber: string, fulfillmentOrderWrapper: FulfillmentOrderWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOrderWrapper>>>;
    /**
     *
     * @summary showFulfillmentGroups
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showFulfillmentGroupsUsingGET1(orderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentGroupWrapper>>>;
    /**
     *
     * @summary showOrderPayments
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showOrderPaymentsUsingGET1(orderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderPaymentWrapper>>>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {string} orderNumber orderNumber
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT3(orderNumber: string, fulfillmentGroupId: number, fulfillmentGroupWrapper: FulfillmentGroupWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentGroupWrapper>>>;
    /**
     *
     * @summary updateOrderPaymentAddress
     * @param {string} orderNumber orderNumber
     * @param {number} paymentId paymentId
     * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderPaymentAddressUsingPUT1(orderNumber: string, paymentId: number, orderPaymentWrapper: OrderPaymentWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderPaymentWrapper>>>;
};
/**
 * OrderEndpointApi - factory interface
 * @export
 */
export declare const OrderEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary acknowledgeFulfillmentOrder
     * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList: Array<FulfillmentOrderAcknowledgementWrapper>, options?: any): AxiosPromise<Array<FulfillmentOrderAcknowledgementWrapper>>;
    /**
     *
     * @summary acknowledgeOrder
     * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acknowledgeOrderUsingPATCH1(orderAcknowledgementList: Array<OrderAcknowledgementWrapper>, options?: any): AxiosPromise<Array<OrderAcknowledgementWrapper>>;
    /**
     *
     * @summary addNote
     * @param {string} orderNumber orderNumber
     * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNoteUsingPOST1(orderNumber: string, orderNoteWrapper: OrderNoteWrapper, options?: any): AxiosPromise<Array<OrderNoteWrapper>>;
    /**
     *
     * @summary blockOrder
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockOrderUsingPOST1(orderNumber: string, options?: any): AxiosPromise<Array<object>>;
    /**
     *
     * @summary cancelItems
     * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelItemsUsingPOST1(cancelRequestWrappers: Array<CancelRequestWrapper>, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary cancelItems
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelItemsUsingPOST3(orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any): AxiosPromise<Array<FulfillmentOrderWrapper>>;
    /**
     *
     * @summary cancelOrder
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrderUsingPOST1(orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any): AxiosPromise<Array<FulfillmentOrderWrapper>>;
    /**
     *
     * @summary cancelSingleItem
     * @param {string} orderNumber orderNumber
     * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
     * @param {number} skuId skuId
     * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSingleItemUsingPOST1(orderNumber: string, fulfillmentOrderNumber: string, skuId: number, fulfillmentOrderItemWrapper: FulfillmentOrderItemWrapper, options?: any): AxiosPromise<Array<FulfillmentOrderWrapper>>;
    /**
     *
     * @summary getFulfillmentOrders
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentOrdersUsingGET1(orderNumber: string, options?: any): AxiosPromise<Array<FulfillmentOrderWrapper>>;
    /**
     *
     * @summary getNotes
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotesUsingGET1(orderNumber: string, options?: any): AxiosPromise<Array<OrderNoteWrapper>>;
    /**
     *
     * @summary listFulfillmentOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFulfillmentOrdersUsingGET1(token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any): AxiosPromise<BulkResponseFulfillmentOrderWrapper>;
    /**
     *
     * @summary listOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrdersUsingGET1(token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any): AxiosPromise<BulkResponseOrderWrapper>;
    /**
     *
     * @summary shipItems
     * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipItemsUsingPOST1(fulfillmentOrderWrappers: Array<FulfillmentOrderWrapper>, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary shipItems
     * @param {string} orderNumber orderNumber
     * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipItemsUsingPOST3(orderNumber: string, fulfillmentOrderWrapper: FulfillmentOrderWrapper, options?: any): AxiosPromise<Array<FulfillmentOrderWrapper>>;
    /**
     *
     * @summary showFulfillmentGroups
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showFulfillmentGroupsUsingGET1(orderNumber: string, options?: any): AxiosPromise<Array<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary showOrderPayments
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showOrderPaymentsUsingGET1(orderNumber: string, options?: any): AxiosPromise<Array<OrderPaymentWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {string} orderNumber orderNumber
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT3(orderNumber: string, fulfillmentGroupId: number, fulfillmentGroupWrapper: FulfillmentGroupWrapper, options?: any): AxiosPromise<Array<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateOrderPaymentAddress
     * @param {string} orderNumber orderNumber
     * @param {number} paymentId paymentId
     * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderPaymentAddressUsingPUT1(orderNumber: string, paymentId: number, orderPaymentWrapper: OrderPaymentWrapper, options?: any): AxiosPromise<Array<OrderPaymentWrapper>>;
};
/**
 * OrderEndpointApi - object-oriented interface
 * @export
 * @class OrderEndpointApi
 * @extends {BaseAPI}
 */
export declare class OrderEndpointApi extends BaseAPI {
    /**
     *
     * @summary acknowledgeFulfillmentOrder
     * @param {Array<FulfillmentOrderAcknowledgementWrapper>} fulfillmentOrderAcknowledgementList fulfillmentOrderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    acknowledgeFulfillmentOrderUsingPATCH1(fulfillmentOrderAcknowledgementList: Array<FulfillmentOrderAcknowledgementWrapper>, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOrderAcknowledgementWrapper[]>>;
    /**
     *
     * @summary acknowledgeOrder
     * @param {Array<OrderAcknowledgementWrapper>} orderAcknowledgementList orderAcknowledgementList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    acknowledgeOrderUsingPATCH1(orderAcknowledgementList: Array<OrderAcknowledgementWrapper>, options?: any): Promise<import("axios").AxiosResponse<OrderAcknowledgementWrapper[]>>;
    /**
     *
     * @summary addNote
     * @param {string} orderNumber orderNumber
     * @param {OrderNoteWrapper} orderNoteWrapper orderNoteWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    addNoteUsingPOST1(orderNumber: string, orderNoteWrapper: OrderNoteWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderNoteWrapper[]>>;
    /**
     *
     * @summary blockOrder
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    blockOrderUsingPOST1(orderNumber: string, options?: any): Promise<import("axios").AxiosResponse<object[]>>;
    /**
     *
     * @summary cancelItems
     * @param {Array<CancelRequestWrapper>} cancelRequestWrappers cancelRequestWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelItemsUsingPOST1(cancelRequestWrappers: Array<CancelRequestWrapper>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary cancelItems
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelItemsUsingPOST3(orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOrderWrapper[]>>;
    /**
     *
     * @summary cancelOrder
     * @param {string} orderNumber orderNumber
     * @param {CancelRequestWrapper} cancelRequestWrapper cancelRequestWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelOrderUsingPOST1(orderNumber: string, cancelRequestWrapper: CancelRequestWrapper, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOrderWrapper[]>>;
    /**
     *
     * @summary cancelSingleItem
     * @param {string} orderNumber orderNumber
     * @param {string} fulfillmentOrderNumber fulfillmentOrderNumber
     * @param {number} skuId skuId
     * @param {FulfillmentOrderItemWrapper} fulfillmentOrderItemWrapper fulfillmentOrderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    cancelSingleItemUsingPOST1(orderNumber: string, fulfillmentOrderNumber: string, skuId: number, fulfillmentOrderItemWrapper: FulfillmentOrderItemWrapper, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOrderWrapper[]>>;
    /**
     *
     * @summary getFulfillmentOrders
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    getFulfillmentOrdersUsingGET1(orderNumber: string, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOrderWrapper[]>>;
    /**
     *
     * @summary getNotes
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    getNotesUsingGET1(orderNumber: string, options?: any): Promise<import("axios").AxiosResponse<OrderNoteWrapper[]>>;
    /**
     *
     * @summary listFulfillmentOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    listFulfillmentOrdersUsingGET1(token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any): Promise<import("axios").AxiosResponse<BulkResponseFulfillmentOrderWrapper>>;
    /**
     *
     * @summary listOrders
     * @param {string} [token] token
     * @param {number} [maxRecords] maxRecords
     * @param {string} [status] status
     * @param {boolean} [includeBlockedOrders] includeBlockedOrders
     * @param {boolean} [acknowledged] acknowledged
     * @param {string} [beginDate] beginDate
     * @param {string} [endDate] endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    listOrdersUsingGET1(token?: string, maxRecords?: number, status?: string, includeBlockedOrders?: boolean, acknowledged?: boolean, beginDate?: string, endDate?: string, options?: any): Promise<import("axios").AxiosResponse<BulkResponseOrderWrapper>>;
    /**
     *
     * @summary shipItems
     * @param {Array<FulfillmentOrderWrapper>} fulfillmentOrderWrappers fulfillmentOrderWrappers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    shipItemsUsingPOST1(fulfillmentOrderWrappers: Array<FulfillmentOrderWrapper>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary shipItems
     * @param {string} orderNumber orderNumber
     * @param {FulfillmentOrderWrapper} fulfillmentOrderWrapper fulfillmentOrderWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    shipItemsUsingPOST3(orderNumber: string, fulfillmentOrderWrapper: FulfillmentOrderWrapper, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOrderWrapper[]>>;
    /**
     *
     * @summary showFulfillmentGroups
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    showFulfillmentGroupsUsingGET1(orderNumber: string, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper[]>>;
    /**
     *
     * @summary showOrderPayments
     * @param {string} orderNumber orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    showOrderPaymentsUsingGET1(orderNumber: string, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper[]>>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {string} orderNumber orderNumber
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} fulfillmentGroupWrapper fulfillmentGroupWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    updateFulfillmentGroupAddressUsingPUT3(orderNumber: string, fulfillmentGroupId: number, fulfillmentGroupWrapper: FulfillmentGroupWrapper, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper[]>>;
    /**
     *
     * @summary updateOrderPaymentAddress
     * @param {string} orderNumber orderNumber
     * @param {number} paymentId paymentId
     * @param {OrderPaymentWrapper} orderPaymentWrapper orderPaymentWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    updateOrderPaymentAddressUsingPUT1(orderNumber: string, paymentId: number, orderPaymentWrapper: OrderPaymentWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper[]>>;
}
/**
 * OrderHistoryEndpointApi - axios parameter creator
 * @export
 */
export declare const OrderHistoryEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllOrdersForCustomerUsingGET1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrderByIdUsingGET1: (orderId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrdersForCustomerUsingGET1: (orderStatus?: string, orderNumber?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * OrderHistoryEndpointApi - functional programming interface
 * @export
 */
export declare const OrderHistoryEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllOrdersForCustomerUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderWrapper>>>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrderByIdUsingGET1(orderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrdersForCustomerUsingGET1(orderStatus?: string, orderNumber?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderWrapper>>>;
};
/**
 * OrderHistoryEndpointApi - factory interface
 * @export
 */
export declare const OrderHistoryEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllOrdersForCustomerUsingGET1(options?: any): AxiosPromise<Array<OrderWrapper>>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrderByIdUsingGET1(orderId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrdersForCustomerUsingGET1(orderStatus?: string, orderNumber?: string, options?: any): AxiosPromise<Array<OrderWrapper>>;
};
/**
 * OrderHistoryEndpointApi - object-oriented interface
 * @export
 * @class OrderHistoryEndpointApi
 * @extends {BaseAPI}
 */
export declare class OrderHistoryEndpointApi extends BaseAPI {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findAllOrdersForCustomerUsingGET1(options?: any): Promise<import("axios").AxiosResponse<OrderWrapper[]>>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrderByIdUsingGET1(orderId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrdersForCustomerUsingGET1(orderStatus?: string, orderNumber?: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper[]>>;
}
/**
 * PreviewTemplateControllerApi - axios parameter creator
 * @export
 */
export declare const PreviewTemplateControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingDELETE1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingGET1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingHEAD1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingOPTIONS1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPATCH1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPOST1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPUT1: (options?: any) => Promise<RequestArgs>;
};
/**
 * PreviewTemplateControllerApi - functional programming interface
 * @export
 */
export declare const PreviewTemplateControllerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingDELETE1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingHEAD1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingOPTIONS1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPATCH1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPOST1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPUT1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * PreviewTemplateControllerApi - factory interface
 * @export
 */
export declare const PreviewTemplateControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingDELETE1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingGET1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingHEAD1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingOPTIONS1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPATCH1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPOST1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPUT1(options?: any): AxiosPromise<string>;
};
/**
 * PreviewTemplateControllerApi - object-oriented interface
 * @export
 * @class PreviewTemplateControllerApi
 * @extends {BaseAPI}
 */
export declare class PreviewTemplateControllerApi extends BaseAPI {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingDELETE1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingGET1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingHEAD1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingOPTIONS1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPATCH1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPOST1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPUT1(options?: any): Promise<import("axios").AxiosResponse<string>>;
}
/**
 * PromotionMessageEndpointApi - axios parameter creator
 * @export
 */
export declare const PromotionMessageEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPromotionMessagesForProductUsingGET1: (productId: number, options?: any) => Promise<RequestArgs>;
};
/**
 * PromotionMessageEndpointApi - functional programming interface
 * @export
 */
export declare const PromotionMessageEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPromotionMessagesForProductUsingGET1(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: PromotionMessageDTOWrapper[];
    }>>;
};
/**
 * PromotionMessageEndpointApi - factory interface
 * @export
 */
export declare const PromotionMessageEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPromotionMessagesForProductUsingGET1(productId: number, options?: any): AxiosPromise<{
        [key: string]: PromotionMessageDTOWrapper[];
    }>;
};
/**
 * PromotionMessageEndpointApi - object-oriented interface
 * @export
 * @class PromotionMessageEndpointApi
 * @extends {BaseAPI}
 */
export declare class PromotionMessageEndpointApi extends BaseAPI {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionMessageEndpointApi
     */
    findPromotionMessagesForProductUsingGET1(productId: number, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: PromotionMessageDTOWrapper[];
    }>>;
}
/**
 * RelatedProductsEndpointApi - axios parameter creator
 * @export
 */
export declare const RelatedProductsEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelatedProductsUsingGET1: (productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * RelatedProductsEndpointApi - functional programming interface
 * @export
 */
export declare const RelatedProductsEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelatedProductsUsingGET1(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWrapper>>>;
};
/**
 * RelatedProductsEndpointApi - factory interface
 * @export
 */
export declare const RelatedProductsEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelatedProductsUsingGET1(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<Array<ProductWrapper>>;
};
/**
 * RelatedProductsEndpointApi - object-oriented interface
 * @export
 * @class RelatedProductsEndpointApi
 * @extends {BaseAPI}
 */
export declare class RelatedProductsEndpointApi extends BaseAPI {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatedProductsEndpointApi
     */
    getRelatedProductsUsingGET1(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<ProductWrapper[]>>;
}
/**
 * SystemEndpointApi - axios parameter creator
 * @export
 */
export declare const SystemEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary invalidateCache
     * @param {'catalog' | 'cms' | 'order' | 'customer' | 'system'} region region to be invalidated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidateCacheUsingPATCH1: (region: 'catalog' | 'cms' | 'order' | 'customer' | 'system', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary reindex
     * @param {'catalog' | 'customer' | 'order' | 'fulfillment_order'} collection collection to be reindexed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reindexUsingPATCH1: (collection: 'catalog' | 'customer' | 'order' | 'fulfillment_order', options?: any) => Promise<RequestArgs>;
};
/**
 * SystemEndpointApi - functional programming interface
 * @export
 */
export declare const SystemEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary invalidateCache
     * @param {'catalog' | 'cms' | 'order' | 'customer' | 'system'} region region to be invalidated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidateCacheUsingPATCH1(region: 'catalog' | 'cms' | 'order' | 'customer' | 'system', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary reindex
     * @param {'catalog' | 'customer' | 'order' | 'fulfillment_order'} collection collection to be reindexed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reindexUsingPATCH1(collection: 'catalog' | 'customer' | 'order' | 'fulfillment_order', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * SystemEndpointApi - factory interface
 * @export
 */
export declare const SystemEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary invalidateCache
     * @param {'catalog' | 'cms' | 'order' | 'customer' | 'system'} region region to be invalidated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidateCacheUsingPATCH1(region: 'catalog' | 'cms' | 'order' | 'customer' | 'system', options?: any): AxiosPromise<string>;
    /**
     *
     * @summary reindex
     * @param {'catalog' | 'customer' | 'order' | 'fulfillment_order'} collection collection to be reindexed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reindexUsingPATCH1(collection: 'catalog' | 'customer' | 'order' | 'fulfillment_order', options?: any): AxiosPromise<string>;
};
/**
 * SystemEndpointApi - object-oriented interface
 * @export
 * @class SystemEndpointApi
 * @extends {BaseAPI}
 */
export declare class SystemEndpointApi extends BaseAPI {
    /**
     *
     * @summary invalidateCache
     * @param {'catalog' | 'cms' | 'order' | 'customer' | 'system'} region region to be invalidated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemEndpointApi
     */
    invalidateCacheUsingPATCH1(region: 'catalog' | 'cms' | 'order' | 'customer' | 'system', options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary reindex
     * @param {'catalog' | 'customer' | 'order' | 'fulfillment_order'} collection collection to be reindexed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemEndpointApi
     */
    reindexUsingPATCH1(collection: 'catalog' | 'customer' | 'order' | 'fulfillment_order', options?: any): Promise<import("axios").AxiosResponse<string>>;
}
/**
 * WebMvcLinksHandlerApi - axios parameter creator
 * @export
 */
export declare const WebMvcLinksHandlerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linksUsingGET1: (options?: any) => Promise<RequestArgs>;
};
/**
 * WebMvcLinksHandlerApi - functional programming interface
 * @export
 */
export declare const WebMvcLinksHandlerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linksUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: {
            [key: string]: Link;
        };
    }>>;
};
/**
 * WebMvcLinksHandlerApi - factory interface
 * @export
 */
export declare const WebMvcLinksHandlerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linksUsingGET1(options?: any): AxiosPromise<{
        [key: string]: {
            [key: string]: Link;
        };
    }>;
};
/**
 * WebMvcLinksHandlerApi - object-oriented interface
 * @export
 * @class WebMvcLinksHandlerApi
 * @extends {BaseAPI}
 */
export declare class WebMvcLinksHandlerApi extends BaseAPI {
    /**
     *
     * @summary links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebMvcLinksHandlerApi
     */
    linksUsingGET1(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: {
            [key: string]: Link;
        };
    }>>;
}
/**
 * WishlistEndpointApi - axios parameter creator
 * @export
 */
export declare const WishlistEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfigureItemToWishlistUsingPOST1: (wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToWishlistUsingPOST1: (wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWishlistUsingGET1: (wishlistName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveItemToCartUsingPOST1: (wishlistName: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveListToCartUsingPOST1: (wishlistName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromWishlistUsingDELETE1: (wishlistName: string, itemId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuantityInWishlistUsingPUT1: (wishlistName: string, itemId: number, quantity: number, options?: any) => Promise<RequestArgs>;
};
/**
 * WishlistEndpointApi - functional programming interface
 * @export
 */
export declare const WishlistEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfigureItemToWishlistUsingPOST1(wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToWishlistUsingPOST1(wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWishlistUsingGET1(wishlistName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveItemToCartUsingPOST1(wishlistName: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveListToCartUsingPOST1(wishlistName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromWishlistUsingDELETE1(wishlistName: string, itemId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuantityInWishlistUsingPUT1(wishlistName: string, itemId: number, quantity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
};
/**
 * WishlistEndpointApi - factory interface
 * @export
 */
export declare const WishlistEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfigureItemToWishlistUsingPOST1(wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToWishlistUsingPOST1(wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWishlistUsingGET1(wishlistName: string, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveItemToCartUsingPOST1(wishlistName: string, itemId: string, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveListToCartUsingPOST1(wishlistName: string, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromWishlistUsingDELETE1(wishlistName: string, itemId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuantityInWishlistUsingPUT1(wishlistName: string, itemId: number, quantity: number, options?: any): AxiosPromise<OrderWrapper>;
};
/**
 * WishlistEndpointApi - object-oriented interface
 * @export
 * @class WishlistEndpointApi
 * @extends {BaseAPI}
 */
export declare class WishlistEndpointApi extends BaseAPI {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addConfigureItemToWishlistUsingPOST1(wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addItemToWishlistUsingPOST1(wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    getWishlistUsingGET1(wishlistName: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveItemToCartUsingPOST1(wishlistName: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveListToCartUsingPOST1(wishlistName: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    removeItemFromWishlistUsingDELETE1(wishlistName: string, itemId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    updateQuantityInWishlistUsingPUT1(wishlistName: string, itemId: number, quantity: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
}

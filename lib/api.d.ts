/**
 * Broadleaf Commerce API
 * The default Broadleaf Commerce APIs
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AddressWrapper
 */
export interface AddressWrapper {
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    addressLine1?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    addressLine2?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    addressLine3?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    companyName?: string;
    /**
     *
     * @type {CountryWrapper}
     * @memberof AddressWrapper
     */
    country?: CountryWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    firstName?: string;
    /**
     *
     * @type {number}
     * @memberof AddressWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof AddressWrapper
     */
    isBusiness?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AddressWrapper
     */
    isDefault?: boolean;
    /**
     *
     * @type {ISOCountryWrapper}
     * @memberof AddressWrapper
     */
    isoCountryAlpha2?: ISOCountryWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    isoCountrySubdivision?: string;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    lastName?: string;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof AddressWrapper
     */
    phoneFax?: PhoneWrapper;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof AddressWrapper
     */
    phonePrimary?: PhoneWrapper;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof AddressWrapper
     */
    phoneSecondary?: PhoneWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    postalCode?: string;
    /**
     *
     * @type {StateWrapper}
     * @memberof AddressWrapper
     */
    state?: StateWrapper;
    /**
     *
     * @type {string}
     * @memberof AddressWrapper
     */
    stateProvinceRegion?: string;
}
/**
 *
 * @export
 * @interface AdjustmentWrapper
 */
export interface AdjustmentWrapper {
    /**
     *
     * @type {Money}
     * @memberof AdjustmentWrapper
     */
    adjustmentValue?: Money;
    /**
     *
     * @type {number}
     * @memberof AdjustmentWrapper
     */
    discountAmount?: number;
    /**
     *
     * @type {string}
     * @memberof AdjustmentWrapper
     */
    discountType?: string;
    /**
     *
     * @type {number}
     * @memberof AdjustmentWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof AdjustmentWrapper
     */
    marketingMessage?: string;
    /**
     *
     * @type {number}
     * @memberof AdjustmentWrapper
     */
    offerid?: number;
    /**
     *
     * @type {string}
     * @memberof AdjustmentWrapper
     */
    reason?: string;
}
/**
 *
 * @export
 * @interface BroadleafEnumerationTypeWrapper
 */
export interface BroadleafEnumerationTypeWrapper {
    /**
     *
     * @type {string}
     * @memberof BroadleafEnumerationTypeWrapper
     */
    friendlyName?: string;
    /**
     *
     * @type {string}
     * @memberof BroadleafEnumerationTypeWrapper
     */
    type?: string;
}
/**
 *
 * @export
 * @interface CartMessageWrapper
 */
export interface CartMessageWrapper {
    /**
     *
     * @type {string}
     * @memberof CartMessageWrapper
     */
    errorCode?: string;
    /**
     *
     * @type {string}
     * @memberof CartMessageWrapper
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof CartMessageWrapper
     */
    messageType?: string;
    /**
     *
     * @type {number}
     * @memberof CartMessageWrapper
     */
    priority?: number;
}
/**
 *
 * @export
 * @interface CategoriesWrapper
 */
export interface CategoriesWrapper {
    /**
     *
     * @type {Array<CategoryWrapper>}
     * @memberof CategoriesWrapper
     */
    category?: Array<CategoryWrapper>;
}
/**
 *
 * @export
 * @interface CategoryAttributeWrapper
 */
export interface CategoryAttributeWrapper {
    /**
     *
     * @type {string}
     * @memberof CategoryAttributeWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryAttributeWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {number}
     * @memberof CategoryAttributeWrapper
     */
    categoryId?: number;
    /**
     *
     * @type {number}
     * @memberof CategoryAttributeWrapper
     */
    id?: number;
}
/**
 *
 * @export
 * @interface CategoryWrapper
 */
export interface CategoryWrapper {
    /**
     *
     * @type {boolean}
     * @memberof CategoryWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    archived?: string;
    /**
     *
     * @type {Array<CategoryWrapper>}
     * @memberof CategoryWrapper
     */
    category?: Array<CategoryWrapper>;
    /**
     *
     * @type {Array<CategoryAttributeWrapper>}
     * @memberof CategoryWrapper
     */
    categoryAttribute?: Array<CategoryAttributeWrapper>;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof CategoryWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    name?: string;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof CategoryWrapper
     */
    product?: Array<ProductWrapper>;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof CategoryWrapper
     */
    relatedProduct?: Array<ProductWrapper>;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryWrapper
     */
    urlKey?: string;
}
/**
 *
 * @export
 * @interface ChangePasswordForm
 */
export interface ChangePasswordForm {
    /**
     *
     * @type {string}
     * @memberof ChangePasswordForm
     */
    currentPassword?: string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordForm
     */
    newPassword?: string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordForm
     */
    newPasswordConfirm?: string;
}
/**
 *
 * @export
 * @interface ConfigurableOrderItemWrapper
 */
export interface ConfigurableOrderItemWrapper {
    /**
     *
     * @type {Array<MapElementWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    additionalAttributes?: Array<MapElementWrapper>;
    /**
     *
     * @type {Array<ConfigurableOrderItemWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    childOrderItems?: Array<ConfigurableOrderItemWrapper>;
    /**
     *
     * @type {Money}
     * @memberof ConfigurableOrderItemWrapper
     */
    displayPrice?: Money;
    /**
     *
     * @type {boolean}
     * @memberof ConfigurableOrderItemWrapper
     */
    hasConfigurationError?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ConfigurableOrderItemWrapper
     */
    isMultiSelect?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ConfigurableOrderItemWrapper
     */
    isUpdateRequest?: boolean;
    /**
     *
     * @type {Array<OrderItemAttributeWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    itemAttributes?: Array<OrderItemAttributeWrapper>;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    maxQuantity?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    minQuantity?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    orderItemId?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    orderItemIndex?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    originalOrderItemId?: number;
    /**
     *
     * @type {Money}
     * @memberof ConfigurableOrderItemWrapper
     */
    overrideRetailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof ConfigurableOrderItemWrapper
     */
    overrideSalePrice?: Money;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    parentOrderItemId?: number;
    /**
     *
     * @type {ProductWrapper}
     * @memberof ConfigurableOrderItemWrapper
     */
    product?: ProductWrapper;
    /**
     *
     * @type {Array<ConfigurableOrderItemWrapper>}
     * @memberof ConfigurableOrderItemWrapper
     */
    productChoices?: Array<ConfigurableOrderItemWrapper>;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    productId?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigurableOrderItemWrapper
     */
    skuId?: number;
}
/**
 *
 * @export
 * @interface CountryWrapper
 */
export interface CountryWrapper {
    /**
     *
     * @type {string}
     * @memberof CountryWrapper
     */
    abbreviation?: string;
    /**
     *
     * @type {string}
     * @memberof CountryWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface CustomCategory
 */
export interface CustomCategory {
    /**
     *
     * @type {boolean}
     * @memberof CustomCategory
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof CustomCategory
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof CustomCategory
     */
    activeStartDate?: string;
    /**
     *
     * @type {string}
     * @memberof CustomCategory
     */
    archived?: string;
    /**
     *
     * @type {Array<CategoryWrapper>}
     * @memberof CustomCategory
     */
    category?: Array<CategoryWrapper>;
    /**
     *
     * @type {Array<CategoryAttributeWrapper>}
     * @memberof CustomCategory
     */
    categoryAttribute?: Array<CategoryAttributeWrapper>;
    /**
     *
     * @type {string}
     * @memberof CustomCategory
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof CustomCategory
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CustomCategory
     */
    name?: string;
    /**
     *
     * @type {Array<CustomCategory>}
     * @memberof CustomCategory
     */
    parent?: CustomCategory;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof CustomCategory
     */
    product?: Array<ProductWrapper>;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof CustomCategory
     */
    relatedProduct?: Array<ProductWrapper>;
    /**
     *
     * @type {string}
     * @memberof CustomCategory
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof CustomCategory
     */
    urlKey?: string;
    slug?: string;
    children?: Array<CustomCategory>;
}
/**
 *
 * @export
 * @interface CustomerAddressWrapper
 */
export interface CustomerAddressWrapper {
    /**
     *
     * @type {AddressWrapper}
     * @memberof CustomerAddressWrapper
     */
    address?: AddressWrapper;
    /**
     *
     * @type {string}
     * @memberof CustomerAddressWrapper
     */
    addressName?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerAddressWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerAddressWrapper
     */
    id?: number;
}
/**
 *
 * @export
 * @interface CustomerAttributeWrapper
 */
export interface CustomerAttributeWrapper {
    /**
     *
     * @type {number}
     * @memberof CustomerAttributeWrapper
     */
    customerId?: number;
    /**
     *
     * @type {number}
     * @memberof CustomerAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CustomerAttributeWrapper
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerAttributeWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CustomerPaymentWrapper
 */
export interface CustomerPaymentWrapper {
    /**
     *
     * @type {Array<MapElementWrapper>}
     * @memberof CustomerPaymentWrapper
     */
    additionalField?: Array<MapElementWrapper>;
    /**
     *
     * @type {AddressWrapper}
     * @memberof CustomerPaymentWrapper
     */
    billingAddress?: AddressWrapper;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    cardName?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    cardType?: string;
    /**
     *
     * @type {CustomerWrapper}
     * @memberof CustomerPaymentWrapper
     */
    customer?: CustomerWrapper;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    expirationDate?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerPaymentWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof CustomerPaymentWrapper
     */
    isDefault?: boolean;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    lastFour?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    paymentGatewayType?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    paymentToken?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerPaymentWrapper
     */
    paymentType?: string;
}
/**
 *
 * @export
 * @interface CustomerWrapper
 */
export interface CustomerWrapper {
    /**
     *
     * @type {string}
     * @memberof CustomerWrapper
     */
    archived?: string;
    /**
     *
     * @type {Array<CustomerAttributeWrapper>}
     * @memberof CustomerWrapper
     */
    customerAttribute?: Array<CustomerAttributeWrapper>;
    /**
     *
     * @type {string}
     * @memberof CustomerWrapper
     */
    emailAddress?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerWrapper
     */
    firstName?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CustomerWrapper
     */
    lastName?: string;
    /**
     *
     * @type {boolean}
     * @memberof CustomerWrapper
     */
    registered?: boolean;
}
/**
 *
 * @export
 * @interface DimensionWrapper
 */
export interface DimensionWrapper {
    /**
     *
     * @type {object}
     * @memberof DimensionWrapper
     */
    applicationContext?: object;
    /**
     *
     * @type {string}
     * @memberof DimensionWrapper
     */
    container?: string;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    depth?: number;
    /**
     *
     * @type {string}
     * @memberof DimensionWrapper
     */
    dimensionUnitOfMeasure?: string;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    girth?: number;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    height?: number;
    /**
     *
     * @type {string}
     * @memberof DimensionWrapper
     */
    size?: string;
    /**
     *
     * @type {number}
     * @memberof DimensionWrapper
     */
    width?: number;
}
/**
 *
 * @export
 * @interface DynamicSkuPricesWrapper
 */
export interface DynamicSkuPricesWrapper {
    /**
     *
     * @type {Money}
     * @memberof DynamicSkuPricesWrapper
     */
    priceAdjustment?: Money;
    /**
     *
     * @type {Money}
     * @memberof DynamicSkuPricesWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof DynamicSkuPricesWrapper
     */
    salePrice?: Money;
}
/**
 *
 * @export
 * @interface ErrorMessageWrapper
 */
export interface ErrorMessageWrapper {
    /**
     *
     * @type {string}
     * @memberof ErrorMessageWrapper
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorMessageWrapper
     */
    messageKey?: string;
}
/**
 *
 * @export
 * @interface ErrorWrapper
 */
export interface ErrorWrapper {
    /**
     *
     * @type {number}
     * @memberof ErrorWrapper
     */
    httpStatusCode?: number;
    /**
     *
     * @type {Array<ErrorMessageWrapper>}
     * @memberof ErrorWrapper
     */
    message?: Array<ErrorMessageWrapper>;
}
/**
 *
 * @export
 * @interface FulfillmentEstimationWrapper
 */
export interface FulfillmentEstimationWrapper {
    /**
     *
     * @type {FulfillmentOptionWrapper}
     * @memberof FulfillmentEstimationWrapper
     */
    fulfillmentOption?: FulfillmentOptionWrapper;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentEstimationWrapper
     */
    price?: Money;
}
/**
 *
 * @export
 * @interface FulfillmentGroupItemWrapper
 */
export interface FulfillmentGroupItemWrapper {
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    fulfillmentGroupId?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    id?: number;
    /**
     *
     * @type {OrderItemWrapper}
     * @memberof FulfillmentGroupItemWrapper
     */
    orderItem?: OrderItemWrapper;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    orderItemId?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Array<TaxDetailWrapper>}
     * @memberof FulfillmentGroupItemWrapper
     */
    taxDetail?: Array<TaxDetailWrapper>;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentGroupItemWrapper
     */
    totalItemAmount?: Money;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentGroupItemWrapper
     */
    totalTax?: Money;
}
/**
 *
 * @export
 * @interface FulfillmentGroupWrapper
 */
export interface FulfillmentGroupWrapper {
    /**
     *
     * @type {AddressWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    address?: AddressWrapper;
    /**
     *
     * @type {Array<AdjustmentWrapper>}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentGroupAdjustment?: Array<AdjustmentWrapper>;
    /**
     *
     * @type {Array<FulfillmentGroupItemWrapper>}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentGroupItem?: Array<FulfillmentGroupItemWrapper>;
    /**
     *
     * @type {FulfillmentOptionWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentOption?: FulfillmentOptionWrapper;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentPrice?: Money;
    /**
     *
     * @type {BroadleafEnumerationTypeWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    fulfillmentType?: BroadleafEnumerationTypeWrapper;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof FulfillmentGroupWrapper
     */
    orderId?: number;
    /**
     *
     * @type {PhoneWrapper}
     * @memberof FulfillmentGroupWrapper
     */
    phone?: PhoneWrapper;
    /**
     *
     * @type {string}
     * @memberof FulfillmentGroupWrapper
     */
    status?: string;
    /**
     *
     * @type {Array<TaxDetailWrapper>}
     * @memberof FulfillmentGroupWrapper
     */
    taxDetail?: Array<TaxDetailWrapper>;
    /**
     *
     * @type {Money}
     * @memberof FulfillmentGroupWrapper
     */
    total?: Money;
}
/**
 *
 * @export
 * @interface FulfillmentOptionWrapper
 */
export interface FulfillmentOptionWrapper {
    /**
     *
     * @type {string}
     * @memberof FulfillmentOptionWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOptionWrapper
     */
    description?: string;
    /**
     *
     * @type {BroadleafEnumerationTypeWrapper}
     * @memberof FulfillmentOptionWrapper
     */
    fulfillmentType?: BroadleafEnumerationTypeWrapper;
    /**
     *
     * @type {number}
     * @memberof FulfillmentOptionWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof FulfillmentOptionWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ISOCountryWrapper
 */
export interface ISOCountryWrapper {
    /**
     *
     * @type {string}
     * @memberof ISOCountryWrapper
     */
    alpha2?: string;
    /**
     *
     * @type {string}
     * @memberof ISOCountryWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface InventoryWrapper
 */
export interface InventoryWrapper {
    /**
     *
     * @type {string}
     * @memberof InventoryWrapper
     */
    inventoryType?: string;
    /**
     *
     * @type {number}
     * @memberof InventoryWrapper
     */
    quantityAvailable?: number;
    /**
     *
     * @type {number}
     * @memberof InventoryWrapper
     */
    skuId?: number;
}
/**
 *
 * @export
 * @interface MapElementWrapper
 */
export interface MapElementWrapper {
    /**
     *
     * @type {string}
     * @memberof MapElementWrapper
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof MapElementWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface MediaWrapper
 */
export interface MediaWrapper {
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    altText?: string;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof MediaWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    tags?: string;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof MediaWrapper
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     *
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     *
     * @type {object}
     * @memberof ModelAndView
     */
    model?: object;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ModelAndView
     */
    modelMap?: {
        [key: string]: object;
    };
    /**
     *
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     *
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndViewStatusEnum;
    /**
     *
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     *
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ModelAndViewStatusEnum {
    _100 = "100",
    _101 = "101",
    _102 = "102",
    _103 = "103",
    _200 = "200",
    _201 = "201",
    _202 = "202",
    _203 = "203",
    _204 = "204",
    _205 = "205",
    _206 = "206",
    _207 = "207",
    _208 = "208",
    _226 = "226",
    _300 = "300",
    _301 = "301",
    _302 = "302",
    _303 = "303",
    _304 = "304",
    _305 = "305",
    _307 = "307",
    _308 = "308",
    _400 = "400",
    _401 = "401",
    _402 = "402",
    _403 = "403",
    _404 = "404",
    _405 = "405",
    _406 = "406",
    _407 = "407",
    _408 = "408",
    _409 = "409",
    _410 = "410",
    _411 = "411",
    _412 = "412",
    _413 = "413",
    _414 = "414",
    _415 = "415",
    _416 = "416",
    _417 = "417",
    _418 = "418",
    _419 = "419",
    _420 = "420",
    _421 = "421",
    _422 = "422",
    _423 = "423",
    _424 = "424",
    _426 = "426",
    _428 = "428",
    _429 = "429",
    _431 = "431",
    _451 = "451",
    _500 = "500",
    _501 = "501",
    _502 = "502",
    _503 = "503",
    _504 = "504",
    _505 = "505",
    _506 = "506",
    _507 = "507",
    _508 = "508",
    _509 = "509",
    _510 = "510",
    _511 = "511"
}
/**
 *
 * @export
 * @interface Money
 */
export interface Money {
    /**
     *
     * @type {number}
     * @memberof Money
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof Money
     */
    currency?: string;
}
/**
 *
 * @export
 * @interface OrderAttributeWrapper
 */
export interface OrderAttributeWrapper {
    /**
     *
     * @type {number}
     * @memberof OrderAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OrderAttributeWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof OrderAttributeWrapper
     */
    orderId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderAttributeWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrderItemAttributeWrapper
 */
export interface OrderItemAttributeWrapper {
    /**
     *
     * @type {number}
     * @memberof OrderItemAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OrderItemAttributeWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof OrderItemAttributeWrapper
     */
    orderItemId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderItemAttributeWrapper
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrderItemPriceDetailWrapper
 */
export interface OrderItemPriceDetailWrapper {
    /**
     *
     * @type {Array<AdjustmentWrapper>}
     * @memberof OrderItemPriceDetailWrapper
     */
    adjustment?: Array<AdjustmentWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderItemPriceDetailWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof OrderItemPriceDetailWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemPriceDetailWrapper
     */
    totalAdjustedPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderItemPriceDetailWrapper
     */
    totalAdjustmentValue?: Money;
}
/**
 *
 * @export
 * @interface OrderItemQualifierWrapper
 */
export interface OrderItemQualifierWrapper {
    /**
     *
     * @type {number}
     * @memberof OrderItemQualifierWrapper
     */
    offerId?: number;
    /**
     *
     * @type {number}
     * @memberof OrderItemQualifierWrapper
     */
    quantity?: number;
}
/**
 *
 * @export
 * @interface OrderItemWrapper
 */
export interface OrderItemWrapper {
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    averagePrice?: Money;
    /**
     *
     * @type {Array<OrderItemWrapper>}
     * @memberof OrderItemWrapper
     */
    bundleItem?: Array<OrderItemWrapper>;
    /**
     *
     * @type {Array<string>}
     * @memberof OrderItemWrapper
     */
    cartMessages?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    categoryId?: number;
    /**
     *
     * @type {Array<OrderItemWrapper>}
     * @memberof OrderItemWrapper
     */
    childOrderItems?: Array<OrderItemWrapper>;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    hasValidationError?: boolean;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    isBundle?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrderItemWrapper
     */
    isDiscountingAllowed?: boolean;
    /**
     *
     * @type {string}
     * @memberof OrderItemWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    orderId?: number;
    /**
     *
     * @type {Array<OrderItemAttributeWrapper>}
     * @memberof OrderItemWrapper
     */
    orderItemAttribute?: Array<OrderItemAttributeWrapper>;
    /**
     *
     * @type {Array<OrderItemPriceDetailWrapper>}
     * @memberof OrderItemWrapper
     */
    orderItemPriceDetails?: Array<OrderItemPriceDetailWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    parentOrderItemId?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    priceBeforeAdjustments?: Money;
    /**
     *
     * @type {MediaWrapper}
     * @memberof OrderItemWrapper
     */
    primaryMedia?: MediaWrapper;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    productId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderItemWrapper
     */
    productUrl?: string;
    /**
     *
     * @type {Array<OrderItemQualifierWrapper>}
     * @memberof OrderItemWrapper
     */
    qualifier?: Array<OrderItemQualifierWrapper>;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {number}
     * @memberof OrderItemWrapper
     */
    skuId?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    totalAdjustmentValue?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderItemWrapper
     */
    totalPrice?: Money;
}
/**
 *
 * @export
 * @interface OrderPaymentWrapper
 */
export interface OrderPaymentWrapper {
    /**
     *
     * @type {number}
     * @memberof OrderPaymentWrapper
     */
    amount?: number;
    /**
     *
     * @type {AddressWrapper}
     * @memberof OrderPaymentWrapper
     */
    billingAddress?: AddressWrapper;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    gatewayType?: string;
    /**
     *
     * @type {number}
     * @memberof OrderPaymentWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof OrderPaymentWrapper
     */
    isActive?: boolean;
    /**
     *
     * @type {number}
     * @memberof OrderPaymentWrapper
     */
    orderId?: number;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    referenceNumber?: string;
    /**
     *
     * @type {Array<PaymentTransactionWrapper>}
     * @memberof OrderPaymentWrapper
     */
    transactions?: Array<PaymentTransactionWrapper>;
    /**
     *
     * @type {string}
     * @memberof OrderPaymentWrapper
     */
    type?: string;
}
/**
 *
 * @export
 * @interface OrderWrapper
 */
export interface OrderWrapper {
    /**
     *
     * @type {Array<CartMessageWrapper>}
     * @memberof OrderWrapper
     */
    cartMessages?: Array<CartMessageWrapper>;
    /**
     *
     * @type {CustomerWrapper}
     * @memberof OrderWrapper
     */
    customer?: CustomerWrapper;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    emailAddress?: string;
    /**
     *
     * @type {Array<FulfillmentGroupWrapper>}
     * @memberof OrderWrapper
     */
    fulfillmentGroup?: Array<FulfillmentGroupWrapper>;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    fulfillmentGroupAdjustmentsValue?: Money;
    /**
     *
     * @type {number}
     * @memberof OrderWrapper
     */
    id?: number;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    itemAdjustmentsValue?: Money;
    /**
     *
     * @type {number}
     * @memberof OrderWrapper
     */
    itemCount?: number;
    /**
     *
     * @type {Array<AdjustmentWrapper>}
     * @memberof OrderWrapper
     */
    orderAdjustment?: Array<AdjustmentWrapper>;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    orderAdjustmentsValue?: Money;
    /**
     *
     * @type {Array<OrderAttributeWrapper>}
     * @memberof OrderWrapper
     */
    orderAttribute?: Array<OrderAttributeWrapper>;
    /**
     *
     * @type {Array<OrderItemWrapper>}
     * @memberof OrderWrapper
     */
    orderItem?: Array<OrderItemWrapper>;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    orderNumber?: string;
    /**
     *
     * @type {Array<OrderPaymentWrapper>}
     * @memberof OrderWrapper
     */
    payment?: Array<OrderPaymentWrapper>;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    status?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    subTotal?: Money;
    /**
     *
     * @type {string}
     * @memberof OrderWrapper
     */
    submitDate?: string;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    total?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    totalAdjustmentsValue?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    totalShipping?: Money;
    /**
     *
     * @type {Money}
     * @memberof OrderWrapper
     */
    totalTax?: Money;
}
/**
 *
 * @export
 * @interface PaymentTransactionWrapper
 */
export interface PaymentTransactionWrapper {
    /**
     *
     * @type {Array<MapElementWrapper>}
     * @memberof PaymentTransactionWrapper
     */
    additionalField?: Array<MapElementWrapper>;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    customerIpAddress?: string;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    orderPaymentId?: number;
    /**
     *
     * @type {number}
     * @memberof PaymentTransactionWrapper
     */
    parentTransactionId?: number;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    rawResponse?: string;
    /**
     *
     * @type {boolean}
     * @memberof PaymentTransactionWrapper
     */
    success?: boolean;
    /**
     *
     * @type {string}
     * @memberof PaymentTransactionWrapper
     */
    type?: string;
}
/**
 *
 * @export
 * @interface PhoneWrapper
 */
export interface PhoneWrapper {
    /**
     *
     * @type {number}
     * @memberof PhoneWrapper
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof PhoneWrapper
     */
    isActive?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PhoneWrapper
     */
    isDefault?: boolean;
    /**
     *
     * @type {string}
     * @memberof PhoneWrapper
     */
    phoneNumber?: string;
}
/**
 *
 * @export
 * @interface ProductAttributeWrapper
 */
export interface ProductAttributeWrapper {
    /**
     *
     * @type {string}
     * @memberof ProductAttributeWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof ProductAttributeWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof ProductAttributeWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {number}
     * @memberof ProductAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof ProductAttributeWrapper
     */
    productId?: number;
}
/**
 *
 * @export
 * @interface ProductOptionValueWrapper
 */
export interface ProductOptionValueWrapper {
    /**
     *
     * @type {string}
     * @memberof ProductOptionValueWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionValueWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {Money}
     * @memberof ProductOptionValueWrapper
     */
    priceAdjustment?: Money;
    /**
     *
     * @type {number}
     * @memberof ProductOptionValueWrapper
     */
    productOptionId?: number;
}
/**
 *
 * @export
 * @interface ProductOptionWrapper
 */
export interface ProductOptionWrapper {
    /**
     *
     * @type {Array<ProductOptionValueWrapper>}
     * @memberof ProductOptionWrapper
     */
    allowedValue?: Array<ProductOptionValueWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    productOptionType?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    productOptionValidationStrategyType?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    productOptionValidationType?: string;
    /**
     *
     * @type {boolean}
     * @memberof ProductOptionWrapper
     */
    required?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProductOptionWrapper
     */
    validationString?: string;
}
/**
 *
 * @export
 * @interface ProductWrapper
 */
export interface ProductWrapper {
    /**
     *
     * @type {boolean}
     * @memberof ProductWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {Array<SkuWrapper>}
     * @memberof ProductWrapper
     */
    additionalSkus?: Array<SkuWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    archived?: string;
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    bundleItemsRetailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    bundleItemsSalePrice?: Money;
    /**
     *
     * @type {Array<RelatedProductWrapper>}
     * @memberof ProductWrapper
     */
    crossSaleProduct?: Array<RelatedProductWrapper>;
    /**
     *
     * @type {number}
     * @memberof ProductWrapper
     */
    defaultCategoryId?: number;
    /**
     *
     * @type {SkuWrapper}
     * @memberof ProductWrapper
     */
    defaultSku?: SkuWrapper;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    description?: string;
    /**
     *
     * @type {DynamicSkuPricesWrapper}
     * @memberof ProductWrapper
     */
    dynamicSkuPrices?: DynamicSkuPricesWrapper;
    /**
     *
     * @type {number}
     * @memberof ProductWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    manufacturer?: string;
    /**
     *
     * @type {Array<MediaWrapper>}
     * @memberof ProductWrapper
     */
    media?: Array<MediaWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    model?: string;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    name?: string;
    /**
     *
     * @type {MediaWrapper}
     * @memberof ProductWrapper
     */
    primaryMedia?: MediaWrapper;
    /**
     *
     * @type {number}
     * @memberof ProductWrapper
     */
    priority?: number;
    /**
     *
     * @type {Array<ProductAttributeWrapper>}
     * @memberof ProductWrapper
     */
    productAttribute?: Array<ProductAttributeWrapper>;
    /**
     *
     * @type {Array<ProductOptionWrapper>}
     * @memberof ProductWrapper
     */
    productOption?: Array<ProductOptionWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    promoMessage?: string;
    /**
     *
     * @type {{ [key: string]: Array<PromotionMessageDTOWrapper>; }}
     * @memberof ProductWrapper
     */
    promotionMessages?: {
        [key: string]: Array<PromotionMessageDTOWrapper>;
    };
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof ProductWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {Array<SkuBundleItemWrapper>}
     * @memberof ProductWrapper
     */
    skuBundleItem?: Array<SkuBundleItemWrapper>;
    /**
     *
     * @type {Array<RelatedProductWrapper>}
     * @memberof ProductWrapper
     */
    upsaleProduct?: Array<RelatedProductWrapper>;
    /**
     *
     * @type {string}
     * @memberof ProductWrapper
     */
    url?: string;
}
/**
 *
 * @export
 * @interface PromotionMessageDTOWrapper
 */
export interface PromotionMessageDTOWrapper {
    /**
     *
     * @type {string}
     * @memberof PromotionMessageDTOWrapper
     */
    localeCode?: string;
    /**
     *
     * @type {MediaWrapper}
     * @memberof PromotionMessageDTOWrapper
     */
    media?: MediaWrapper;
    /**
     *
     * @type {string}
     * @memberof PromotionMessageDTOWrapper
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof PromotionMessageDTOWrapper
     */
    messagePlacement?: string;
    /**
     *
     * @type {number}
     * @memberof PromotionMessageDTOWrapper
     */
    priority?: number;
}
/**
 *
 * @export
 * @interface RatingDetailWrapper
 */
export interface RatingDetailWrapper {
    /**
     *
     * @type {number}
     * @memberof RatingDetailWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof RatingDetailWrapper
     */
    rating?: number;
    /**
     *
     * @type {string}
     * @memberof RatingDetailWrapper
     */
    ratingSubmittedDate?: string;
}
/**
 *
 * @export
 * @interface RatingSummaryWrapper
 */
export interface RatingSummaryWrapper {
    /**
     *
     * @type {number}
     * @memberof RatingSummaryWrapper
     */
    averageRating?: number;
    /**
     *
     * @type {ReviewDetailWrapper}
     * @memberof RatingSummaryWrapper
     */
    currentCustomerReview?: ReviewDetailWrapper;
    /**
     *
     * @type {number}
     * @memberof RatingSummaryWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof RatingSummaryWrapper
     */
    itemId?: string;
    /**
     *
     * @type {number}
     * @memberof RatingSummaryWrapper
     */
    numberOfRatings?: number;
    /**
     *
     * @type {number}
     * @memberof RatingSummaryWrapper
     */
    numberOfReviews?: number;
    /**
     *
     * @type {Array<RatingDetailWrapper>}
     * @memberof RatingSummaryWrapper
     */
    rating?: Array<RatingDetailWrapper>;
    /**
     *
     * @type {string}
     * @memberof RatingSummaryWrapper
     */
    ratingType?: string;
    /**
     *
     * @type {Array<ReviewDetailWrapper>}
     * @memberof RatingSummaryWrapper
     */
    review?: Array<ReviewDetailWrapper>;
}
/**
 *
 * @export
 * @interface RelatedProductWrapper
 */
export interface RelatedProductWrapper {
    /**
     *
     * @type {string}
     * @memberof RelatedProductWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof RelatedProductWrapper
     */
    id?: number;
    /**
     *
     * @type {ProductWrapper}
     * @memberof RelatedProductWrapper
     */
    product?: ProductWrapper;
    /**
     *
     * @type {string}
     * @memberof RelatedProductWrapper
     */
    promotionalMessage?: string;
    /**
     *
     * @type {number}
     * @memberof RelatedProductWrapper
     */
    sequence?: number;
}
/**
 *
 * @export
 * @interface ReviewDetailWrapper
 */
export interface ReviewDetailWrapper {
    /**
     *
     * @type {string}
     * @memberof ReviewDetailWrapper
     */
    author?: string;
    /**
     *
     * @type {number}
     * @memberof ReviewDetailWrapper
     */
    helpfulCount?: number;
    /**
     *
     * @type {number}
     * @memberof ReviewDetailWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof ReviewDetailWrapper
     */
    notHelpfulCount?: number;
    /**
     *
     * @type {RatingDetailWrapper}
     * @memberof ReviewDetailWrapper
     */
    ratingDetail?: RatingDetailWrapper;
    /**
     *
     * @type {Array<ReviewFeedbackWrapper>}
     * @memberof ReviewDetailWrapper
     */
    reviewFeedback?: Array<ReviewFeedbackWrapper>;
    /**
     *
     * @type {string}
     * @memberof ReviewDetailWrapper
     */
    reviewStatus?: string;
    /**
     *
     * @type {string}
     * @memberof ReviewDetailWrapper
     */
    reviewSubmittedDate?: string;
    /**
     *
     * @type {string}
     * @memberof ReviewDetailWrapper
     */
    reviewText?: string;
}
/**
 *
 * @export
 * @interface ReviewFeedbackWrapper
 */
export interface ReviewFeedbackWrapper {
    /**
     *
     * @type {boolean}
     * @memberof ReviewFeedbackWrapper
     */
    helpful?: boolean;
    /**
     *
     * @type {number}
     * @memberof ReviewFeedbackWrapper
     */
    id?: number;
}
/**
 *
 * @export
 * @interface SearchFacetValueWrapper
 */
export interface SearchFacetValueWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SearchFacetValueWrapper
     */
    active?: boolean;
    /**
     *
     * @type {number}
     * @memberof SearchFacetValueWrapper
     */
    maxValue?: number;
    /**
     *
     * @type {number}
     * @memberof SearchFacetValueWrapper
     */
    minValue?: number;
    /**
     *
     * @type {number}
     * @memberof SearchFacetValueWrapper
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof SearchFacetValueWrapper
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof SearchFacetValueWrapper
     */
    valueKey?: string;
}
/**
 *
 * @export
 * @interface SearchFacetWrapper
 */
export interface SearchFacetWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SearchFacetWrapper
     */
    active?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof SearchFacetWrapper
     */
    canMultiselect?: boolean;
    /**
     *
     * @type {string}
     * @memberof SearchFacetWrapper
     */
    fieldName?: string;
    /**
     *
     * @type {string}
     * @memberof SearchFacetWrapper
     */
    label?: string;
    /**
     *
     * @type {Array<SearchFacetValueWrapper>}
     * @memberof SearchFacetWrapper
     */
    values?: Array<SearchFacetValueWrapper>;
}
/**
 *
 * @export
 * @interface SearchResultsWrapper
 */
export interface SearchResultsWrapper {
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    page?: number;
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    pageSize?: number;
    /**
     *
     * @type {Array<ProductWrapper>}
     * @memberof SearchResultsWrapper
     */
    product?: Array<ProductWrapper>;
    /**
     *
     * @type {Array<SearchFacetWrapper>}
     * @memberof SearchResultsWrapper
     */
    searchFacet?: Array<SearchFacetWrapper>;
    /**
     *
     * @type {Array<SkuWrapper>}
     * @memberof SearchResultsWrapper
     */
    sku?: Array<SkuWrapper>;
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof SearchResultsWrapper
     */
    totalResults?: number;
}
/**
 *
 * @export
 * @interface SkuAttributeWrapper
 */
export interface SkuAttributeWrapper {
    /**
     *
     * @type {string}
     * @memberof SkuAttributeWrapper
     */
    archived?: string;
    /**
     *
     * @type {string}
     * @memberof SkuAttributeWrapper
     */
    attributeName?: string;
    /**
     *
     * @type {string}
     * @memberof SkuAttributeWrapper
     */
    attributeValue?: string;
    /**
     *
     * @type {number}
     * @memberof SkuAttributeWrapper
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof SkuAttributeWrapper
     */
    skuId?: number;
}
/**
 *
 * @export
 * @interface SkuBundleItemWrapper
 */
export interface SkuBundleItemWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SkuBundleItemWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    archived?: string;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    bundleId?: number;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof SkuBundleItemWrapper
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    productId?: number;
    /**
     *
     * @type {number}
     * @memberof SkuBundleItemWrapper
     */
    quantity?: number;
    /**
     *
     * @type {Money}
     * @memberof SkuBundleItemWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof SkuBundleItemWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {SkuWrapper}
     * @memberof SkuBundleItemWrapper
     */
    sku?: SkuWrapper;
}
/**
 *
 * @export
 * @interface SkuWrapper
 */
export interface SkuWrapper {
    /**
     *
     * @type {boolean}
     * @memberof SkuWrapper
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    activeEndDate?: string;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    activeStartDate?: string;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    archived?: string;
    /**
     *
     * @type {boolean}
     * @memberof SkuWrapper
     */
    available?: boolean;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    description?: string;
    /**
     *
     * @type {DimensionWrapper}
     * @memberof SkuWrapper
     */
    dimension?: DimensionWrapper;
    /**
     *
     * @type {number}
     * @memberof SkuWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    inventoryType?: string;
    /**
     *
     * @type {string}
     * @memberof SkuWrapper
     */
    name?: string;
    /**
     *
     * @type {Money}
     * @memberof SkuWrapper
     */
    retailPrice?: Money;
    /**
     *
     * @type {Money}
     * @memberof SkuWrapper
     */
    salePrice?: Money;
    /**
     *
     * @type {WeightWrapper}
     * @memberof SkuWrapper
     */
    weight?: WeightWrapper;
}
/**
 *
 * @export
 * @interface StateWrapper
 */
export interface StateWrapper {
    /**
     *
     * @type {string}
     * @memberof StateWrapper
     */
    abbreviation?: string;
    /**
     *
     * @type {string}
     * @memberof StateWrapper
     */
    name?: string;
}
/**
 *
 * @export
 * @interface TaxDetailWrapper
 */
export interface TaxDetailWrapper {
    /**
     *
     * @type {Money}
     * @memberof TaxDetailWrapper
     */
    amount?: Money;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    currency?: string;
    /**
     *
     * @type {number}
     * @memberof TaxDetailWrapper
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    jurisdictionName?: string;
    /**
     *
     * @type {number}
     * @memberof TaxDetailWrapper
     */
    rate?: number;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof TaxDetailWrapper
     */
    taxName?: string;
    /**
     *
     * @type {BroadleafEnumerationTypeWrapper}
     * @memberof TaxDetailWrapper
     */
    taxType?: BroadleafEnumerationTypeWrapper;
}
/**
 *
 * @export
 * @interface View
 */
export interface View {
    /**
     *
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}
/**
 *
 * @export
 * @interface WeightWrapper
 */
export interface WeightWrapper {
    /**
     *
     * @type {string}
     * @memberof WeightWrapper
     */
    unitOfMeasure?: string;
    /**
     *
     * @type {number}
     * @memberof WeightWrapper
     */
    weight?: number;
}
/**
 * AuditEventsMvcEndpointApi - axios parameter creator
 * @export
 */
export declare const AuditEventsMvcEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByPrincipalAndAfterAndTypeUsingGET5: (principal?: string, after?: string, type?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByPrincipalAndAfterAndTypeUsingGET7: (principal?: string, after?: string, type?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * AuditEventsMvcEndpointApi - functional programming interface
 * @export
 */
export declare const AuditEventsMvcEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByPrincipalAndAfterAndTypeUsingGET5(principal?: string, after?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByPrincipalAndAfterAndTypeUsingGET7(principal?: string, after?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * AuditEventsMvcEndpointApi - factory interface
 * @export
 */
export declare const AuditEventsMvcEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByPrincipalAndAfterAndTypeUsingGET5(principal?: string, after?: string, type?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findByPrincipalAndAfterAndTypeUsingGET7(principal?: string, after?: string, type?: string, options?: any): AxiosPromise<object>;
};
/**
 * AuditEventsMvcEndpointApi - object-oriented interface
 * @export
 * @class AuditEventsMvcEndpointApi
 * @extends {BaseAPI}
 */
export declare class AuditEventsMvcEndpointApi extends BaseAPI {
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditEventsMvcEndpointApi
     */
    findByPrincipalAndAfterAndTypeUsingGET5(principal?: string, after?: string, type?: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary findByPrincipalAndAfterAndType
     * @param {string} [principal] principal
     * @param {string} [after] after
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditEventsMvcEndpointApi
     */
    findByPrincipalAndAfterAndTypeUsingGET7(principal?: string, after?: string, type?: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * BasicErrorControllerApi - axios parameter creator
 * @export
 */
export declare const BasicErrorControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingDELETE3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingGET3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingHEAD3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingOPTIONS3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPATCH3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPOST3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPUT3: (options?: any) => Promise<RequestArgs>;
};
/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export declare const BasicErrorControllerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingDELETE3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingGET3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingHEAD3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingOPTIONS3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPATCH3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPOST3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPUT3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelAndView>>;
};
/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export declare const BasicErrorControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingDELETE3(options?: any): AxiosPromise<ModelAndView>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingGET3(options?: any): AxiosPromise<ModelAndView>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingHEAD3(options?: any): AxiosPromise<ModelAndView>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingOPTIONS3(options?: any): AxiosPromise<ModelAndView>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPATCH3(options?: any): AxiosPromise<ModelAndView>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPOST3(options?: any): AxiosPromise<ModelAndView>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errorHtmlUsingPUT3(options?: any): AxiosPromise<ModelAndView>;
};
/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export declare class BasicErrorControllerApi extends BaseAPI {
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingDELETE3(options?: any): Promise<import("axios").AxiosResponse<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingGET3(options?: any): Promise<import("axios").AxiosResponse<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingHEAD3(options?: any): Promise<import("axios").AxiosResponse<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingOPTIONS3(options?: any): Promise<import("axios").AxiosResponse<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingPATCH3(options?: any): Promise<import("axios").AxiosResponse<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingPOST3(options?: any): Promise<import("axios").AxiosResponse<ModelAndView>>;
    /**
     *
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    errorHtmlUsingPUT3(options?: any): Promise<import("axios").AxiosResponse<ModelAndView>>;
}
/**
 * CartEndpointApi - axios parameter creator
 * @export
 */
export declare const CartEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToOrderUsingPOST3: (cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOfferCodeUsingPOST3: (promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCartForCustomerUsingPOST3: (customerId?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderAttributesUsingDELETE3: (cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductOptionsUsingDELETE3: (cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartByIdUsingGET3: (cartId: number, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllOfferCodesUsingDELETE3: (cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromOrderUsingDELETE3: (itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOfferCodeUsingDELETE3: (promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemQuantityUsingPUT3: (itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderAttributesUsingPUT3: (cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductOptionsUsingPUT3: (cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * CartEndpointApi - functional programming interface
 * @export
 */
export declare const CartEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToOrderUsingPOST3(cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOfferCodeUsingPOST3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCartForCustomerUsingPOST3(customerId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderAttributesUsingDELETE3(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductOptionsUsingDELETE3(cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartByIdUsingGET3(cartId: number, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllOfferCodesUsingDELETE3(cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromOrderUsingDELETE3(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOfferCodeUsingDELETE3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemQuantityUsingPUT3(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderAttributesUsingPUT3(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductOptionsUsingPUT3(cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
};
/**
 * CartEndpointApi - factory interface
 * @export
 */
export declare const CartEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToOrderUsingPOST3(cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOfferCodeUsingPOST3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewCartForCustomerUsingPOST3(customerId?: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderAttributesUsingDELETE3(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductOptionsUsingDELETE3(cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartByIdUsingGET3(cartId: number, customerId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllOfferCodesUsingDELETE3(cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromOrderUsingDELETE3(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOfferCodeUsingDELETE3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemQuantityUsingPUT3(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderAttributesUsingPUT3(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductOptionsUsingPUT3(cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
};
/**
 * CartEndpointApi - object-oriented interface
 * @export
 * @class CartEndpointApi
 * @extends {BaseAPI}
 */
export declare class CartEndpointApi extends BaseAPI {
    /**
     *
     * @summary addItemToOrder
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addItemToOrderUsingPOST3(cartId: number, customerId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary addOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    addOfferCodeUsingPOST3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary createNewCartForCustomer
     * @param {number} [customerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    createNewCartForCustomerUsingPOST3(customerId?: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary deleteOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteOrderAttributesUsingDELETE3(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary deleteProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {Array<OrderItemAttributeWrapper>} [requestParams] requestParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    deleteProductOptionsUsingDELETE3(cartId: number, itemId: number, customerId: number, priceOrder?: boolean, requestParams?: Array<OrderItemAttributeWrapper>, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary findCartById
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    findCartByIdUsingGET3(cartId: number, customerId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeAllOfferCodes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeAllOfferCodesUsingDELETE3(cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromOrder
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeItemFromOrderUsingDELETE3(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeOfferCode
     * @param {string} promoCode promoCode
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    removeOfferCodeUsingDELETE3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateItemQuantity
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {number} quantity quantity
     * @param {number} customerId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateItemQuantityUsingPUT3(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateOrderAttributes
     * @param {number} cartId cartId
     * @param {number} customerId
     * @param {Array<OrderAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateOrderAttributesUsingPUT3(cartId: number, customerId: number, requestParams: Array<OrderAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateProductOptions
     * @param {number} cartId cartId
     * @param {number} itemId itemId
     * @param {number} customerId
     * @param {Array<OrderItemAttributeWrapper>} requestParams requestParams
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartEndpointApi
     */
    updateProductOptionsUsingPUT3(cartId: number, itemId: number, customerId: number, requestParams: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
}
/**
 * CatalogEndpointApi - axios parameter creator
 * @export
 */
export declare const CatalogEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findActiveSubCategoriesUsingGET3: (categoryId: number, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCategoriesUsingGET3: (name?: string, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryAttributesForCategoryUsingGET3: (categoryId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdOrNameUsingGET3: (searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdUsingGET3: (categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCrossSaleProductsByProductUsingGET3: (productId: number, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultSkuByProductIdUsingGET3: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkusUsingGET3: (id: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForCategoryUsingGET3: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForProductUsingGET3: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForSkuUsingGET3: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findParentCategoriesForProductUsingGET3: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductAttributesForProductUsingGET3: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductByIdUsingGET3: (id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByCategoryAndQueryUsingGET3: (categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByQueryUsingGET3: (q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuAttributesForSkuUsingGET3: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuByIdUsingGET3: (skuId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkusByProductByIdUsingGET3: (productId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSubCategoriesUsingGET3: (categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUpSaleProductsByProductUsingGET3: (productId: number, limit?: number, offset?: number, options?: any) => Promise<RequestArgs>;
};
/**
 * CatalogEndpointApi - functional programming interface
 * @export
 */
export declare const CatalogEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findActiveSubCategoriesUsingGET3(categoryId: number, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCategoriesUsingGET3(name?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryAttributesForCategoryUsingGET3(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryAttributeWrapper>>>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdOrNameUsingGET3(searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryWrapper>>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdUsingGET3(categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryWrapper>>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCrossSaleProductsByProductUsingGET3(productId: number, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedProductWrapper>>>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultSkuByProductIdUsingGET3(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuWrapper>>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkusUsingGET3(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWrapper>>>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForCategoryUsingGET3(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaWrapper>>>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForProductUsingGET3(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaWrapper>>>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForSkuUsingGET3(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaWrapper>>>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findParentCategoriesForProductUsingGET3(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductAttributesForProductUsingGET3(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAttributeWrapper>>>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductByIdUsingGET3(id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductWrapper>>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByCategoryAndQueryUsingGET3(categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultsWrapper>>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByQueryUsingGET3(q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultsWrapper>>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuAttributesForSkuUsingGET3(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkuAttributeWrapper>>>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuByIdUsingGET3(skuId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuWrapper>>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkusByProductByIdUsingGET3(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkuWrapper>>>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSubCategoriesUsingGET3(categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriesWrapper>>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUpSaleProductsByProductUsingGET3(productId: number, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedProductWrapper>>>;
};
/**
 * CatalogEndpointApi - factory interface
 * @export
 */
export declare const CatalogEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findActiveSubCategoriesUsingGET3(categoryId: number, limit?: number, offset?: number, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCategoriesUsingGET3(name?: string, limit?: number, offset?: number, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryAttributesForCategoryUsingGET3(categoryId: number, options?: any): AxiosPromise<Array<CategoryAttributeWrapper>>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdOrNameUsingGET3(searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): AxiosPromise<CategoryWrapper>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByIdUsingGET3(categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): AxiosPromise<CategoryWrapper>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCrossSaleProductsByProductUsingGET3(productId: number, limit?: number, offset?: number, options?: any): AxiosPromise<Array<RelatedProductWrapper>>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDefaultSkuByProductIdUsingGET3(productId: number, options?: any): AxiosPromise<SkuWrapper>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInventoryForSkusUsingGET3(id: Array<number>, options?: any): AxiosPromise<Array<InventoryWrapper>>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForCategoryUsingGET3(id: number, options?: any): AxiosPromise<Array<MediaWrapper>>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForProductUsingGET3(productId: number, options?: any): AxiosPromise<Array<MediaWrapper>>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMediaForSkuUsingGET3(skuId: number, options?: any): AxiosPromise<Array<MediaWrapper>>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findParentCategoriesForProductUsingGET3(productId: number, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductAttributesForProductUsingGET3(productId: number, options?: any): AxiosPromise<Array<ProductAttributeWrapper>>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProductByIdUsingGET3(id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<ProductWrapper>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByCategoryAndQueryUsingGET3(categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<SearchResultsWrapper>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSearchResultsByQueryUsingGET3(q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<SearchResultsWrapper>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuAttributesForSkuUsingGET3(skuId: number, options?: any): AxiosPromise<Array<SkuAttributeWrapper>>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkuByIdUsingGET3(skuId: number, options?: any): AxiosPromise<SkuWrapper>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSkusByProductByIdUsingGET3(productId: number, options?: any): AxiosPromise<Array<SkuWrapper>>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findSubCategoriesUsingGET3(categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any): AxiosPromise<CategoriesWrapper>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUpSaleProductsByProductUsingGET3(productId: number, limit?: number, offset?: number, options?: any): AxiosPromise<Array<RelatedProductWrapper>>;
};
/**
 * CatalogEndpointApi - object-oriented interface
 * @export
 * @class CatalogEndpointApi
 * @extends {BaseAPI}
 */
export declare class CatalogEndpointApi extends BaseAPI {
    /**
     *
     * @summary findActiveSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findActiveSubCategoriesUsingGET3(categoryId: number, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findAllCategories
     * @param {string} [name] name
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findAllCategoriesUsingGET3(name?: string, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findCategoryAttributesForCategory
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryAttributesForCategoryUsingGET3(categoryId: number, options?: any): Promise<import("axios").AxiosResponse<CategoryAttributeWrapper[]>>;
    /**
     *
     * @summary findCategoryByIdOrName
     * @param {string} searchParameter searchParameter
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryByIdOrNameUsingGET3(searchParameter: string, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<import("axios").AxiosResponse<CategoryWrapper>>;
    /**
     *
     * @summary findCategoryById
     * @param {number} categoryId categoryId
     * @param {number} [productLimit] productLimit
     * @param {number} [productOffset] productOffset
     * @param {number} [subcategoryLimit] subcategoryLimit
     * @param {number} [subcategoryOffset] subcategoryOffset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCategoryByIdUsingGET3(categoryId: number, productLimit?: number, productOffset?: number, subcategoryLimit?: number, subcategoryOffset?: number, options?: any): Promise<import("axios").AxiosResponse<CategoryWrapper>>;
    /**
     *
     * @summary findCrossSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findCrossSaleProductsByProductUsingGET3(productId: number, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<RelatedProductWrapper[]>>;
    /**
     *
     * @summary findDefaultSkuByProductId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findDefaultSkuByProductIdUsingGET3(productId: number, options?: any): Promise<import("axios").AxiosResponse<SkuWrapper>>;
    /**
     *
     * @summary findInventoryForSkus
     * @param {Array<number>} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findInventoryForSkusUsingGET3(id: Array<number>, options?: any): Promise<import("axios").AxiosResponse<InventoryWrapper[]>>;
    /**
     *
     * @summary findMediaForCategory
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForCategoryUsingGET3(id: number, options?: any): Promise<import("axios").AxiosResponse<MediaWrapper[]>>;
    /**
     *
     * @summary findMediaForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForProductUsingGET3(productId: number, options?: any): Promise<import("axios").AxiosResponse<MediaWrapper[]>>;
    /**
     *
     * @summary findMediaForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findMediaForSkuUsingGET3(skuId: number, options?: any): Promise<import("axios").AxiosResponse<MediaWrapper[]>>;
    /**
     *
     * @summary findParentCategoriesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findParentCategoriesForProductUsingGET3(productId: number, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findProductAttributesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findProductAttributesForProductUsingGET3(productId: number, options?: any): Promise<import("axios").AxiosResponse<ProductAttributeWrapper[]>>;
    /**
     *
     * @summary findProductById
     * @param {number} id id
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findProductByIdUsingGET3(id: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<ProductWrapper>>;
    /**
     *
     * @summary findSearchResultsByCategoryAndQuery
     * @param {number} categoryId categoryId
     * @param {string} [q] q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByCategoryAndQueryUsingGET3(categoryId: number, q?: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<SearchResultsWrapper>>;
    /**
     *
     * @summary findSearchResultsByQuery
     * @param {string} q q
     * @param {number} [pageSize] pageSize
     * @param {number} [page] page
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSearchResultsByQueryUsingGET3(q: string, pageSize?: number, page?: number, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<SearchResultsWrapper>>;
    /**
     *
     * @summary findSkuAttributesForSku
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkuAttributesForSkuUsingGET3(skuId: number, options?: any): Promise<import("axios").AxiosResponse<SkuAttributeWrapper[]>>;
    /**
     *
     * @summary findSkuById
     * @param {number} skuId skuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkuByIdUsingGET3(skuId: number, options?: any): Promise<import("axios").AxiosResponse<SkuWrapper>>;
    /**
     *
     * @summary findSkusByProductById
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSkusByProductByIdUsingGET3(productId: number, options?: any): Promise<import("axios").AxiosResponse<SkuWrapper[]>>;
    /**
     *
     * @summary findSubCategories
     * @param {number} categoryId categoryId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {boolean} [active] active
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findSubCategoriesUsingGET3(categoryId: number, limit?: number, offset?: number, active?: boolean, options?: any): Promise<import("axios").AxiosResponse<CategoriesWrapper>>;
    /**
     *
     * @summary findUpSaleProductsByProduct
     * @param {number} productId productId
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogEndpointApi
     */
    findUpSaleProductsByProductUsingGET3(productId: number, limit?: number, offset?: number, options?: any): Promise<import("axios").AxiosResponse<RelatedProductWrapper[]>>;
}
/**
 * CategoryEndpointApi - axios parameter creator
 * @export
 */
export declare const CategoryEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findCategoryByUrl
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByUrlUsingGET3: (query: string, options?: any) => Promise<RequestArgs>;
};
/**
 * CategoryEndpointApi - functional programming interface
 * @export
 */
export declare const CategoryEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findCategoryByUrl
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByUrlUsingGET3(query: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomCategory>>;
};
/**
 * CategoryEndpointApi - factory interface
 * @export
 */
export declare const CategoryEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findCategoryByUrl
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoryByUrlUsingGET3(query: string, options?: any): AxiosPromise<CustomCategory>;
};
/**
 * CategoryEndpointApi - object-oriented interface
 * @export
 * @class CategoryEndpointApi
 * @extends {BaseAPI}
 */
export declare class CategoryEndpointApi extends BaseAPI {
    /**
     *
     * @summary findCategoryByUrl
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointApi
     */
    findCategoryByUrlUsingGET3(query: string, options?: any): Promise<import("axios").AxiosResponse<CustomCategory>>;
}
/**
 * CheckoutEndpointApi - axios parameter creator
 * @export
 */
export declare const CheckoutEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrderPaymentTransactionUsingPUT3: (paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderByIdUsingPOST3: (amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderUsingPOST3: (cartId: number, wrapper: OrderPaymentWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPaymentsForOrderUsingGET3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performCheckoutUsingPOST3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePaymentFromOrderByIdUsingDELETE3: (paymentId: number, cartId: number, options?: any) => Promise<RequestArgs>;
};
/**
 * CheckoutEndpointApi - functional programming interface
 * @export
 */
export declare const CheckoutEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrderPaymentTransactionUsingPUT3(paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderByIdUsingPOST3(amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderUsingPOST3(cartId: number, wrapper: OrderPaymentWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPaymentWrapper>>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPaymentsForOrderUsingGET3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderPaymentWrapper>>>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performCheckoutUsingPOST3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePaymentFromOrderByIdUsingDELETE3(paymentId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
};
/**
 * CheckoutEndpointApi - factory interface
 * @export
 */
export declare const CheckoutEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrderPaymentTransactionUsingPUT3(paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any): AxiosPromise<OrderPaymentWrapper>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderByIdUsingPOST3(amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any): AxiosPromise<OrderPaymentWrapper>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPaymentToOrderUsingPOST3(cartId: number, wrapper: OrderPaymentWrapper, options?: any): AxiosPromise<OrderPaymentWrapper>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPaymentsForOrderUsingGET3(cartId: number, options?: any): AxiosPromise<Array<OrderPaymentWrapper>>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performCheckoutUsingPOST3(cartId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePaymentFromOrderByIdUsingDELETE3(paymentId: number, cartId: number, options?: any): AxiosPromise<OrderWrapper>;
};
/**
 * CheckoutEndpointApi - object-oriented interface
 * @export
 * @class CheckoutEndpointApi
 * @extends {BaseAPI}
 */
export declare class CheckoutEndpointApi extends BaseAPI {
    /**
     *
     * @summary addOrderPaymentTransaction
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {PaymentTransactionWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    addOrderPaymentTransactionUsingPUT3(paymentId: number, cartId: number, wrapper: PaymentTransactionWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrderById
     * @param {number} amount amount
     * @param {string} currency currency
     * @param {number} customerPaymentId customerPaymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    addPaymentToOrderByIdUsingPOST3(amount: number, currency: string, customerPaymentId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper>>;
    /**
     *
     * @summary addPaymentToOrder
     * @param {number} cartId cartId
     * @param {OrderPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    addPaymentToOrderUsingPOST3(cartId: number, wrapper: OrderPaymentWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper>>;
    /**
     *
     * @summary findPaymentsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    findPaymentsForOrderUsingGET3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderPaymentWrapper[]>>;
    /**
     *
     * @summary performCheckout
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    performCheckoutUsingPOST3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removePaymentFromOrderById
     * @param {number} paymentId paymentId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutEndpointApi
     */
    removePaymentFromOrderByIdUsingDELETE3(paymentId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
}
/**
 * CustomCartEndpointApi - axios parameter creator
 * @export
 */
export declare const CustomCartEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartForCustomerUsingGET3: (customerId: number, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomCartEndpointApi - functional programming interface
 * @export
 */
export declare const CustomCartEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartForCustomerUsingGET3(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
};
/**
 * CustomCartEndpointApi - factory interface
 * @export
 */
export declare const CustomCartEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCartForCustomerUsingGET3(customerId: number, options?: any): AxiosPromise<OrderWrapper>;
};
/**
 * CustomCartEndpointApi - object-oriented interface
 * @export
 * @class CustomCartEndpointApi
 * @extends {BaseAPI}
 */
export declare class CustomCartEndpointApi extends BaseAPI {
    /**
     *
     * @summary findCartForCustomer
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCartEndpointApi
     */
    findCartForCustomerUsingGET3(customerId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
}
/**
 * CustomerEndpointApi - axios parameter creator
 * @export
 */
export declare const CustomerEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddressUsingPUT3: (customerId: number, wrapper: CustomerAddressWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAttributeUsingPUT3: (customerId: number, wrapper: CustomerAttributeWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerPaymentUsingPOST3: (customerId: number, wrapper: CustomerPaymentWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST3: (wrapper: CustomerWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST3: (changePasswordForm: ChangePasswordForm, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAddressUsingGET3: (addressName: string, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllAddressesUsingGET3: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCustomerPaymentsUsingGET3: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerByEmailUsingGET3: (email: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerPaymentUsingGET3: (paymentId: number, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddressUsingDELETE3: (addressName: string, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAddressesUsingDELETE3: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAttributesUsingDELETE3: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllCustomerPaymentsUsingDELETE3: (customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAttributeUsingDELETE3: (attributeName: string, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCustomerPaymentUsingDELETE3: (paymentId: number, customerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAddressUsingPUT3: (addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentUsingPUT3: (paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPUT3: (customerId: number, wrapper: CustomerWrapper, options?: any) => Promise<RequestArgs>;
};
/**
 * CustomerEndpointApi - functional programming interface
 * @export
 */
export declare const CustomerEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddressUsingPUT3(customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressWrapper>>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAttributeUsingPUT3(customerId: number, wrapper: CustomerAttributeWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerPaymentUsingPOST3(customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentWrapper>>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST3(wrapper: CustomerWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST3(changePasswordForm: ChangePasswordForm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAddressUsingGET3(addressName: string, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressWrapper>>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllAddressesUsingGET3(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerAddressWrapper>>>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCustomerPaymentsUsingGET3(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerPaymentWrapper>>>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerByEmailUsingGET3(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerPaymentUsingGET3(paymentId: number, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentWrapper>>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddressUsingDELETE3(addressName: string, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerAddressWrapper>>>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAddressesUsingDELETE3(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAttributesUsingDELETE3(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllCustomerPaymentsUsingDELETE3(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAttributeUsingDELETE3(attributeName: string, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCustomerPaymentUsingDELETE3(paymentId: number, customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerPaymentWrapper>>>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAddressUsingPUT3(addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressWrapper>>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentUsingPUT3(paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentWrapper>>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPUT3(customerId: number, wrapper: CustomerWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWrapper>>;
};
/**
 * CustomerEndpointApi - factory interface
 * @export
 */
export declare const CustomerEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddressUsingPUT3(customerId: number, wrapper: CustomerAddressWrapper, options?: any): AxiosPromise<CustomerAddressWrapper>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAttributeUsingPUT3(customerId: number, wrapper: CustomerAttributeWrapper, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerPaymentUsingPOST3(customerId: number, wrapper: CustomerPaymentWrapper, options?: any): AxiosPromise<CustomerPaymentWrapper>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST3(wrapper: CustomerWrapper, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordUsingPOST3(changePasswordForm: ChangePasswordForm, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAddressUsingGET3(addressName: string, customerId: number, options?: any): AxiosPromise<CustomerAddressWrapper>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllAddressesUsingGET3(customerId: number, options?: any): AxiosPromise<Array<CustomerAddressWrapper>>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllCustomerPaymentsUsingGET3(customerId: number, options?: any): AxiosPromise<Array<CustomerPaymentWrapper>>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerByEmailUsingGET3(email: string, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCustomerPaymentUsingGET3(paymentId: number, customerId: number, options?: any): AxiosPromise<CustomerPaymentWrapper>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAddressUsingDELETE3(addressName: string, customerId: number, options?: any): AxiosPromise<Array<CustomerAddressWrapper>>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAddressesUsingDELETE3(customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllAttributesUsingDELETE3(customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllCustomerPaymentsUsingDELETE3(customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAttributeUsingDELETE3(attributeName: string, customerId: number, options?: any): AxiosPromise<CustomerWrapper>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCustomerPaymentUsingDELETE3(paymentId: number, customerId: number, options?: any): AxiosPromise<Array<CustomerPaymentWrapper>>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAddressUsingPUT3(addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any): AxiosPromise<CustomerAddressWrapper>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPaymentUsingPUT3(paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any): AxiosPromise<CustomerPaymentWrapper>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPUT3(customerId: number, wrapper: CustomerWrapper, options?: any): AxiosPromise<CustomerWrapper>;
};
/**
 * CustomerEndpointApi - object-oriented interface
 * @export
 * @class CustomerEndpointApi
 * @extends {BaseAPI}
 */
export declare class CustomerEndpointApi extends BaseAPI {
    /**
     *
     * @summary addAddress
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAddressUsingPUT3(customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper>>;
    /**
     *
     * @summary addAttribute
     * @param {number} customerId
     * @param {CustomerAttributeWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addAttributeUsingPUT3(customerId: number, wrapper: CustomerAttributeWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary addCustomerPayment
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerPaymentUsingPOST3(customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper>>;
    /**
     *
     * @summary addCustomer
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    addCustomerUsingPOST3(wrapper: CustomerWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary changePassword
     * @param {ChangePasswordForm} changePasswordForm changePasswordForm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    changePasswordUsingPOST3(changePasswordForm: ChangePasswordForm, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary findAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAddressUsingGET3(addressName: string, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper>>;
    /**
     *
     * @summary findAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllAddressesUsingGET3(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper[]>>;
    /**
     *
     * @summary findAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findAllCustomerPaymentsUsingGET3(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper[]>>;
    /**
     *
     * @summary findCustomerByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerByEmailUsingGET3(email: string, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary findCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    findCustomerPaymentUsingGET3(paymentId: number, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper>>;
    /**
     *
     * @summary removeAddress
     * @param {string} addressName addressName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAddressUsingDELETE3(addressName: string, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper[]>>;
    /**
     *
     * @summary removeAllAddresses
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAddressesUsingDELETE3(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeAllAttributes
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllAttributesUsingDELETE3(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeAllCustomerPayments
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAllCustomerPaymentsUsingDELETE3(customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeAttribute
     * @param {string} attributeName attributeName
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeAttributeUsingDELETE3(attributeName: string, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
    /**
     *
     * @summary removeCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    removeCustomerPaymentUsingDELETE3(paymentId: number, customerId: number, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper[]>>;
    /**
     *
     * @summary updateAddress
     * @param {number} addressId addressId
     * @param {number} customerId
     * @param {CustomerAddressWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateAddressUsingPUT3(addressId: number, customerId: number, wrapper: CustomerAddressWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerAddressWrapper>>;
    /**
     *
     * @summary updateCustomerPayment
     * @param {number} paymentId paymentId
     * @param {number} customerId
     * @param {CustomerPaymentWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerPaymentUsingPUT3(paymentId: number, customerId: number, wrapper: CustomerPaymentWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerPaymentWrapper>>;
    /**
     *
     * @summary updateCustomer
     * @param {number} customerId
     * @param {CustomerWrapper} wrapper wrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEndpointApi
     */
    updateCustomerUsingPUT3(customerId: number, wrapper: CustomerWrapper, options?: any): Promise<import("axios").AxiosResponse<CustomerWrapper>>;
}
/**
 * EndpointMvcAdapterApi - axios parameter creator
 * @export
 */
export declare const EndpointMvcAdapterApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET49: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET51: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET53: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET55: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET57: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET59: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET61: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET63: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET65: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET67: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET69: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET71: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET73: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET75: (options?: any) => Promise<RequestArgs>;
};
/**
 * EndpointMvcAdapterApi - functional programming interface
 * @export
 */
export declare const EndpointMvcAdapterApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET49(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET51(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET53(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET55(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET57(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET59(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET61(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET63(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET65(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET67(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET69(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET71(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET73(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET75(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * EndpointMvcAdapterApi - factory interface
 * @export
 */
export declare const EndpointMvcAdapterApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET49(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET51(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET53(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET55(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET57(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET59(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET61(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET63(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET65(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET67(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET69(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET71(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET73(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET75(options?: any): AxiosPromise<object>;
};
/**
 * EndpointMvcAdapterApi - object-oriented interface
 * @export
 * @class EndpointMvcAdapterApi
 * @extends {BaseAPI}
 */
export declare class EndpointMvcAdapterApi extends BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET49(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET51(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET53(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET55(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET57(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET59(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET61(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET63(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET65(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET67(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET69(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET71(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET73(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointMvcAdapterApi
     */
    invokeUsingGET75(options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * EnvironmentMvcEndpointApi - axios parameter creator
 * @export
 */
export declare const EnvironmentMvcEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET77: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET79: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    valueUsingGET5: (name: string, options?: any) => Promise<RequestArgs>;
};
/**
 * EnvironmentMvcEndpointApi - functional programming interface
 * @export
 */
export declare const EnvironmentMvcEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET77(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET79(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    valueUsingGET5(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * EnvironmentMvcEndpointApi - factory interface
 * @export
 */
export declare const EnvironmentMvcEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET77(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET79(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    valueUsingGET5(name: string, options?: any): AxiosPromise<object>;
};
/**
 * EnvironmentMvcEndpointApi - object-oriented interface
 * @export
 * @class EnvironmentMvcEndpointApi
 * @extends {BaseAPI}
 */
export declare class EnvironmentMvcEndpointApi extends BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentMvcEndpointApi
     */
    invokeUsingGET77(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentMvcEndpointApi
     */
    invokeUsingGET79(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentMvcEndpointApi
     */
    valueUsingGET5(name: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * FulfillmentEndpointApi - axios parameter creator
 * @export
 */
export declare const FulfillmentEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentGroupToOrderUsingPOST3: (cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT3: (fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToFulfillmentGroupUsingPOST3: (fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentGroupsForOrderUsingGET3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentOptionsUsingGET3: (fulfillmentType: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingDELETE3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingGET3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingHEAD3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingOPTIONS3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPATCH3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPOST3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPUT3: (cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE3: (cartId: number, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFulfillmentGroupFromOrderUsingDELETE3: (fulfillmentGroupId: number, cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE3: (fulfillmentGroupId: number, itemId: number, cartId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT3: (fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupUsingPATCH3: (cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * FulfillmentEndpointApi - functional programming interface
 * @export
 */
export declare const FulfillmentEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentGroupToOrderUsingPOST3(cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentGroupsForOrderUsingGET3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentGroupWrapper>>>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentOptionsUsingGET3(fulfillmentType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentOptionWrapper>>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingDELETE3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingGET3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingHEAD3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingOPTIONS3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPATCH3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPOST3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPUT3(cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentEstimationWrapper>>>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId: number, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FulfillmentGroupWrapper>>>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId: number, itemId: number, cartId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupUsingPATCH3(cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentGroupWrapper>>;
};
/**
 * FulfillmentEndpointApi - factory interface
 * @export
 */
export declare const FulfillmentEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentGroupToOrderUsingPOST3(cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentGroupsForOrderUsingGET3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findFulfillmentOptionsUsingGET3(fulfillmentType: string, options?: any): AxiosPromise<Array<FulfillmentOptionWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingDELETE3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingGET3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingHEAD3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingOPTIONS3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPATCH3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPOST3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFulfillmentEstimationsUsingPUT3(cartId: number, options?: any): AxiosPromise<Array<FulfillmentEstimationWrapper>>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId: number, priceOrder?: boolean, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId: number, cartId: number, options?: any): AxiosPromise<Array<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId: number, itemId: number, cartId: number, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFulfillmentGroupUsingPATCH3(cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): AxiosPromise<FulfillmentGroupWrapper>;
};
/**
 * FulfillmentEndpointApi - object-oriented interface
 * @export
 * @class FulfillmentEndpointApi
 * @extends {BaseAPI}
 */
export declare class FulfillmentEndpointApi extends BaseAPI {
    /**
     *
     * @summary addFulfillmentGroupToOrder
     * @param {number} cartId cartId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentGroupToOrderUsingPOST3(cartId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addFulfillmentOptionToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} fulfillmentOptionId fulfillmentOptionId
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addFulfillmentOptionToFulfillmentGroupUsingPUT3(fulfillmentGroupId: number, fulfillmentOptionId: number, cartId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary addItemToFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {FulfillmentGroupItemWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    addItemToFulfillmentGroupUsingPOST3(fulfillmentGroupId: number, cartId: number, wrapper: FulfillmentGroupItemWrapper, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary findFulfillmentGroupsForOrder
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentGroupsForOrderUsingGET3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper[]>>;
    /**
     *
     * @summary findFulfillmentOptions
     * @param {string} fulfillmentType fulfillmentType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    findFulfillmentOptionsUsingGET3(fulfillmentType: string, options?: any): Promise<import("axios").AxiosResponse<FulfillmentOptionWrapper[]>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingDELETE3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingGET3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingHEAD3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingOPTIONS3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingPATCH3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingPOST3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary getFulfillmentEstimations
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    getFulfillmentEstimationsUsingPUT3(cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentEstimationWrapper[]>>;
    /**
     *
     * @summary removeAllFulfillmentGroupsFromOrder
     * @param {number} cartId cartId
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeAllFulfillmentGroupsFromOrderUsingDELETE3(cartId: number, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeFulfillmentGroupFromOrder
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeFulfillmentGroupFromOrderUsingDELETE3(fulfillmentGroupId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper[]>>;
    /**
     *
     * @summary removeOrderItemFromFulfillmentGroup
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} itemId itemId
     * @param {number} cartId cartId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    removeOrderItemFromFulfillmentGroupUsingDELETE3(fulfillmentGroupId: number, itemId: number, cartId: number, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroupAddress
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {number} cartId cartId
     * @param {AddressWrapper} address address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupAddressUsingPUT3(fulfillmentGroupId: number, cartId: number, address: AddressWrapper, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
    /**
     *
     * @summary updateFulfillmentGroup
     * @param {number} cartId cartId
     * @param {number} fulfillmentGroupId fulfillmentGroupId
     * @param {FulfillmentGroupWrapper} wrapper wrapper
     * @param {boolean} [priceOrder] priceOrder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentEndpointApi
     */
    updateFulfillmentGroupUsingPATCH3(cartId: number, fulfillmentGroupId: number, wrapper: FulfillmentGroupWrapper, priceOrder?: boolean, options?: any): Promise<import("axios").AxiosResponse<FulfillmentGroupWrapper>>;
}
/**
 * HealthMvcEndpointApi - axios parameter creator
 * @export
 */
export declare const HealthMvcEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET81: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET83: (options?: any) => Promise<RequestArgs>;
};
/**
 * HealthMvcEndpointApi - functional programming interface
 * @export
 */
export declare const HealthMvcEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET81(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET83(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * HealthMvcEndpointApi - factory interface
 * @export
 */
export declare const HealthMvcEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET81(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET83(options?: any): AxiosPromise<object>;
};
/**
 * HealthMvcEndpointApi - object-oriented interface
 * @export
 * @class HealthMvcEndpointApi
 * @extends {BaseAPI}
 */
export declare class HealthMvcEndpointApi extends BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMvcEndpointApi
     */
    invokeUsingGET81(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthMvcEndpointApi
     */
    invokeUsingGET83(options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * HeapdumpMvcEndpointApi - axios parameter creator
 * @export
 */
export declare const HeapdumpMvcEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET85: (live?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET87: (live?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * HeapdumpMvcEndpointApi - functional programming interface
 * @export
 */
export declare const HeapdumpMvcEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET85(live?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET87(live?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * HeapdumpMvcEndpointApi - factory interface
 * @export
 */
export declare const HeapdumpMvcEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET85(live?: boolean, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET87(live?: boolean, options?: any): AxiosPromise<void>;
};
/**
 * HeapdumpMvcEndpointApi - object-oriented interface
 * @export
 * @class HeapdumpMvcEndpointApi
 * @extends {BaseAPI}
 */
export declare class HeapdumpMvcEndpointApi extends BaseAPI {
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeapdumpMvcEndpointApi
     */
    invokeUsingGET85(live?: boolean, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary invoke
     * @param {boolean} [live] live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeapdumpMvcEndpointApi
     */
    invokeUsingGET87(live?: boolean, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * LoggersMvcEndpointApi - axios parameter creator
 * @export
 */
export declare const LoggersMvcEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary get
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsingGET3: (name: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET89: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET91: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary set
     * @param {string} name name
     * @param {{ [key: string]: string; }} configuration configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUsingPOST3: (name: string, configuration: {
        [key: string]: string;
    }, options?: any) => Promise<RequestArgs>;
};
/**
 * LoggersMvcEndpointApi - functional programming interface
 * @export
 */
export declare const LoggersMvcEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary get
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsingGET3(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET89(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET91(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary set
     * @param {string} name name
     * @param {{ [key: string]: string; }} configuration configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUsingPOST3(name: string, configuration: {
        [key: string]: string;
    }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * LoggersMvcEndpointApi - factory interface
 * @export
 */
export declare const LoggersMvcEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary get
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsingGET3(name: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET89(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET91(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary set
     * @param {string} name name
     * @param {{ [key: string]: string; }} configuration configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUsingPOST3(name: string, configuration: {
        [key: string]: string;
    }, options?: any): AxiosPromise<object>;
};
/**
 * LoggersMvcEndpointApi - object-oriented interface
 * @export
 * @class LoggersMvcEndpointApi
 * @extends {BaseAPI}
 */
export declare class LoggersMvcEndpointApi extends BaseAPI {
    /**
     *
     * @summary get
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    getUsingGET3(name: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    invokeUsingGET89(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    invokeUsingGET91(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary set
     * @param {string} name name
     * @param {{ [key: string]: string; }} configuration configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoggersMvcEndpointApi
     */
    setUsingPOST3(name: string, configuration: {
        [key: string]: string;
    }, options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * MetricsMvcEndpointApi - axios parameter creator
 * @export
 */
export declare const MetricsMvcEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET93: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET95: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    valueUsingGET7: (name: string, options?: any) => Promise<RequestArgs>;
};
/**
 * MetricsMvcEndpointApi - functional programming interface
 * @export
 */
export declare const MetricsMvcEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET93(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET95(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    valueUsingGET7(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * MetricsMvcEndpointApi - factory interface
 * @export
 */
export declare const MetricsMvcEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET93(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeUsingGET95(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    valueUsingGET7(name: string, options?: any): AxiosPromise<object>;
};
/**
 * MetricsMvcEndpointApi - object-oriented interface
 * @export
 * @class MetricsMvcEndpointApi
 * @extends {BaseAPI}
 */
export declare class MetricsMvcEndpointApi extends BaseAPI {
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsMvcEndpointApi
     */
    invokeUsingGET93(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary invoke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsMvcEndpointApi
     */
    invokeUsingGET95(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary value
     * @param {string} name name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsMvcEndpointApi
     */
    valueUsingGET7(name: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * OrderHistoryEndpointApi - axios parameter creator
 * @export
 */
export declare const OrderHistoryEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllOrdersForCustomerUsingGET3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrderByIdUsingGET3: (orderId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrdersForCustomerUsingGET3: (orderStatus?: string, orderNumber?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * OrderHistoryEndpointApi - functional programming interface
 * @export
 */
export declare const OrderHistoryEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllOrdersForCustomerUsingGET3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderWrapper>>>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrderByIdUsingGET3(orderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrdersForCustomerUsingGET3(orderStatus?: string, orderNumber?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderWrapper>>>;
};
/**
 * OrderHistoryEndpointApi - factory interface
 * @export
 */
export declare const OrderHistoryEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAllOrdersForCustomerUsingGET3(options?: any): AxiosPromise<Array<OrderWrapper>>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrderByIdUsingGET3(orderId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrdersForCustomerUsingGET3(orderStatus?: string, orderNumber?: string, options?: any): AxiosPromise<Array<OrderWrapper>>;
};
/**
 * OrderHistoryEndpointApi - object-oriented interface
 * @export
 * @class OrderHistoryEndpointApi
 * @extends {BaseAPI}
 */
export declare class OrderHistoryEndpointApi extends BaseAPI {
    /**
     *
     * @summary findAllOrdersForCustomer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findAllOrdersForCustomerUsingGET3(options?: any): Promise<import("axios").AxiosResponse<OrderWrapper[]>>;
    /**
     *
     * @summary findOrderById
     * @param {number} orderId orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrderByIdUsingGET3(orderId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary findOrdersForCustomer
     * @param {string} [orderStatus] orderStatus
     * @param {string} [orderNumber] orderNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderHistoryEndpointApi
     */
    findOrdersForCustomerUsingGET3(orderStatus?: string, orderNumber?: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper[]>>;
}
/**
 * PreviewTemplateControllerApi - axios parameter creator
 * @export
 */
export declare const PreviewTemplateControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingDELETE3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingGET3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingHEAD3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingOPTIONS3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPATCH3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPOST3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPUT3: (options?: any) => Promise<RequestArgs>;
};
/**
 * PreviewTemplateControllerApi - functional programming interface
 * @export
 */
export declare const PreviewTemplateControllerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingDELETE3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingGET3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingHEAD3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingOPTIONS3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPATCH3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPOST3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPUT3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * PreviewTemplateControllerApi - factory interface
 * @export
 */
export declare const PreviewTemplateControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingDELETE3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingGET3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingHEAD3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingOPTIONS3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPATCH3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPOST3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    displayPreviewUsingPUT3(options?: any): AxiosPromise<string>;
};
/**
 * PreviewTemplateControllerApi - object-oriented interface
 * @export
 * @class PreviewTemplateControllerApi
 * @extends {BaseAPI}
 */
export declare class PreviewTemplateControllerApi extends BaseAPI {
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingDELETE3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingGET3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingHEAD3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingOPTIONS3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPATCH3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPOST3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary displayPreview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewTemplateControllerApi
     */
    displayPreviewUsingPUT3(options?: any): Promise<import("axios").AxiosResponse<string>>;
}
/**
 * PromotionMessageEndpointApi - axios parameter creator
 * @export
 */
export declare const PromotionMessageEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPromotionMessagesForProductUsingGET3: (productId: number, options?: any) => Promise<RequestArgs>;
};
/**
 * PromotionMessageEndpointApi - functional programming interface
 * @export
 */
export declare const PromotionMessageEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPromotionMessagesForProductUsingGET3(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: PromotionMessageDTOWrapper[];
    }>>;
};
/**
 * PromotionMessageEndpointApi - factory interface
 * @export
 */
export declare const PromotionMessageEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPromotionMessagesForProductUsingGET3(productId: number, options?: any): AxiosPromise<{
        [key: string]: PromotionMessageDTOWrapper[];
    }>;
};
/**
 * PromotionMessageEndpointApi - object-oriented interface
 * @export
 * @class PromotionMessageEndpointApi
 * @extends {BaseAPI}
 */
export declare class PromotionMessageEndpointApi extends BaseAPI {
    /**
     *
     * @summary findPromotionMessagesForProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionMessageEndpointApi
     */
    findPromotionMessagesForProductUsingGET3(productId: number, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: PromotionMessageDTOWrapper[];
    }>>;
}
/**
 * RatingEndpointApi - axios parameter creator
 * @export
 */
export declare const RatingEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingDELETE3: (itemId: string, ratingType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingGET3: (itemId: string, ratingType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingHEAD3: (itemId: string, ratingType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingOPTIONS3: (itemId: string, ratingType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingPATCH3: (itemId: string, ratingType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingPUT3: (itemId: string, ratingType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary submitReviewForItem
     * @param {string} itemId itemId
     * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitReviewForItemUsingPOST3: (itemId: string, reviewDetailWrapper: ReviewDetailWrapper, ratingType?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * RatingEndpointApi - functional programming interface
 * @export
 */
export declare const RatingEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingDELETE3(itemId: string, ratingType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingGET3(itemId: string, ratingType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingHEAD3(itemId: string, ratingType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingOPTIONS3(itemId: string, ratingType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingPATCH3(itemId: string, ratingType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingPUT3(itemId: string, ratingType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingSummaryWrapper>>;
    /**
     *
     * @summary submitReviewForItem
     * @param {string} itemId itemId
     * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitReviewForItemUsingPOST3(itemId: string, reviewDetailWrapper: ReviewDetailWrapper, ratingType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingSummaryWrapper>>;
};
/**
 * RatingEndpointApi - factory interface
 * @export
 */
export declare const RatingEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingDELETE3(itemId: string, ratingType?: string, options?: any): AxiosPromise<RatingSummaryWrapper>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingGET3(itemId: string, ratingType?: string, options?: any): AxiosPromise<RatingSummaryWrapper>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingHEAD3(itemId: string, ratingType?: string, options?: any): AxiosPromise<RatingSummaryWrapper>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingOPTIONS3(itemId: string, ratingType?: string, options?: any): AxiosPromise<RatingSummaryWrapper>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingPATCH3(itemId: string, ratingType?: string, options?: any): AxiosPromise<RatingSummaryWrapper>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRatingsForItemUsingPUT3(itemId: string, ratingType?: string, options?: any): AxiosPromise<RatingSummaryWrapper>;
    /**
     *
     * @summary submitReviewForItem
     * @param {string} itemId itemId
     * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitReviewForItemUsingPOST3(itemId: string, reviewDetailWrapper: ReviewDetailWrapper, ratingType?: string, options?: any): AxiosPromise<RatingSummaryWrapper>;
};
/**
 * RatingEndpointApi - object-oriented interface
 * @export
 * @class RatingEndpointApi
 * @extends {BaseAPI}
 */
export declare class RatingEndpointApi extends BaseAPI {
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingDELETE3(itemId: string, ratingType?: string, options?: any): Promise<import("axios").AxiosResponse<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingGET3(itemId: string, ratingType?: string, options?: any): Promise<import("axios").AxiosResponse<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingHEAD3(itemId: string, ratingType?: string, options?: any): Promise<import("axios").AxiosResponse<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingOPTIONS3(itemId: string, ratingType?: string, options?: any): Promise<import("axios").AxiosResponse<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingPATCH3(itemId: string, ratingType?: string, options?: any): Promise<import("axios").AxiosResponse<RatingSummaryWrapper>>;
    /**
     *
     * @summary getRatingsForItem
     * @param {string} itemId itemId
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    getRatingsForItemUsingPUT3(itemId: string, ratingType?: string, options?: any): Promise<import("axios").AxiosResponse<RatingSummaryWrapper>>;
    /**
     *
     * @summary submitReviewForItem
     * @param {string} itemId itemId
     * @param {ReviewDetailWrapper} reviewDetailWrapper reviewDetailWrapper
     * @param {string} [ratingType] ratingType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingEndpointApi
     */
    submitReviewForItemUsingPOST3(itemId: string, reviewDetailWrapper: ReviewDetailWrapper, ratingType?: string, options?: any): Promise<import("axios").AxiosResponse<RatingSummaryWrapper>>;
}
/**
 * RelatedProductsEndpointApi - axios parameter creator
 * @export
 */
export declare const RelatedProductsEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelatedProductsUsingGET3: (productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * RelatedProductsEndpointApi - functional programming interface
 * @export
 */
export declare const RelatedProductsEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelatedProductsUsingGET3(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWrapper>>>;
};
/**
 * RelatedProductsEndpointApi - factory interface
 * @export
 */
export declare const RelatedProductsEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelatedProductsUsingGET3(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): AxiosPromise<Array<ProductWrapper>>;
};
/**
 * RelatedProductsEndpointApi - object-oriented interface
 * @export
 * @class RelatedProductsEndpointApi
 * @extends {BaseAPI}
 */
export declare class RelatedProductsEndpointApi extends BaseAPI {
    /**
     *
     * @summary getRelatedProducts
     * @param {number} [productId] productId
     * @param {string} [productKey] productKey
     * @param {number} [categoryId] categoryId
     * @param {string} [categoryKey] categoryKey
     * @param {number} [quantity] quantity
     * @param {string} [type] type
     * @param {boolean} [includePromotionMessages] includePromotionMessages
     * @param {boolean} [includePriceData] includePriceData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatedProductsEndpointApi
     */
    getRelatedProductsUsingGET3(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, options?: any): Promise<import("axios").AxiosResponse<ProductWrapper[]>>;
}
/**
 * SwaggerDocsReloadEndpointApi - axios parameter creator
 * @export
 */
export declare const SwaggerDocsReloadEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingDELETE3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingGET3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingHEAD3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingOPTIONS3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPATCH3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPOST3: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPUT3: (options?: any) => Promise<RequestArgs>;
};
/**
 * SwaggerDocsReloadEndpointApi - functional programming interface
 * @export
 */
export declare const SwaggerDocsReloadEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingDELETE3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingGET3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingHEAD3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingOPTIONS3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPATCH3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPOST3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPUT3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * SwaggerDocsReloadEndpointApi - factory interface
 * @export
 */
export declare const SwaggerDocsReloadEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingDELETE3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingGET3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingHEAD3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingOPTIONS3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPATCH3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPOST3(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reloadUsingPUT3(options?: any): AxiosPromise<string>;
};
/**
 * SwaggerDocsReloadEndpointApi - object-oriented interface
 * @export
 * @class SwaggerDocsReloadEndpointApi
 * @extends {BaseAPI}
 */
export declare class SwaggerDocsReloadEndpointApi extends BaseAPI {
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingDELETE3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingGET3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingHEAD3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingOPTIONS3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingPATCH3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingPOST3(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Hot-reloads the Swagger documentation in the running context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwaggerDocsReloadEndpointApi
     */
    reloadUsingPUT3(options?: any): Promise<import("axios").AxiosResponse<string>>;
}
/**
 * WishlistEndpointApi - axios parameter creator
 * @export
 */
export declare const WishlistEndpointApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfigureItemToWishlistUsingPOST3: (wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToWishlistUsingPOST3: (wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWishlistUsingGET3: (wishlistName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveItemToCartUsingPOST3: (wishlistName: string, itemId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveListToCartUsingPOST3: (wishlistName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromWishlistUsingDELETE3: (wishlistName: string, itemId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuantityInWishlistUsingPUT3: (wishlistName: string, itemId: number, quantity: number, options?: any) => Promise<RequestArgs>;
};
/**
 * WishlistEndpointApi - functional programming interface
 * @export
 */
export declare const WishlistEndpointApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfigureItemToWishlistUsingPOST3(wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToWishlistUsingPOST3(wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWishlistUsingGET3(wishlistName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveItemToCartUsingPOST3(wishlistName: string, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveListToCartUsingPOST3(wishlistName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromWishlistUsingDELETE3(wishlistName: string, itemId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuantityInWishlistUsingPUT3(wishlistName: string, itemId: number, quantity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderWrapper>>;
};
/**
 * WishlistEndpointApi - factory interface
 * @export
 */
export declare const WishlistEndpointApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addConfigureItemToWishlistUsingPOST3(wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToWishlistUsingPOST3(wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWishlistUsingGET3(wishlistName: string, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveItemToCartUsingPOST3(wishlistName: string, itemId: string, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveListToCartUsingPOST3(wishlistName: string, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromWishlistUsingDELETE3(wishlistName: string, itemId: number, options?: any): AxiosPromise<OrderWrapper>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuantityInWishlistUsingPUT3(wishlistName: string, itemId: number, quantity: number, options?: any): AxiosPromise<OrderWrapper>;
};
/**
 * WishlistEndpointApi - object-oriented interface
 * @export
 * @class WishlistEndpointApi
 * @extends {BaseAPI}
 */
export declare class WishlistEndpointApi extends BaseAPI {
    /**
     *
     * @summary addConfigureItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {ConfigurableOrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addConfigureItemToWishlistUsingPOST3(wishlistName: string, orderItemWrapper: ConfigurableOrderItemWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary addItemToWishlist
     * @param {string} wishlistName wishlistName
     * @param {OrderItemWrapper} orderItemWrapper orderItemWrapper
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    addItemToWishlistUsingPOST3(wishlistName: string, orderItemWrapper: OrderItemWrapper, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary getWishlist
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    getWishlistUsingGET3(wishlistName: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary moveItemToCart
     * @param {string} wishlistName wishlistName
     * @param {string} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveItemToCartUsingPOST3(wishlistName: string, itemId: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary moveListToCart
     * @param {string} wishlistName wishlistName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    moveListToCartUsingPOST3(wishlistName: string, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary removeItemFromWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    removeItemFromWishlistUsingDELETE3(wishlistName: string, itemId: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
    /**
     *
     * @summary updateQuantityInWishlist
     * @param {string} wishlistName wishlistName
     * @param {number} itemId itemId
     * @param {number} quantity quantity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistEndpointApi
     */
    updateQuantityInWishlistUsingPUT3(wishlistName: string, itemId: number, quantity: number, options?: any): Promise<import("axios").AxiosResponse<OrderWrapper>>;
}
